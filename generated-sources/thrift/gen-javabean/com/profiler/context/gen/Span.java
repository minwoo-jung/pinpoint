/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.profiler.context.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Span implements org.apache.thrift.TBase<Span, Span._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Span");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BINARY_ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryAnnotations", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanTupleSchemeFactory());
  }

  private String traceID; // required
  private String name; // required
  private String spanID; // required
  private String parentSpanId; // optional
  private List<Annotation> annotations; // required
  private List<BinaryAnnotation> binaryAnnotations; // required
  private boolean debug; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "traceID"),
    NAME((short)2, "name"),
    SPAN_ID((short)3, "spanID"),
    PARENT_SPAN_ID((short)4, "parentSpanId"),
    ANNOTATIONS((short)5, "annotations"),
    BINARY_ANNOTATIONS((short)6, "binaryAnnotations"),
    DEBUG((short)7, "debug");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // NAME
          return NAME;
        case 3: // SPAN_ID
          return SPAN_ID;
        case 4: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 5: // ANNOTATIONS
          return ANNOTATIONS;
        case 6: // BINARY_ANNOTATIONS
          return BINARY_ANNOTATIONS;
        case 7: // DEBUG
          return DEBUG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBUG_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.PARENT_SPAN_ID,_Fields.DEBUG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotation.class))));
    tmpMap.put(_Fields.BINARY_ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("binaryAnnotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryAnnotation.class))));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
  }

  public Span() {
    this.debug = false;

  }

  public Span(
    String traceID,
    String name,
    String spanID,
    List<Annotation> annotations,
    List<BinaryAnnotation> binaryAnnotations)
  {
    this();
    this.traceID = traceID;
    this.name = name;
    this.spanID = spanID;
    this.annotations = annotations;
    this.binaryAnnotations = binaryAnnotations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Span(Span other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTraceID()) {
      this.traceID = other.traceID;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSpanID()) {
      this.spanID = other.spanID;
    }
    if (other.isSetParentSpanId()) {
      this.parentSpanId = other.parentSpanId;
    }
    if (other.isSetAnnotations()) {
      List<Annotation> __this__annotations = new ArrayList<Annotation>();
      for (Annotation other_element : other.annotations) {
        __this__annotations.add(new Annotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    if (other.isSetBinaryAnnotations()) {
      List<BinaryAnnotation> __this__binaryAnnotations = new ArrayList<BinaryAnnotation>();
      for (BinaryAnnotation other_element : other.binaryAnnotations) {
        __this__binaryAnnotations.add(new BinaryAnnotation(other_element));
      }
      this.binaryAnnotations = __this__binaryAnnotations;
    }
    this.debug = other.debug;
  }

  public Span deepCopy() {
    return new Span(this);
  }

  @Override
  public void clear() {
    this.traceID = null;
    this.name = null;
    this.spanID = null;
    this.parentSpanId = null;
    this.annotations = null;
    this.binaryAnnotations = null;
    this.debug = false;

  }

  public String getTraceID() {
    return this.traceID;
  }

  public void setTraceID(String traceID) {
    this.traceID = traceID;
  }

  public void unsetTraceID() {
    this.traceID = null;
  }

  /** Returns true if field traceID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceID() {
    return this.traceID != null;
  }

  public void setTraceIDIsSet(boolean value) {
    if (!value) {
      this.traceID = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSpanID() {
    return this.spanID;
  }

  public void setSpanID(String spanID) {
    this.spanID = spanID;
  }

  public void unsetSpanID() {
    this.spanID = null;
  }

  /** Returns true if field spanID is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanID() {
    return this.spanID != null;
  }

  public void setSpanIDIsSet(boolean value) {
    if (!value) {
      this.spanID = null;
    }
  }

  public String getParentSpanId() {
    return this.parentSpanId;
  }

  public void setParentSpanId(String parentSpanId) {
    this.parentSpanId = parentSpanId;
  }

  public void unsetParentSpanId() {
    this.parentSpanId = null;
  }

  /** Returns true if field parentSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return this.parentSpanId != null;
  }

  public void setParentSpanIdIsSet(boolean value) {
    if (!value) {
      this.parentSpanId = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<Annotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(Annotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<Annotation>();
    }
    this.annotations.add(elem);
  }

  public List<Annotation> getAnnotations() {
    return this.annotations;
  }

  public void setAnnotations(List<Annotation> annotations) {
    this.annotations = annotations;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public int getBinaryAnnotationsSize() {
    return (this.binaryAnnotations == null) ? 0 : this.binaryAnnotations.size();
  }

  public java.util.Iterator<BinaryAnnotation> getBinaryAnnotationsIterator() {
    return (this.binaryAnnotations == null) ? null : this.binaryAnnotations.iterator();
  }

  public void addToBinaryAnnotations(BinaryAnnotation elem) {
    if (this.binaryAnnotations == null) {
      this.binaryAnnotations = new ArrayList<BinaryAnnotation>();
    }
    this.binaryAnnotations.add(elem);
  }

  public List<BinaryAnnotation> getBinaryAnnotations() {
    return this.binaryAnnotations;
  }

  public void setBinaryAnnotations(List<BinaryAnnotation> binaryAnnotations) {
    this.binaryAnnotations = binaryAnnotations;
  }

  public void unsetBinaryAnnotations() {
    this.binaryAnnotations = null;
  }

  /** Returns true if field binaryAnnotations is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryAnnotations() {
    return this.binaryAnnotations != null;
  }

  public void setBinaryAnnotationsIsSet(boolean value) {
    if (!value) {
      this.binaryAnnotations = null;
    }
  }

  public boolean isDebug() {
    return this.debug;
  }

  public void setDebug(boolean debug) {
    this.debug = debug;
    setDebugIsSet(true);
  }

  public void unsetDebug() {
    __isset_bit_vector.clear(__DEBUG_ISSET_ID);
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return __isset_bit_vector.get(__DEBUG_ISSET_ID);
  }

  public void setDebugIsSet(boolean value) {
    __isset_bit_vector.set(__DEBUG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceID();
      } else {
        setTraceID((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanID();
      } else {
        setSpanID((String)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((String)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<Annotation>)value);
      }
      break;

    case BINARY_ANNOTATIONS:
      if (value == null) {
        unsetBinaryAnnotations();
      } else {
        setBinaryAnnotations((List<BinaryAnnotation>)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceID();

    case NAME:
      return getName();

    case SPAN_ID:
      return getSpanID();

    case PARENT_SPAN_ID:
      return getParentSpanId();

    case ANNOTATIONS:
      return getAnnotations();

    case BINARY_ANNOTATIONS:
      return getBinaryAnnotations();

    case DEBUG:
      return Boolean.valueOf(isDebug());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceID();
    case NAME:
      return isSetName();
    case SPAN_ID:
      return isSetSpanID();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case ANNOTATIONS:
      return isSetAnnotations();
    case BINARY_ANNOTATIONS:
      return isSetBinaryAnnotations();
    case DEBUG:
      return isSetDebug();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Span)
      return this.equals((Span)that);
    return false;
  }

  public boolean equals(Span that) {
    if (that == null)
      return false;

    boolean this_present_traceID = true && this.isSetTraceID();
    boolean that_present_traceID = true && that.isSetTraceID();
    if (this_present_traceID || that_present_traceID) {
      if (!(this_present_traceID && that_present_traceID))
        return false;
      if (!this.traceID.equals(that.traceID))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_spanID = true && this.isSetSpanID();
    boolean that_present_spanID = true && that.isSetSpanID();
    if (this_present_spanID || that_present_spanID) {
      if (!(this_present_spanID && that_present_spanID))
        return false;
      if (!this.spanID.equals(that.spanID))
        return false;
    }

    boolean this_present_parentSpanId = true && this.isSetParentSpanId();
    boolean that_present_parentSpanId = true && that.isSetParentSpanId();
    if (this_present_parentSpanId || that_present_parentSpanId) {
      if (!(this_present_parentSpanId && that_present_parentSpanId))
        return false;
      if (!this.parentSpanId.equals(that.parentSpanId))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_binaryAnnotations = true && this.isSetBinaryAnnotations();
    boolean that_present_binaryAnnotations = true && that.isSetBinaryAnnotations();
    if (this_present_binaryAnnotations || that_present_binaryAnnotations) {
      if (!(this_present_binaryAnnotations && that_present_binaryAnnotations))
        return false;
      if (!this.binaryAnnotations.equals(that.binaryAnnotations))
        return false;
    }

    boolean this_present_debug = true && this.isSetDebug();
    boolean that_present_debug = true && that.isSetDebug();
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (this.debug != that.debug)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Span other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Span typedOther = (Span)other;

    lastComparison = Boolean.valueOf(isSetTraceID()).compareTo(typedOther.isSetTraceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceID, typedOther.traceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanID()).compareTo(typedOther.isSetSpanID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanID, typedOther.spanID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentSpanId()).compareTo(typedOther.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanId, typedOther.parentSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryAnnotations()).compareTo(typedOther.isSetBinaryAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryAnnotations, typedOther.binaryAnnotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug()).compareTo(typedOther.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, typedOther.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Span(");
    boolean first = true;

    sb.append("traceID:");
    if (this.traceID == null) {
      sb.append("null");
    } else {
      sb.append(this.traceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanID:");
    if (this.spanID == null) {
      sb.append("null");
    } else {
      sb.append(this.spanID);
    }
    first = false;
    if (isSetParentSpanId()) {
      if (!first) sb.append(", ");
      sb.append("parentSpanId:");
      if (this.parentSpanId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentSpanId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryAnnotations:");
    if (this.binaryAnnotations == null) {
      sb.append("null");
    } else {
      sb.append(this.binaryAnnotations);
    }
    first = false;
    if (isSetDebug()) {
      if (!first) sb.append(", ");
      sb.append("debug:");
      sb.append(this.debug);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanStandardSchemeFactory implements SchemeFactory {
    public SpanStandardScheme getScheme() {
      return new SpanStandardScheme();
    }
  }

  private static class SpanStandardScheme extends StandardScheme<Span> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Span struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceID = iprot.readString();
              struct.setTraceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spanID = iprot.readString();
              struct.setSpanIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentSpanId = iprot.readString();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.annotations = new ArrayList<Annotation>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Annotation _elem2; // required
                  _elem2 = new Annotation();
                  _elem2.read(iprot);
                  struct.annotations.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BINARY_ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.binaryAnnotations = new ArrayList<BinaryAnnotation>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  BinaryAnnotation _elem5; // required
                  _elem5 = new BinaryAnnotation();
                  _elem5.read(iprot);
                  struct.binaryAnnotations.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setBinaryAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.debug = iprot.readBool();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Span struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceID != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceID);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.spanID != null) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeString(struct.spanID);
        oprot.writeFieldEnd();
      }
      if (struct.parentSpanId != null) {
        if (struct.isSetParentSpanId()) {
          oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
          oprot.writeString(struct.parentSpanId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.annotations != null) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.annotations.size()));
          for (Annotation _iter6 : struct.annotations)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.binaryAnnotations != null) {
        oprot.writeFieldBegin(BINARY_ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.binaryAnnotations.size()));
          for (BinaryAnnotation _iter7 : struct.binaryAnnotations)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetDebug()) {
        oprot.writeFieldBegin(DEBUG_FIELD_DESC);
        oprot.writeBool(struct.debug);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanTupleSchemeFactory implements SchemeFactory {
    public SpanTupleScheme getScheme() {
      return new SpanTupleScheme();
    }
  }

  private static class SpanTupleScheme extends TupleScheme<Span> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTraceID()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSpanID()) {
        optionals.set(2);
      }
      if (struct.isSetParentSpanId()) {
        optionals.set(3);
      }
      if (struct.isSetAnnotations()) {
        optionals.set(4);
      }
      if (struct.isSetBinaryAnnotations()) {
        optionals.set(5);
      }
      if (struct.isSetDebug()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTraceID()) {
        oprot.writeString(struct.traceID);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSpanID()) {
        oprot.writeString(struct.spanID);
      }
      if (struct.isSetParentSpanId()) {
        oprot.writeString(struct.parentSpanId);
      }
      if (struct.isSetAnnotations()) {
        {
          oprot.writeI32(struct.annotations.size());
          for (Annotation _iter8 : struct.annotations)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetBinaryAnnotations()) {
        {
          oprot.writeI32(struct.binaryAnnotations.size());
          for (BinaryAnnotation _iter9 : struct.binaryAnnotations)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetDebug()) {
        oprot.writeBool(struct.debug);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.traceID = iprot.readString();
        struct.setTraceIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spanID = iprot.readString();
        struct.setSpanIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parentSpanId = iprot.readString();
        struct.setParentSpanIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.annotations = new ArrayList<Annotation>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            Annotation _elem12; // required
            _elem12 = new Annotation();
            _elem12.read(iprot);
            struct.annotations.add(_elem12);
          }
        }
        struct.setAnnotationsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.binaryAnnotations = new ArrayList<BinaryAnnotation>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            BinaryAnnotation _elem15; // required
            _elem15 = new BinaryAnnotation();
            _elem15.read(iprot);
            struct.binaryAnnotations.add(_elem15);
          }
        }
        struct.setBinaryAnnotationsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.debug = iprot.readBool();
        struct.setDebugIsSet(true);
      }
    }
  }

}

