/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nhn.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TStatWithParallelCollector implements org.apache.thrift.TBase<TStatWithParallelCollector, TStatWithParallelCollector._Fields>, java.io.Serializable, Cloneable, Comparable<TStatWithParallelCollector> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStatWithParallelCollector");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalUsed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalMax", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapUsed", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapMax", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapUsed", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapMax", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_CODE_CACHE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsCodeCacheUsage", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsPSEdenSpaceUsage", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsPSSurvivorSpaceUsage", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_PSPERM_GEN_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsPSPermGenUsage", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_PSOLD_GEN_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsPSOldGenUsage", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField JVM_GC_PSMARK_SWEEP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcPSMarkSweepCount", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField JVM_GC_PSMARK_SWEEP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcPSMarkSweepTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField JVM_GC_PSSCAVENGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcPSScavengeCount", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField JVM_GC_PSSCAVENGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcPSScavengeTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TStatWithParallelCollectorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TStatWithParallelCollectorTupleSchemeFactory());
  }

  private String agentId; // required
  private long timestamp; // required
  private long jvmMemoryTotalUsed; // required
  private long jvmMemoryTotalMax; // required
  private long jvmMemoryHeapUsed; // required
  private long jvmMemoryHeapMax; // required
  private long jvmMemoryNonHeapUsed; // required
  private long jvmMemoryNonHeapMax; // required
  private long jvmMemoryPoolsCodeCacheUsage; // required
  private long jvmMemoryPoolsPSEdenSpaceUsage; // required
  private long jvmMemoryPoolsPSSurvivorSpaceUsage; // required
  private long jvmMemoryPoolsPSPermGenUsage; // required
  private long jvmMemoryPoolsPSOldGenUsage; // required
  private long jvmGcPSMarkSweepCount; // required
  private long jvmGcPSMarkSweepTime; // required
  private long jvmGcPSScavengeCount; // required
  private long jvmGcPSScavengeTime; // required
  private String metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    TIMESTAMP((short)2, "timestamp"),
    JVM_MEMORY_TOTAL_USED((short)3, "jvmMemoryTotalUsed"),
    JVM_MEMORY_TOTAL_MAX((short)4, "jvmMemoryTotalMax"),
    JVM_MEMORY_HEAP_USED((short)5, "jvmMemoryHeapUsed"),
    JVM_MEMORY_HEAP_MAX((short)6, "jvmMemoryHeapMax"),
    JVM_MEMORY_NON_HEAP_USED((short)7, "jvmMemoryNonHeapUsed"),
    JVM_MEMORY_NON_HEAP_MAX((short)8, "jvmMemoryNonHeapMax"),
    JVM_MEMORY_POOLS_CODE_CACHE_USAGE((short)9, "jvmMemoryPoolsCodeCacheUsage"),
    JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE((short)10, "jvmMemoryPoolsPSEdenSpaceUsage"),
    JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE((short)11, "jvmMemoryPoolsPSSurvivorSpaceUsage"),
    JVM_MEMORY_POOLS_PSPERM_GEN_USAGE((short)12, "jvmMemoryPoolsPSPermGenUsage"),
    JVM_MEMORY_POOLS_PSOLD_GEN_USAGE((short)13, "jvmMemoryPoolsPSOldGenUsage"),
    JVM_GC_PSMARK_SWEEP_COUNT((short)14, "jvmGcPSMarkSweepCount"),
    JVM_GC_PSMARK_SWEEP_TIME((short)15, "jvmGcPSMarkSweepTime"),
    JVM_GC_PSSCAVENGE_COUNT((short)16, "jvmGcPSScavengeCount"),
    JVM_GC_PSSCAVENGE_TIME((short)17, "jvmGcPSScavengeTime"),
    METADATA((short)200, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // JVM_MEMORY_TOTAL_USED
          return JVM_MEMORY_TOTAL_USED;
        case 4: // JVM_MEMORY_TOTAL_MAX
          return JVM_MEMORY_TOTAL_MAX;
        case 5: // JVM_MEMORY_HEAP_USED
          return JVM_MEMORY_HEAP_USED;
        case 6: // JVM_MEMORY_HEAP_MAX
          return JVM_MEMORY_HEAP_MAX;
        case 7: // JVM_MEMORY_NON_HEAP_USED
          return JVM_MEMORY_NON_HEAP_USED;
        case 8: // JVM_MEMORY_NON_HEAP_MAX
          return JVM_MEMORY_NON_HEAP_MAX;
        case 9: // JVM_MEMORY_POOLS_CODE_CACHE_USAGE
          return JVM_MEMORY_POOLS_CODE_CACHE_USAGE;
        case 10: // JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE
          return JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE;
        case 11: // JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE
          return JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE;
        case 12: // JVM_MEMORY_POOLS_PSPERM_GEN_USAGE
          return JVM_MEMORY_POOLS_PSPERM_GEN_USAGE;
        case 13: // JVM_MEMORY_POOLS_PSOLD_GEN_USAGE
          return JVM_MEMORY_POOLS_PSOLD_GEN_USAGE;
        case 14: // JVM_GC_PSMARK_SWEEP_COUNT
          return JVM_GC_PSMARK_SWEEP_COUNT;
        case 15: // JVM_GC_PSMARK_SWEEP_TIME
          return JVM_GC_PSMARK_SWEEP_TIME;
        case 16: // JVM_GC_PSSCAVENGE_COUNT
          return JVM_GC_PSSCAVENGE_COUNT;
        case 17: // JVM_GC_PSSCAVENGE_TIME
          return JVM_GC_PSSCAVENGE_TIME;
        case 200: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __JVMMEMORYTOTALUSED_ISSET_ID = 1;
  private static final int __JVMMEMORYTOTALMAX_ISSET_ID = 2;
  private static final int __JVMMEMORYHEAPUSED_ISSET_ID = 3;
  private static final int __JVMMEMORYHEAPMAX_ISSET_ID = 4;
  private static final int __JVMMEMORYNONHEAPUSED_ISSET_ID = 5;
  private static final int __JVMMEMORYNONHEAPMAX_ISSET_ID = 6;
  private static final int __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID = 7;
  private static final int __JVMMEMORYPOOLSPSEDENSPACEUSAGE_ISSET_ID = 8;
  private static final int __JVMMEMORYPOOLSPSSURVIVORSPACEUSAGE_ISSET_ID = 9;
  private static final int __JVMMEMORYPOOLSPSPERMGENUSAGE_ISSET_ID = 10;
  private static final int __JVMMEMORYPOOLSPSOLDGENUSAGE_ISSET_ID = 11;
  private static final int __JVMGCPSMARKSWEEPCOUNT_ISSET_ID = 12;
  private static final int __JVMGCPSMARKSWEEPTIME_ISSET_ID = 13;
  private static final int __JVMGCPSSCAVENGECOUNT_ISSET_ID = 14;
  private static final int __JVMGCPSSCAVENGETIME_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_CODE_CACHE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsCodeCacheUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsPSEdenSpaceUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsPSSurvivorSpaceUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_PSPERM_GEN_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsPSPermGenUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_PSOLD_GEN_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsPSOldGenUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_PSMARK_SWEEP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("jvmGcPSMarkSweepCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_PSMARK_SWEEP_TIME, new org.apache.thrift.meta_data.FieldMetaData("jvmGcPSMarkSweepTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_PSSCAVENGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("jvmGcPSScavengeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_PSSCAVENGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("jvmGcPSScavengeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStatWithParallelCollector.class, metaDataMap);
  }

  public TStatWithParallelCollector() {
  }

  public TStatWithParallelCollector(
    String agentId,
    long timestamp,
    long jvmMemoryTotalUsed,
    long jvmMemoryTotalMax,
    long jvmMemoryHeapUsed,
    long jvmMemoryHeapMax,
    long jvmMemoryNonHeapUsed,
    long jvmMemoryNonHeapMax,
    long jvmMemoryPoolsCodeCacheUsage,
    long jvmMemoryPoolsPSEdenSpaceUsage,
    long jvmMemoryPoolsPSSurvivorSpaceUsage,
    long jvmMemoryPoolsPSPermGenUsage,
    long jvmMemoryPoolsPSOldGenUsage,
    long jvmGcPSMarkSweepCount,
    long jvmGcPSMarkSweepTime,
    long jvmGcPSScavengeCount,
    long jvmGcPSScavengeTime)
  {
    this();
    this.agentId = agentId;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.jvmMemoryTotalUsed = jvmMemoryTotalUsed;
    setJvmMemoryTotalUsedIsSet(true);
    this.jvmMemoryTotalMax = jvmMemoryTotalMax;
    setJvmMemoryTotalMaxIsSet(true);
    this.jvmMemoryHeapUsed = jvmMemoryHeapUsed;
    setJvmMemoryHeapUsedIsSet(true);
    this.jvmMemoryHeapMax = jvmMemoryHeapMax;
    setJvmMemoryHeapMaxIsSet(true);
    this.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed;
    setJvmMemoryNonHeapUsedIsSet(true);
    this.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax;
    setJvmMemoryNonHeapMaxIsSet(true);
    this.jvmMemoryPoolsCodeCacheUsage = jvmMemoryPoolsCodeCacheUsage;
    setJvmMemoryPoolsCodeCacheUsageIsSet(true);
    this.jvmMemoryPoolsPSEdenSpaceUsage = jvmMemoryPoolsPSEdenSpaceUsage;
    setJvmMemoryPoolsPSEdenSpaceUsageIsSet(true);
    this.jvmMemoryPoolsPSSurvivorSpaceUsage = jvmMemoryPoolsPSSurvivorSpaceUsage;
    setJvmMemoryPoolsPSSurvivorSpaceUsageIsSet(true);
    this.jvmMemoryPoolsPSPermGenUsage = jvmMemoryPoolsPSPermGenUsage;
    setJvmMemoryPoolsPSPermGenUsageIsSet(true);
    this.jvmMemoryPoolsPSOldGenUsage = jvmMemoryPoolsPSOldGenUsage;
    setJvmMemoryPoolsPSOldGenUsageIsSet(true);
    this.jvmGcPSMarkSweepCount = jvmGcPSMarkSweepCount;
    setJvmGcPSMarkSweepCountIsSet(true);
    this.jvmGcPSMarkSweepTime = jvmGcPSMarkSweepTime;
    setJvmGcPSMarkSweepTimeIsSet(true);
    this.jvmGcPSScavengeCount = jvmGcPSScavengeCount;
    setJvmGcPSScavengeCountIsSet(true);
    this.jvmGcPSScavengeTime = jvmGcPSScavengeTime;
    setJvmGcPSScavengeTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStatWithParallelCollector(TStatWithParallelCollector other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    this.timestamp = other.timestamp;
    this.jvmMemoryTotalUsed = other.jvmMemoryTotalUsed;
    this.jvmMemoryTotalMax = other.jvmMemoryTotalMax;
    this.jvmMemoryHeapUsed = other.jvmMemoryHeapUsed;
    this.jvmMemoryHeapMax = other.jvmMemoryHeapMax;
    this.jvmMemoryNonHeapUsed = other.jvmMemoryNonHeapUsed;
    this.jvmMemoryNonHeapMax = other.jvmMemoryNonHeapMax;
    this.jvmMemoryPoolsCodeCacheUsage = other.jvmMemoryPoolsCodeCacheUsage;
    this.jvmMemoryPoolsPSEdenSpaceUsage = other.jvmMemoryPoolsPSEdenSpaceUsage;
    this.jvmMemoryPoolsPSSurvivorSpaceUsage = other.jvmMemoryPoolsPSSurvivorSpaceUsage;
    this.jvmMemoryPoolsPSPermGenUsage = other.jvmMemoryPoolsPSPermGenUsage;
    this.jvmMemoryPoolsPSOldGenUsage = other.jvmMemoryPoolsPSOldGenUsage;
    this.jvmGcPSMarkSweepCount = other.jvmGcPSMarkSweepCount;
    this.jvmGcPSMarkSweepTime = other.jvmGcPSMarkSweepTime;
    this.jvmGcPSScavengeCount = other.jvmGcPSScavengeCount;
    this.jvmGcPSScavengeTime = other.jvmGcPSScavengeTime;
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
  }

  public TStatWithParallelCollector deepCopy() {
    return new TStatWithParallelCollector(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setJvmMemoryTotalUsedIsSet(false);
    this.jvmMemoryTotalUsed = 0;
    setJvmMemoryTotalMaxIsSet(false);
    this.jvmMemoryTotalMax = 0;
    setJvmMemoryHeapUsedIsSet(false);
    this.jvmMemoryHeapUsed = 0;
    setJvmMemoryHeapMaxIsSet(false);
    this.jvmMemoryHeapMax = 0;
    setJvmMemoryNonHeapUsedIsSet(false);
    this.jvmMemoryNonHeapUsed = 0;
    setJvmMemoryNonHeapMaxIsSet(false);
    this.jvmMemoryNonHeapMax = 0;
    setJvmMemoryPoolsCodeCacheUsageIsSet(false);
    this.jvmMemoryPoolsCodeCacheUsage = 0;
    setJvmMemoryPoolsPSEdenSpaceUsageIsSet(false);
    this.jvmMemoryPoolsPSEdenSpaceUsage = 0;
    setJvmMemoryPoolsPSSurvivorSpaceUsageIsSet(false);
    this.jvmMemoryPoolsPSSurvivorSpaceUsage = 0;
    setJvmMemoryPoolsPSPermGenUsageIsSet(false);
    this.jvmMemoryPoolsPSPermGenUsage = 0;
    setJvmMemoryPoolsPSOldGenUsageIsSet(false);
    this.jvmMemoryPoolsPSOldGenUsage = 0;
    setJvmGcPSMarkSweepCountIsSet(false);
    this.jvmGcPSMarkSweepCount = 0;
    setJvmGcPSMarkSweepTimeIsSet(false);
    this.jvmGcPSMarkSweepTime = 0;
    setJvmGcPSScavengeCountIsSet(false);
    this.jvmGcPSScavengeCount = 0;
    setJvmGcPSScavengeTimeIsSet(false);
    this.jvmGcPSScavengeTime = 0;
    this.metadata = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getJvmMemoryTotalUsed() {
    return this.jvmMemoryTotalUsed;
  }

  public void setJvmMemoryTotalUsed(long jvmMemoryTotalUsed) {
    this.jvmMemoryTotalUsed = jvmMemoryTotalUsed;
    setJvmMemoryTotalUsedIsSet(true);
  }

  public void unsetJvmMemoryTotalUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID);
  }

  public void setJvmMemoryTotalUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID, value);
  }

  public long getJvmMemoryTotalMax() {
    return this.jvmMemoryTotalMax;
  }

  public void setJvmMemoryTotalMax(long jvmMemoryTotalMax) {
    this.jvmMemoryTotalMax = jvmMemoryTotalMax;
    setJvmMemoryTotalMaxIsSet(true);
  }

  public void unsetJvmMemoryTotalMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID);
  }

  public void setJvmMemoryTotalMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID, value);
  }

  public long getJvmMemoryHeapUsed() {
    return this.jvmMemoryHeapUsed;
  }

  public void setJvmMemoryHeapUsed(long jvmMemoryHeapUsed) {
    this.jvmMemoryHeapUsed = jvmMemoryHeapUsed;
    setJvmMemoryHeapUsedIsSet(true);
  }

  public void unsetJvmMemoryHeapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID);
  }

  public void setJvmMemoryHeapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID, value);
  }

  public long getJvmMemoryHeapMax() {
    return this.jvmMemoryHeapMax;
  }

  public void setJvmMemoryHeapMax(long jvmMemoryHeapMax) {
    this.jvmMemoryHeapMax = jvmMemoryHeapMax;
    setJvmMemoryHeapMaxIsSet(true);
  }

  public void unsetJvmMemoryHeapMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID);
  }

  public void setJvmMemoryHeapMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapUsed() {
    return this.jvmMemoryNonHeapUsed;
  }

  public void setJvmMemoryNonHeapUsed(long jvmMemoryNonHeapUsed) {
    this.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed;
    setJvmMemoryNonHeapUsedIsSet(true);
  }

  public void unsetJvmMemoryNonHeapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID);
  }

  public void setJvmMemoryNonHeapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapMax() {
    return this.jvmMemoryNonHeapMax;
  }

  public void setJvmMemoryNonHeapMax(long jvmMemoryNonHeapMax) {
    this.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax;
    setJvmMemoryNonHeapMaxIsSet(true);
  }

  public void unsetJvmMemoryNonHeapMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID);
  }

  public void setJvmMemoryNonHeapMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsCodeCacheUsage() {
    return this.jvmMemoryPoolsCodeCacheUsage;
  }

  public void setJvmMemoryPoolsCodeCacheUsage(long jvmMemoryPoolsCodeCacheUsage) {
    this.jvmMemoryPoolsCodeCacheUsage = jvmMemoryPoolsCodeCacheUsage;
    setJvmMemoryPoolsCodeCacheUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsCodeCacheUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsCodeCacheUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsCodeCacheUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsCodeCacheUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsPSEdenSpaceUsage() {
    return this.jvmMemoryPoolsPSEdenSpaceUsage;
  }

  public void setJvmMemoryPoolsPSEdenSpaceUsage(long jvmMemoryPoolsPSEdenSpaceUsage) {
    this.jvmMemoryPoolsPSEdenSpaceUsage = jvmMemoryPoolsPSEdenSpaceUsage;
    setJvmMemoryPoolsPSEdenSpaceUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsPSEdenSpaceUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSPSEDENSPACEUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsPSEdenSpaceUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsPSEdenSpaceUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSPSEDENSPACEUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsPSEdenSpaceUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSPSEDENSPACEUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsPSSurvivorSpaceUsage() {
    return this.jvmMemoryPoolsPSSurvivorSpaceUsage;
  }

  public void setJvmMemoryPoolsPSSurvivorSpaceUsage(long jvmMemoryPoolsPSSurvivorSpaceUsage) {
    this.jvmMemoryPoolsPSSurvivorSpaceUsage = jvmMemoryPoolsPSSurvivorSpaceUsage;
    setJvmMemoryPoolsPSSurvivorSpaceUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsPSSurvivorSpaceUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSPSSURVIVORSPACEUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsPSSurvivorSpaceUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsPSSurvivorSpaceUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSPSSURVIVORSPACEUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsPSSurvivorSpaceUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSPSSURVIVORSPACEUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsPSPermGenUsage() {
    return this.jvmMemoryPoolsPSPermGenUsage;
  }

  public void setJvmMemoryPoolsPSPermGenUsage(long jvmMemoryPoolsPSPermGenUsage) {
    this.jvmMemoryPoolsPSPermGenUsage = jvmMemoryPoolsPSPermGenUsage;
    setJvmMemoryPoolsPSPermGenUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsPSPermGenUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSPSPERMGENUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsPSPermGenUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsPSPermGenUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSPSPERMGENUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsPSPermGenUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSPSPERMGENUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsPSOldGenUsage() {
    return this.jvmMemoryPoolsPSOldGenUsage;
  }

  public void setJvmMemoryPoolsPSOldGenUsage(long jvmMemoryPoolsPSOldGenUsage) {
    this.jvmMemoryPoolsPSOldGenUsage = jvmMemoryPoolsPSOldGenUsage;
    setJvmMemoryPoolsPSOldGenUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsPSOldGenUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSPSOLDGENUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsPSOldGenUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsPSOldGenUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSPSOLDGENUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsPSOldGenUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSPSOLDGENUSAGE_ISSET_ID, value);
  }

  public long getJvmGcPSMarkSweepCount() {
    return this.jvmGcPSMarkSweepCount;
  }

  public void setJvmGcPSMarkSweepCount(long jvmGcPSMarkSweepCount) {
    this.jvmGcPSMarkSweepCount = jvmGcPSMarkSweepCount;
    setJvmGcPSMarkSweepCountIsSet(true);
  }

  public void unsetJvmGcPSMarkSweepCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCPSMARKSWEEPCOUNT_ISSET_ID);
  }

  /** Returns true if field jvmGcPSMarkSweepCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcPSMarkSweepCount() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCPSMARKSWEEPCOUNT_ISSET_ID);
  }

  public void setJvmGcPSMarkSweepCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCPSMARKSWEEPCOUNT_ISSET_ID, value);
  }

  public long getJvmGcPSMarkSweepTime() {
    return this.jvmGcPSMarkSweepTime;
  }

  public void setJvmGcPSMarkSweepTime(long jvmGcPSMarkSweepTime) {
    this.jvmGcPSMarkSweepTime = jvmGcPSMarkSweepTime;
    setJvmGcPSMarkSweepTimeIsSet(true);
  }

  public void unsetJvmGcPSMarkSweepTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCPSMARKSWEEPTIME_ISSET_ID);
  }

  /** Returns true if field jvmGcPSMarkSweepTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcPSMarkSweepTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCPSMARKSWEEPTIME_ISSET_ID);
  }

  public void setJvmGcPSMarkSweepTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCPSMARKSWEEPTIME_ISSET_ID, value);
  }

  public long getJvmGcPSScavengeCount() {
    return this.jvmGcPSScavengeCount;
  }

  public void setJvmGcPSScavengeCount(long jvmGcPSScavengeCount) {
    this.jvmGcPSScavengeCount = jvmGcPSScavengeCount;
    setJvmGcPSScavengeCountIsSet(true);
  }

  public void unsetJvmGcPSScavengeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCPSSCAVENGECOUNT_ISSET_ID);
  }

  /** Returns true if field jvmGcPSScavengeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcPSScavengeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCPSSCAVENGECOUNT_ISSET_ID);
  }

  public void setJvmGcPSScavengeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCPSSCAVENGECOUNT_ISSET_ID, value);
  }

  public long getJvmGcPSScavengeTime() {
    return this.jvmGcPSScavengeTime;
  }

  public void setJvmGcPSScavengeTime(long jvmGcPSScavengeTime) {
    this.jvmGcPSScavengeTime = jvmGcPSScavengeTime;
    setJvmGcPSScavengeTimeIsSet(true);
  }

  public void unsetJvmGcPSScavengeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCPSSCAVENGETIME_ISSET_ID);
  }

  /** Returns true if field jvmGcPSScavengeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcPSScavengeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCPSSCAVENGETIME_ISSET_ID);
  }

  public void setJvmGcPSScavengeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCPSSCAVENGETIME_ISSET_ID, value);
  }

  public String getMetadata() {
    return this.metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_USED:
      if (value == null) {
        unsetJvmMemoryTotalUsed();
      } else {
        setJvmMemoryTotalUsed((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_MAX:
      if (value == null) {
        unsetJvmMemoryTotalMax();
      } else {
        setJvmMemoryTotalMax((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_USED:
      if (value == null) {
        unsetJvmMemoryHeapUsed();
      } else {
        setJvmMemoryHeapUsed((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_MAX:
      if (value == null) {
        unsetJvmMemoryHeapMax();
      } else {
        setJvmMemoryHeapMax((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_USED:
      if (value == null) {
        unsetJvmMemoryNonHeapUsed();
      } else {
        setJvmMemoryNonHeapUsed((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_MAX:
      if (value == null) {
        unsetJvmMemoryNonHeapMax();
      } else {
        setJvmMemoryNonHeapMax((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_CODE_CACHE_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsCodeCacheUsage();
      } else {
        setJvmMemoryPoolsCodeCacheUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsPSEdenSpaceUsage();
      } else {
        setJvmMemoryPoolsPSEdenSpaceUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsPSSurvivorSpaceUsage();
      } else {
        setJvmMemoryPoolsPSSurvivorSpaceUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_PSPERM_GEN_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsPSPermGenUsage();
      } else {
        setJvmMemoryPoolsPSPermGenUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_PSOLD_GEN_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsPSOldGenUsage();
      } else {
        setJvmMemoryPoolsPSOldGenUsage((Long)value);
      }
      break;

    case JVM_GC_PSMARK_SWEEP_COUNT:
      if (value == null) {
        unsetJvmGcPSMarkSweepCount();
      } else {
        setJvmGcPSMarkSweepCount((Long)value);
      }
      break;

    case JVM_GC_PSMARK_SWEEP_TIME:
      if (value == null) {
        unsetJvmGcPSMarkSweepTime();
      } else {
        setJvmGcPSMarkSweepTime((Long)value);
      }
      break;

    case JVM_GC_PSSCAVENGE_COUNT:
      if (value == null) {
        unsetJvmGcPSScavengeCount();
      } else {
        setJvmGcPSScavengeCount((Long)value);
      }
      break;

    case JVM_GC_PSSCAVENGE_TIME:
      if (value == null) {
        unsetJvmGcPSScavengeTime();
      } else {
        setJvmGcPSScavengeTime((Long)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case JVM_MEMORY_TOTAL_USED:
      return Long.valueOf(getJvmMemoryTotalUsed());

    case JVM_MEMORY_TOTAL_MAX:
      return Long.valueOf(getJvmMemoryTotalMax());

    case JVM_MEMORY_HEAP_USED:
      return Long.valueOf(getJvmMemoryHeapUsed());

    case JVM_MEMORY_HEAP_MAX:
      return Long.valueOf(getJvmMemoryHeapMax());

    case JVM_MEMORY_NON_HEAP_USED:
      return Long.valueOf(getJvmMemoryNonHeapUsed());

    case JVM_MEMORY_NON_HEAP_MAX:
      return Long.valueOf(getJvmMemoryNonHeapMax());

    case JVM_MEMORY_POOLS_CODE_CACHE_USAGE:
      return Long.valueOf(getJvmMemoryPoolsCodeCacheUsage());

    case JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE:
      return Long.valueOf(getJvmMemoryPoolsPSEdenSpaceUsage());

    case JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE:
      return Long.valueOf(getJvmMemoryPoolsPSSurvivorSpaceUsage());

    case JVM_MEMORY_POOLS_PSPERM_GEN_USAGE:
      return Long.valueOf(getJvmMemoryPoolsPSPermGenUsage());

    case JVM_MEMORY_POOLS_PSOLD_GEN_USAGE:
      return Long.valueOf(getJvmMemoryPoolsPSOldGenUsage());

    case JVM_GC_PSMARK_SWEEP_COUNT:
      return Long.valueOf(getJvmGcPSMarkSweepCount());

    case JVM_GC_PSMARK_SWEEP_TIME:
      return Long.valueOf(getJvmGcPSMarkSweepTime());

    case JVM_GC_PSSCAVENGE_COUNT:
      return Long.valueOf(getJvmGcPSScavengeCount());

    case JVM_GC_PSSCAVENGE_TIME:
      return Long.valueOf(getJvmGcPSScavengeTime());

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case TIMESTAMP:
      return isSetTimestamp();
    case JVM_MEMORY_TOTAL_USED:
      return isSetJvmMemoryTotalUsed();
    case JVM_MEMORY_TOTAL_MAX:
      return isSetJvmMemoryTotalMax();
    case JVM_MEMORY_HEAP_USED:
      return isSetJvmMemoryHeapUsed();
    case JVM_MEMORY_HEAP_MAX:
      return isSetJvmMemoryHeapMax();
    case JVM_MEMORY_NON_HEAP_USED:
      return isSetJvmMemoryNonHeapUsed();
    case JVM_MEMORY_NON_HEAP_MAX:
      return isSetJvmMemoryNonHeapMax();
    case JVM_MEMORY_POOLS_CODE_CACHE_USAGE:
      return isSetJvmMemoryPoolsCodeCacheUsage();
    case JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE:
      return isSetJvmMemoryPoolsPSEdenSpaceUsage();
    case JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE:
      return isSetJvmMemoryPoolsPSSurvivorSpaceUsage();
    case JVM_MEMORY_POOLS_PSPERM_GEN_USAGE:
      return isSetJvmMemoryPoolsPSPermGenUsage();
    case JVM_MEMORY_POOLS_PSOLD_GEN_USAGE:
      return isSetJvmMemoryPoolsPSOldGenUsage();
    case JVM_GC_PSMARK_SWEEP_COUNT:
      return isSetJvmGcPSMarkSweepCount();
    case JVM_GC_PSMARK_SWEEP_TIME:
      return isSetJvmGcPSMarkSweepTime();
    case JVM_GC_PSSCAVENGE_COUNT:
      return isSetJvmGcPSScavengeCount();
    case JVM_GC_PSSCAVENGE_TIME:
      return isSetJvmGcPSScavengeTime();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TStatWithParallelCollector)
      return this.equals((TStatWithParallelCollector)that);
    return false;
  }

  public boolean equals(TStatWithParallelCollector that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_jvmMemoryTotalUsed = true;
    boolean that_present_jvmMemoryTotalUsed = true;
    if (this_present_jvmMemoryTotalUsed || that_present_jvmMemoryTotalUsed) {
      if (!(this_present_jvmMemoryTotalUsed && that_present_jvmMemoryTotalUsed))
        return false;
      if (this.jvmMemoryTotalUsed != that.jvmMemoryTotalUsed)
        return false;
    }

    boolean this_present_jvmMemoryTotalMax = true;
    boolean that_present_jvmMemoryTotalMax = true;
    if (this_present_jvmMemoryTotalMax || that_present_jvmMemoryTotalMax) {
      if (!(this_present_jvmMemoryTotalMax && that_present_jvmMemoryTotalMax))
        return false;
      if (this.jvmMemoryTotalMax != that.jvmMemoryTotalMax)
        return false;
    }

    boolean this_present_jvmMemoryHeapUsed = true;
    boolean that_present_jvmMemoryHeapUsed = true;
    if (this_present_jvmMemoryHeapUsed || that_present_jvmMemoryHeapUsed) {
      if (!(this_present_jvmMemoryHeapUsed && that_present_jvmMemoryHeapUsed))
        return false;
      if (this.jvmMemoryHeapUsed != that.jvmMemoryHeapUsed)
        return false;
    }

    boolean this_present_jvmMemoryHeapMax = true;
    boolean that_present_jvmMemoryHeapMax = true;
    if (this_present_jvmMemoryHeapMax || that_present_jvmMemoryHeapMax) {
      if (!(this_present_jvmMemoryHeapMax && that_present_jvmMemoryHeapMax))
        return false;
      if (this.jvmMemoryHeapMax != that.jvmMemoryHeapMax)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapUsed = true;
    boolean that_present_jvmMemoryNonHeapUsed = true;
    if (this_present_jvmMemoryNonHeapUsed || that_present_jvmMemoryNonHeapUsed) {
      if (!(this_present_jvmMemoryNonHeapUsed && that_present_jvmMemoryNonHeapUsed))
        return false;
      if (this.jvmMemoryNonHeapUsed != that.jvmMemoryNonHeapUsed)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapMax = true;
    boolean that_present_jvmMemoryNonHeapMax = true;
    if (this_present_jvmMemoryNonHeapMax || that_present_jvmMemoryNonHeapMax) {
      if (!(this_present_jvmMemoryNonHeapMax && that_present_jvmMemoryNonHeapMax))
        return false;
      if (this.jvmMemoryNonHeapMax != that.jvmMemoryNonHeapMax)
        return false;
    }

    boolean this_present_jvmMemoryPoolsCodeCacheUsage = true;
    boolean that_present_jvmMemoryPoolsCodeCacheUsage = true;
    if (this_present_jvmMemoryPoolsCodeCacheUsage || that_present_jvmMemoryPoolsCodeCacheUsage) {
      if (!(this_present_jvmMemoryPoolsCodeCacheUsage && that_present_jvmMemoryPoolsCodeCacheUsage))
        return false;
      if (this.jvmMemoryPoolsCodeCacheUsage != that.jvmMemoryPoolsCodeCacheUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsPSEdenSpaceUsage = true;
    boolean that_present_jvmMemoryPoolsPSEdenSpaceUsage = true;
    if (this_present_jvmMemoryPoolsPSEdenSpaceUsage || that_present_jvmMemoryPoolsPSEdenSpaceUsage) {
      if (!(this_present_jvmMemoryPoolsPSEdenSpaceUsage && that_present_jvmMemoryPoolsPSEdenSpaceUsage))
        return false;
      if (this.jvmMemoryPoolsPSEdenSpaceUsage != that.jvmMemoryPoolsPSEdenSpaceUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsPSSurvivorSpaceUsage = true;
    boolean that_present_jvmMemoryPoolsPSSurvivorSpaceUsage = true;
    if (this_present_jvmMemoryPoolsPSSurvivorSpaceUsage || that_present_jvmMemoryPoolsPSSurvivorSpaceUsage) {
      if (!(this_present_jvmMemoryPoolsPSSurvivorSpaceUsage && that_present_jvmMemoryPoolsPSSurvivorSpaceUsage))
        return false;
      if (this.jvmMemoryPoolsPSSurvivorSpaceUsage != that.jvmMemoryPoolsPSSurvivorSpaceUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsPSPermGenUsage = true;
    boolean that_present_jvmMemoryPoolsPSPermGenUsage = true;
    if (this_present_jvmMemoryPoolsPSPermGenUsage || that_present_jvmMemoryPoolsPSPermGenUsage) {
      if (!(this_present_jvmMemoryPoolsPSPermGenUsage && that_present_jvmMemoryPoolsPSPermGenUsage))
        return false;
      if (this.jvmMemoryPoolsPSPermGenUsage != that.jvmMemoryPoolsPSPermGenUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsPSOldGenUsage = true;
    boolean that_present_jvmMemoryPoolsPSOldGenUsage = true;
    if (this_present_jvmMemoryPoolsPSOldGenUsage || that_present_jvmMemoryPoolsPSOldGenUsage) {
      if (!(this_present_jvmMemoryPoolsPSOldGenUsage && that_present_jvmMemoryPoolsPSOldGenUsage))
        return false;
      if (this.jvmMemoryPoolsPSOldGenUsage != that.jvmMemoryPoolsPSOldGenUsage)
        return false;
    }

    boolean this_present_jvmGcPSMarkSweepCount = true;
    boolean that_present_jvmGcPSMarkSweepCount = true;
    if (this_present_jvmGcPSMarkSweepCount || that_present_jvmGcPSMarkSweepCount) {
      if (!(this_present_jvmGcPSMarkSweepCount && that_present_jvmGcPSMarkSweepCount))
        return false;
      if (this.jvmGcPSMarkSweepCount != that.jvmGcPSMarkSweepCount)
        return false;
    }

    boolean this_present_jvmGcPSMarkSweepTime = true;
    boolean that_present_jvmGcPSMarkSweepTime = true;
    if (this_present_jvmGcPSMarkSweepTime || that_present_jvmGcPSMarkSweepTime) {
      if (!(this_present_jvmGcPSMarkSweepTime && that_present_jvmGcPSMarkSweepTime))
        return false;
      if (this.jvmGcPSMarkSweepTime != that.jvmGcPSMarkSweepTime)
        return false;
    }

    boolean this_present_jvmGcPSScavengeCount = true;
    boolean that_present_jvmGcPSScavengeCount = true;
    if (this_present_jvmGcPSScavengeCount || that_present_jvmGcPSScavengeCount) {
      if (!(this_present_jvmGcPSScavengeCount && that_present_jvmGcPSScavengeCount))
        return false;
      if (this.jvmGcPSScavengeCount != that.jvmGcPSScavengeCount)
        return false;
    }

    boolean this_present_jvmGcPSScavengeTime = true;
    boolean that_present_jvmGcPSScavengeTime = true;
    if (this_present_jvmGcPSScavengeTime || that_present_jvmGcPSScavengeTime) {
      if (!(this_present_jvmGcPSScavengeTime && that_present_jvmGcPSScavengeTime))
        return false;
      if (this.jvmGcPSScavengeTime != that.jvmGcPSScavengeTime)
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TStatWithParallelCollector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalUsed()).compareTo(other.isSetJvmMemoryTotalUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalUsed, other.jvmMemoryTotalUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalMax()).compareTo(other.isSetJvmMemoryTotalMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalMax, other.jvmMemoryTotalMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapUsed()).compareTo(other.isSetJvmMemoryHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapUsed, other.jvmMemoryHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapMax()).compareTo(other.isSetJvmMemoryHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapMax, other.jvmMemoryHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapUsed()).compareTo(other.isSetJvmMemoryNonHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapUsed, other.jvmMemoryNonHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapMax()).compareTo(other.isSetJvmMemoryNonHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapMax, other.jvmMemoryNonHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsCodeCacheUsage()).compareTo(other.isSetJvmMemoryPoolsCodeCacheUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsCodeCacheUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsCodeCacheUsage, other.jvmMemoryPoolsCodeCacheUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsPSEdenSpaceUsage()).compareTo(other.isSetJvmMemoryPoolsPSEdenSpaceUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsPSEdenSpaceUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsPSEdenSpaceUsage, other.jvmMemoryPoolsPSEdenSpaceUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsPSSurvivorSpaceUsage()).compareTo(other.isSetJvmMemoryPoolsPSSurvivorSpaceUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsPSSurvivorSpaceUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsPSSurvivorSpaceUsage, other.jvmMemoryPoolsPSSurvivorSpaceUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsPSPermGenUsage()).compareTo(other.isSetJvmMemoryPoolsPSPermGenUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsPSPermGenUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsPSPermGenUsage, other.jvmMemoryPoolsPSPermGenUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsPSOldGenUsage()).compareTo(other.isSetJvmMemoryPoolsPSOldGenUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsPSOldGenUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsPSOldGenUsage, other.jvmMemoryPoolsPSOldGenUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcPSMarkSweepCount()).compareTo(other.isSetJvmGcPSMarkSweepCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcPSMarkSweepCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcPSMarkSweepCount, other.jvmGcPSMarkSweepCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcPSMarkSweepTime()).compareTo(other.isSetJvmGcPSMarkSweepTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcPSMarkSweepTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcPSMarkSweepTime, other.jvmGcPSMarkSweepTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcPSScavengeCount()).compareTo(other.isSetJvmGcPSScavengeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcPSScavengeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcPSScavengeCount, other.jvmGcPSScavengeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcPSScavengeTime()).compareTo(other.isSetJvmGcPSScavengeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcPSScavengeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcPSScavengeTime, other.jvmGcPSScavengeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TStatWithParallelCollector(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalUsed:");
    sb.append(this.jvmMemoryTotalUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalMax:");
    sb.append(this.jvmMemoryTotalMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapUsed:");
    sb.append(this.jvmMemoryHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapMax:");
    sb.append(this.jvmMemoryHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapUsed:");
    sb.append(this.jvmMemoryNonHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapMax:");
    sb.append(this.jvmMemoryNonHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsCodeCacheUsage:");
    sb.append(this.jvmMemoryPoolsCodeCacheUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsPSEdenSpaceUsage:");
    sb.append(this.jvmMemoryPoolsPSEdenSpaceUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsPSSurvivorSpaceUsage:");
    sb.append(this.jvmMemoryPoolsPSSurvivorSpaceUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsPSPermGenUsage:");
    sb.append(this.jvmMemoryPoolsPSPermGenUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsPSOldGenUsage:");
    sb.append(this.jvmMemoryPoolsPSOldGenUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcPSMarkSweepCount:");
    sb.append(this.jvmGcPSMarkSweepCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcPSMarkSweepTime:");
    sb.append(this.jvmGcPSMarkSweepTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcPSScavengeCount:");
    sb.append(this.jvmGcPSScavengeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcPSScavengeTime:");
    sb.append(this.jvmGcPSScavengeTime);
    first = false;
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStatWithParallelCollectorStandardSchemeFactory implements SchemeFactory {
    public TStatWithParallelCollectorStandardScheme getScheme() {
      return new TStatWithParallelCollectorStandardScheme();
    }
  }

  private static class TStatWithParallelCollectorStandardScheme extends StandardScheme<TStatWithParallelCollector> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStatWithParallelCollector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JVM_MEMORY_TOTAL_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalUsed = iprot.readI64();
              struct.setJvmMemoryTotalUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JVM_MEMORY_TOTAL_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalMax = iprot.readI64();
              struct.setJvmMemoryTotalMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JVM_MEMORY_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapUsed = iprot.readI64();
              struct.setJvmMemoryHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JVM_MEMORY_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapMax = iprot.readI64();
              struct.setJvmMemoryHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JVM_MEMORY_NON_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapUsed = iprot.readI64();
              struct.setJvmMemoryNonHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JVM_MEMORY_NON_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapMax = iprot.readI64();
              struct.setJvmMemoryNonHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JVM_MEMORY_POOLS_CODE_CACHE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsCodeCacheUsage = iprot.readI64();
              struct.setJvmMemoryPoolsCodeCacheUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsPSEdenSpaceUsage = iprot.readI64();
              struct.setJvmMemoryPoolsPSEdenSpaceUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsPSSurvivorSpaceUsage = iprot.readI64();
              struct.setJvmMemoryPoolsPSSurvivorSpaceUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // JVM_MEMORY_POOLS_PSPERM_GEN_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsPSPermGenUsage = iprot.readI64();
              struct.setJvmMemoryPoolsPSPermGenUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // JVM_MEMORY_POOLS_PSOLD_GEN_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsPSOldGenUsage = iprot.readI64();
              struct.setJvmMemoryPoolsPSOldGenUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // JVM_GC_PSMARK_SWEEP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcPSMarkSweepCount = iprot.readI64();
              struct.setJvmGcPSMarkSweepCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // JVM_GC_PSMARK_SWEEP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcPSMarkSweepTime = iprot.readI64();
              struct.setJvmGcPSMarkSweepTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // JVM_GC_PSSCAVENGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcPSScavengeCount = iprot.readI64();
              struct.setJvmGcPSScavengeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // JVM_GC_PSSCAVENGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcPSScavengeTime = iprot.readI64();
              struct.setJvmGcPSScavengeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStatWithParallelCollector struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_CODE_CACHE_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsCodeCacheUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_PSEDEN_SPACE_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsPSEdenSpaceUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_PSSURVIVOR_SPACE_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsPSSurvivorSpaceUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_PSPERM_GEN_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsPSPermGenUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_PSOLD_GEN_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsPSOldGenUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_PSMARK_SWEEP_COUNT_FIELD_DESC);
      oprot.writeI64(struct.jvmGcPSMarkSweepCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_PSMARK_SWEEP_TIME_FIELD_DESC);
      oprot.writeI64(struct.jvmGcPSMarkSweepTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_PSSCAVENGE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.jvmGcPSScavengeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_PSSCAVENGE_TIME_FIELD_DESC);
      oprot.writeI64(struct.jvmGcPSScavengeTime);
      oprot.writeFieldEnd();
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStatWithParallelCollectorTupleSchemeFactory implements SchemeFactory {
    public TStatWithParallelCollectorTupleScheme getScheme() {
      return new TStatWithParallelCollectorTupleScheme();
    }
  }

  private static class TStatWithParallelCollectorTupleScheme extends TupleScheme<TStatWithParallelCollector> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStatWithParallelCollector struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetJvmMemoryTotalUsed()) {
        optionals.set(2);
      }
      if (struct.isSetJvmMemoryTotalMax()) {
        optionals.set(3);
      }
      if (struct.isSetJvmMemoryHeapUsed()) {
        optionals.set(4);
      }
      if (struct.isSetJvmMemoryHeapMax()) {
        optionals.set(5);
      }
      if (struct.isSetJvmMemoryNonHeapUsed()) {
        optionals.set(6);
      }
      if (struct.isSetJvmMemoryNonHeapMax()) {
        optionals.set(7);
      }
      if (struct.isSetJvmMemoryPoolsCodeCacheUsage()) {
        optionals.set(8);
      }
      if (struct.isSetJvmMemoryPoolsPSEdenSpaceUsage()) {
        optionals.set(9);
      }
      if (struct.isSetJvmMemoryPoolsPSSurvivorSpaceUsage()) {
        optionals.set(10);
      }
      if (struct.isSetJvmMemoryPoolsPSPermGenUsage()) {
        optionals.set(11);
      }
      if (struct.isSetJvmMemoryPoolsPSOldGenUsage()) {
        optionals.set(12);
      }
      if (struct.isSetJvmGcPSMarkSweepCount()) {
        optionals.set(13);
      }
      if (struct.isSetJvmGcPSMarkSweepTime()) {
        optionals.set(14);
      }
      if (struct.isSetJvmGcPSScavengeCount()) {
        optionals.set(15);
      }
      if (struct.isSetJvmGcPSScavengeTime()) {
        optionals.set(16);
      }
      if (struct.isSetMetadata()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetJvmMemoryTotalUsed()) {
        oprot.writeI64(struct.jvmMemoryTotalUsed);
      }
      if (struct.isSetJvmMemoryTotalMax()) {
        oprot.writeI64(struct.jvmMemoryTotalMax);
      }
      if (struct.isSetJvmMemoryHeapUsed()) {
        oprot.writeI64(struct.jvmMemoryHeapUsed);
      }
      if (struct.isSetJvmMemoryHeapMax()) {
        oprot.writeI64(struct.jvmMemoryHeapMax);
      }
      if (struct.isSetJvmMemoryNonHeapUsed()) {
        oprot.writeI64(struct.jvmMemoryNonHeapUsed);
      }
      if (struct.isSetJvmMemoryNonHeapMax()) {
        oprot.writeI64(struct.jvmMemoryNonHeapMax);
      }
      if (struct.isSetJvmMemoryPoolsCodeCacheUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsCodeCacheUsage);
      }
      if (struct.isSetJvmMemoryPoolsPSEdenSpaceUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsPSEdenSpaceUsage);
      }
      if (struct.isSetJvmMemoryPoolsPSSurvivorSpaceUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsPSSurvivorSpaceUsage);
      }
      if (struct.isSetJvmMemoryPoolsPSPermGenUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsPSPermGenUsage);
      }
      if (struct.isSetJvmMemoryPoolsPSOldGenUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsPSOldGenUsage);
      }
      if (struct.isSetJvmGcPSMarkSweepCount()) {
        oprot.writeI64(struct.jvmGcPSMarkSweepCount);
      }
      if (struct.isSetJvmGcPSMarkSweepTime()) {
        oprot.writeI64(struct.jvmGcPSMarkSweepTime);
      }
      if (struct.isSetJvmGcPSScavengeCount()) {
        oprot.writeI64(struct.jvmGcPSScavengeCount);
      }
      if (struct.isSetJvmGcPSScavengeTime()) {
        oprot.writeI64(struct.jvmGcPSScavengeTime);
      }
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStatWithParallelCollector struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jvmMemoryTotalUsed = iprot.readI64();
        struct.setJvmMemoryTotalUsedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jvmMemoryTotalMax = iprot.readI64();
        struct.setJvmMemoryTotalMaxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jvmMemoryHeapUsed = iprot.readI64();
        struct.setJvmMemoryHeapUsedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jvmMemoryHeapMax = iprot.readI64();
        struct.setJvmMemoryHeapMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jvmMemoryNonHeapUsed = iprot.readI64();
        struct.setJvmMemoryNonHeapUsedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.jvmMemoryNonHeapMax = iprot.readI64();
        struct.setJvmMemoryNonHeapMaxIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jvmMemoryPoolsCodeCacheUsage = iprot.readI64();
        struct.setJvmMemoryPoolsCodeCacheUsageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.jvmMemoryPoolsPSEdenSpaceUsage = iprot.readI64();
        struct.setJvmMemoryPoolsPSEdenSpaceUsageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.jvmMemoryPoolsPSSurvivorSpaceUsage = iprot.readI64();
        struct.setJvmMemoryPoolsPSSurvivorSpaceUsageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.jvmMemoryPoolsPSPermGenUsage = iprot.readI64();
        struct.setJvmMemoryPoolsPSPermGenUsageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.jvmMemoryPoolsPSOldGenUsage = iprot.readI64();
        struct.setJvmMemoryPoolsPSOldGenUsageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.jvmGcPSMarkSweepCount = iprot.readI64();
        struct.setJvmGcPSMarkSweepCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.jvmGcPSMarkSweepTime = iprot.readI64();
        struct.setJvmGcPSMarkSweepTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.jvmGcPSScavengeCount = iprot.readI64();
        struct.setJvmGcPSScavengeCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.jvmGcPSScavengeTime = iprot.readI64();
        struct.setJvmGcPSScavengeTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
    }
  }

}

