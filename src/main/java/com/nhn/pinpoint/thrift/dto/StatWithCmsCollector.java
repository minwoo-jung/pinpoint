/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nhn.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatWithCmsCollector implements org.apache.thrift.TBase<StatWithCmsCollector, StatWithCmsCollector._Fields>, java.io.Serializable, Cloneable, Comparable<StatWithCmsCollector> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatWithCmsCollector");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalInit", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalUsed", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalCommitted", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalMax", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapInit", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapUsed", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapCommitted", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapMax", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapInit", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapUsed", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_COMMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapCommitted", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapMax", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField JVM_GC_PAR_NEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcParNewCount", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField JVM_GC_PAR_NEW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcParNewTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField JVM_GC_CMS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcCmsCount", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField JVM_GC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcTime", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatWithCmsCollectorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatWithCmsCollectorTupleSchemeFactory());
  }

  private String agentId; // required
  private long timestamp; // required
  private long jvmMemoryTotalInit; // required
  private long jvmMemoryTotalUsed; // required
  private long jvmMemoryTotalCommitted; // required
  private long jvmMemoryTotalMax; // required
  private long jvmMemoryHeapInit; // required
  private long jvmMemoryHeapUsed; // required
  private long jvmMemoryHeapCommitted; // required
  private long jvmMemoryHeapMax; // required
  private long jvmMemoryNonHeapInit; // required
  private long jvmMemoryNonHeapUsed; // required
  private long jvmMemoryNonHeapCommitted; // required
  private long jvmMemoryNonHeapMax; // required
  private long jvmGcParNewCount; // required
  private long jvmGcParNewTime; // required
  private long jvmGcCmsCount; // required
  private long jvmGcTime; // required
  private String metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    TIMESTAMP((short)2, "timestamp"),
    JVM_MEMORY_TOTAL_INIT((short)3, "jvmMemoryTotalInit"),
    JVM_MEMORY_TOTAL_USED((short)4, "jvmMemoryTotalUsed"),
    JVM_MEMORY_TOTAL_COMMITTED((short)5, "jvmMemoryTotalCommitted"),
    JVM_MEMORY_TOTAL_MAX((short)6, "jvmMemoryTotalMax"),
    JVM_MEMORY_HEAP_INIT((short)7, "jvmMemoryHeapInit"),
    JVM_MEMORY_HEAP_USED((short)8, "jvmMemoryHeapUsed"),
    JVM_MEMORY_HEAP_COMMITTED((short)9, "jvmMemoryHeapCommitted"),
    JVM_MEMORY_HEAP_MAX((short)10, "jvmMemoryHeapMax"),
    JVM_MEMORY_NON_HEAP_INIT((short)11, "jvmMemoryNonHeapInit"),
    JVM_MEMORY_NON_HEAP_USED((short)12, "jvmMemoryNonHeapUsed"),
    JVM_MEMORY_NON_HEAP_COMMITTED((short)13, "jvmMemoryNonHeapCommitted"),
    JVM_MEMORY_NON_HEAP_MAX((short)14, "jvmMemoryNonHeapMax"),
    JVM_GC_PAR_NEW_COUNT((short)15, "jvmGcParNewCount"),
    JVM_GC_PAR_NEW_TIME((short)16, "jvmGcParNewTime"),
    JVM_GC_CMS_COUNT((short)17, "jvmGcCmsCount"),
    JVM_GC_TIME((short)18, "jvmGcTime"),
    METADATA((short)200, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // JVM_MEMORY_TOTAL_INIT
          return JVM_MEMORY_TOTAL_INIT;
        case 4: // JVM_MEMORY_TOTAL_USED
          return JVM_MEMORY_TOTAL_USED;
        case 5: // JVM_MEMORY_TOTAL_COMMITTED
          return JVM_MEMORY_TOTAL_COMMITTED;
        case 6: // JVM_MEMORY_TOTAL_MAX
          return JVM_MEMORY_TOTAL_MAX;
        case 7: // JVM_MEMORY_HEAP_INIT
          return JVM_MEMORY_HEAP_INIT;
        case 8: // JVM_MEMORY_HEAP_USED
          return JVM_MEMORY_HEAP_USED;
        case 9: // JVM_MEMORY_HEAP_COMMITTED
          return JVM_MEMORY_HEAP_COMMITTED;
        case 10: // JVM_MEMORY_HEAP_MAX
          return JVM_MEMORY_HEAP_MAX;
        case 11: // JVM_MEMORY_NON_HEAP_INIT
          return JVM_MEMORY_NON_HEAP_INIT;
        case 12: // JVM_MEMORY_NON_HEAP_USED
          return JVM_MEMORY_NON_HEAP_USED;
        case 13: // JVM_MEMORY_NON_HEAP_COMMITTED
          return JVM_MEMORY_NON_HEAP_COMMITTED;
        case 14: // JVM_MEMORY_NON_HEAP_MAX
          return JVM_MEMORY_NON_HEAP_MAX;
        case 15: // JVM_GC_PAR_NEW_COUNT
          return JVM_GC_PAR_NEW_COUNT;
        case 16: // JVM_GC_PAR_NEW_TIME
          return JVM_GC_PAR_NEW_TIME;
        case 17: // JVM_GC_CMS_COUNT
          return JVM_GC_CMS_COUNT;
        case 18: // JVM_GC_TIME
          return JVM_GC_TIME;
        case 200: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __JVMMEMORYTOTALINIT_ISSET_ID = 1;
  private static final int __JVMMEMORYTOTALUSED_ISSET_ID = 2;
  private static final int __JVMMEMORYTOTALCOMMITTED_ISSET_ID = 3;
  private static final int __JVMMEMORYTOTALMAX_ISSET_ID = 4;
  private static final int __JVMMEMORYHEAPINIT_ISSET_ID = 5;
  private static final int __JVMMEMORYHEAPUSED_ISSET_ID = 6;
  private static final int __JVMMEMORYHEAPCOMMITTED_ISSET_ID = 7;
  private static final int __JVMMEMORYHEAPMAX_ISSET_ID = 8;
  private static final int __JVMMEMORYNONHEAPINIT_ISSET_ID = 9;
  private static final int __JVMMEMORYNONHEAPUSED_ISSET_ID = 10;
  private static final int __JVMMEMORYNONHEAPCOMMITTED_ISSET_ID = 11;
  private static final int __JVMMEMORYNONHEAPMAX_ISSET_ID = 12;
  private static final int __JVMGCPARNEWCOUNT_ISSET_ID = 13;
  private static final int __JVMGCPARNEWTIME_ISSET_ID = 14;
  private static final int __JVMGCCMSCOUNT_ISSET_ID = 15;
  private static final int __JVMGCTIME_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_INIT, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalInit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalCommitted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_INIT, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapInit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapCommitted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_INIT, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapInit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_COMMITTED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapCommitted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_PAR_NEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("jvmGcParNewCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_PAR_NEW_TIME, new org.apache.thrift.meta_data.FieldMetaData("jvmGcParNewTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_CMS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("jvmGcCmsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_TIME, new org.apache.thrift.meta_data.FieldMetaData("jvmGcTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatWithCmsCollector.class, metaDataMap);
  }

  public StatWithCmsCollector() {
  }

  public StatWithCmsCollector(
    String agentId,
    long timestamp,
    long jvmMemoryTotalInit,
    long jvmMemoryTotalUsed,
    long jvmMemoryTotalCommitted,
    long jvmMemoryTotalMax,
    long jvmMemoryHeapInit,
    long jvmMemoryHeapUsed,
    long jvmMemoryHeapCommitted,
    long jvmMemoryHeapMax,
    long jvmMemoryNonHeapInit,
    long jvmMemoryNonHeapUsed,
    long jvmMemoryNonHeapCommitted,
    long jvmMemoryNonHeapMax,
    long jvmGcParNewCount,
    long jvmGcParNewTime,
    long jvmGcCmsCount,
    long jvmGcTime)
  {
    this();
    this.agentId = agentId;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.jvmMemoryTotalInit = jvmMemoryTotalInit;
    setJvmMemoryTotalInitIsSet(true);
    this.jvmMemoryTotalUsed = jvmMemoryTotalUsed;
    setJvmMemoryTotalUsedIsSet(true);
    this.jvmMemoryTotalCommitted = jvmMemoryTotalCommitted;
    setJvmMemoryTotalCommittedIsSet(true);
    this.jvmMemoryTotalMax = jvmMemoryTotalMax;
    setJvmMemoryTotalMaxIsSet(true);
    this.jvmMemoryHeapInit = jvmMemoryHeapInit;
    setJvmMemoryHeapInitIsSet(true);
    this.jvmMemoryHeapUsed = jvmMemoryHeapUsed;
    setJvmMemoryHeapUsedIsSet(true);
    this.jvmMemoryHeapCommitted = jvmMemoryHeapCommitted;
    setJvmMemoryHeapCommittedIsSet(true);
    this.jvmMemoryHeapMax = jvmMemoryHeapMax;
    setJvmMemoryHeapMaxIsSet(true);
    this.jvmMemoryNonHeapInit = jvmMemoryNonHeapInit;
    setJvmMemoryNonHeapInitIsSet(true);
    this.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed;
    setJvmMemoryNonHeapUsedIsSet(true);
    this.jvmMemoryNonHeapCommitted = jvmMemoryNonHeapCommitted;
    setJvmMemoryNonHeapCommittedIsSet(true);
    this.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax;
    setJvmMemoryNonHeapMaxIsSet(true);
    this.jvmGcParNewCount = jvmGcParNewCount;
    setJvmGcParNewCountIsSet(true);
    this.jvmGcParNewTime = jvmGcParNewTime;
    setJvmGcParNewTimeIsSet(true);
    this.jvmGcCmsCount = jvmGcCmsCount;
    setJvmGcCmsCountIsSet(true);
    this.jvmGcTime = jvmGcTime;
    setJvmGcTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatWithCmsCollector(StatWithCmsCollector other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    this.timestamp = other.timestamp;
    this.jvmMemoryTotalInit = other.jvmMemoryTotalInit;
    this.jvmMemoryTotalUsed = other.jvmMemoryTotalUsed;
    this.jvmMemoryTotalCommitted = other.jvmMemoryTotalCommitted;
    this.jvmMemoryTotalMax = other.jvmMemoryTotalMax;
    this.jvmMemoryHeapInit = other.jvmMemoryHeapInit;
    this.jvmMemoryHeapUsed = other.jvmMemoryHeapUsed;
    this.jvmMemoryHeapCommitted = other.jvmMemoryHeapCommitted;
    this.jvmMemoryHeapMax = other.jvmMemoryHeapMax;
    this.jvmMemoryNonHeapInit = other.jvmMemoryNonHeapInit;
    this.jvmMemoryNonHeapUsed = other.jvmMemoryNonHeapUsed;
    this.jvmMemoryNonHeapCommitted = other.jvmMemoryNonHeapCommitted;
    this.jvmMemoryNonHeapMax = other.jvmMemoryNonHeapMax;
    this.jvmGcParNewCount = other.jvmGcParNewCount;
    this.jvmGcParNewTime = other.jvmGcParNewTime;
    this.jvmGcCmsCount = other.jvmGcCmsCount;
    this.jvmGcTime = other.jvmGcTime;
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
  }

  public StatWithCmsCollector deepCopy() {
    return new StatWithCmsCollector(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setJvmMemoryTotalInitIsSet(false);
    this.jvmMemoryTotalInit = 0;
    setJvmMemoryTotalUsedIsSet(false);
    this.jvmMemoryTotalUsed = 0;
    setJvmMemoryTotalCommittedIsSet(false);
    this.jvmMemoryTotalCommitted = 0;
    setJvmMemoryTotalMaxIsSet(false);
    this.jvmMemoryTotalMax = 0;
    setJvmMemoryHeapInitIsSet(false);
    this.jvmMemoryHeapInit = 0;
    setJvmMemoryHeapUsedIsSet(false);
    this.jvmMemoryHeapUsed = 0;
    setJvmMemoryHeapCommittedIsSet(false);
    this.jvmMemoryHeapCommitted = 0;
    setJvmMemoryHeapMaxIsSet(false);
    this.jvmMemoryHeapMax = 0;
    setJvmMemoryNonHeapInitIsSet(false);
    this.jvmMemoryNonHeapInit = 0;
    setJvmMemoryNonHeapUsedIsSet(false);
    this.jvmMemoryNonHeapUsed = 0;
    setJvmMemoryNonHeapCommittedIsSet(false);
    this.jvmMemoryNonHeapCommitted = 0;
    setJvmMemoryNonHeapMaxIsSet(false);
    this.jvmMemoryNonHeapMax = 0;
    setJvmGcParNewCountIsSet(false);
    this.jvmGcParNewCount = 0;
    setJvmGcParNewTimeIsSet(false);
    this.jvmGcParNewTime = 0;
    setJvmGcCmsCountIsSet(false);
    this.jvmGcCmsCount = 0;
    setJvmGcTimeIsSet(false);
    this.jvmGcTime = 0;
    this.metadata = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getJvmMemoryTotalInit() {
    return this.jvmMemoryTotalInit;
  }

  public void setJvmMemoryTotalInit(long jvmMemoryTotalInit) {
    this.jvmMemoryTotalInit = jvmMemoryTotalInit;
    setJvmMemoryTotalInitIsSet(true);
  }

  public void unsetJvmMemoryTotalInit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALINIT_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalInit is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalInit() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALINIT_ISSET_ID);
  }

  public void setJvmMemoryTotalInitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALINIT_ISSET_ID, value);
  }

  public long getJvmMemoryTotalUsed() {
    return this.jvmMemoryTotalUsed;
  }

  public void setJvmMemoryTotalUsed(long jvmMemoryTotalUsed) {
    this.jvmMemoryTotalUsed = jvmMemoryTotalUsed;
    setJvmMemoryTotalUsedIsSet(true);
  }

  public void unsetJvmMemoryTotalUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID);
  }

  public void setJvmMemoryTotalUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID, value);
  }

  public long getJvmMemoryTotalCommitted() {
    return this.jvmMemoryTotalCommitted;
  }

  public void setJvmMemoryTotalCommitted(long jvmMemoryTotalCommitted) {
    this.jvmMemoryTotalCommitted = jvmMemoryTotalCommitted;
    setJvmMemoryTotalCommittedIsSet(true);
  }

  public void unsetJvmMemoryTotalCommitted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALCOMMITTED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalCommitted() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALCOMMITTED_ISSET_ID);
  }

  public void setJvmMemoryTotalCommittedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALCOMMITTED_ISSET_ID, value);
  }

  public long getJvmMemoryTotalMax() {
    return this.jvmMemoryTotalMax;
  }

  public void setJvmMemoryTotalMax(long jvmMemoryTotalMax) {
    this.jvmMemoryTotalMax = jvmMemoryTotalMax;
    setJvmMemoryTotalMaxIsSet(true);
  }

  public void unsetJvmMemoryTotalMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID);
  }

  public void setJvmMemoryTotalMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID, value);
  }

  public long getJvmMemoryHeapInit() {
    return this.jvmMemoryHeapInit;
  }

  public void setJvmMemoryHeapInit(long jvmMemoryHeapInit) {
    this.jvmMemoryHeapInit = jvmMemoryHeapInit;
    setJvmMemoryHeapInitIsSet(true);
  }

  public void unsetJvmMemoryHeapInit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPINIT_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapInit is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapInit() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPINIT_ISSET_ID);
  }

  public void setJvmMemoryHeapInitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPINIT_ISSET_ID, value);
  }

  public long getJvmMemoryHeapUsed() {
    return this.jvmMemoryHeapUsed;
  }

  public void setJvmMemoryHeapUsed(long jvmMemoryHeapUsed) {
    this.jvmMemoryHeapUsed = jvmMemoryHeapUsed;
    setJvmMemoryHeapUsedIsSet(true);
  }

  public void unsetJvmMemoryHeapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID);
  }

  public void setJvmMemoryHeapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID, value);
  }

  public long getJvmMemoryHeapCommitted() {
    return this.jvmMemoryHeapCommitted;
  }

  public void setJvmMemoryHeapCommitted(long jvmMemoryHeapCommitted) {
    this.jvmMemoryHeapCommitted = jvmMemoryHeapCommitted;
    setJvmMemoryHeapCommittedIsSet(true);
  }

  public void unsetJvmMemoryHeapCommitted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPCOMMITTED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapCommitted() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPCOMMITTED_ISSET_ID);
  }

  public void setJvmMemoryHeapCommittedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPCOMMITTED_ISSET_ID, value);
  }

  public long getJvmMemoryHeapMax() {
    return this.jvmMemoryHeapMax;
  }

  public void setJvmMemoryHeapMax(long jvmMemoryHeapMax) {
    this.jvmMemoryHeapMax = jvmMemoryHeapMax;
    setJvmMemoryHeapMaxIsSet(true);
  }

  public void unsetJvmMemoryHeapMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID);
  }

  public void setJvmMemoryHeapMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapInit() {
    return this.jvmMemoryNonHeapInit;
  }

  public void setJvmMemoryNonHeapInit(long jvmMemoryNonHeapInit) {
    this.jvmMemoryNonHeapInit = jvmMemoryNonHeapInit;
    setJvmMemoryNonHeapInitIsSet(true);
  }

  public void unsetJvmMemoryNonHeapInit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPINIT_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapInit is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapInit() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPINIT_ISSET_ID);
  }

  public void setJvmMemoryNonHeapInitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPINIT_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapUsed() {
    return this.jvmMemoryNonHeapUsed;
  }

  public void setJvmMemoryNonHeapUsed(long jvmMemoryNonHeapUsed) {
    this.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed;
    setJvmMemoryNonHeapUsedIsSet(true);
  }

  public void unsetJvmMemoryNonHeapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID);
  }

  public void setJvmMemoryNonHeapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapCommitted() {
    return this.jvmMemoryNonHeapCommitted;
  }

  public void setJvmMemoryNonHeapCommitted(long jvmMemoryNonHeapCommitted) {
    this.jvmMemoryNonHeapCommitted = jvmMemoryNonHeapCommitted;
    setJvmMemoryNonHeapCommittedIsSet(true);
  }

  public void unsetJvmMemoryNonHeapCommitted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPCOMMITTED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapCommitted is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapCommitted() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPCOMMITTED_ISSET_ID);
  }

  public void setJvmMemoryNonHeapCommittedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPCOMMITTED_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapMax() {
    return this.jvmMemoryNonHeapMax;
  }

  public void setJvmMemoryNonHeapMax(long jvmMemoryNonHeapMax) {
    this.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax;
    setJvmMemoryNonHeapMaxIsSet(true);
  }

  public void unsetJvmMemoryNonHeapMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID);
  }

  public void setJvmMemoryNonHeapMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID, value);
  }

  public long getJvmGcParNewCount() {
    return this.jvmGcParNewCount;
  }

  public void setJvmGcParNewCount(long jvmGcParNewCount) {
    this.jvmGcParNewCount = jvmGcParNewCount;
    setJvmGcParNewCountIsSet(true);
  }

  public void unsetJvmGcParNewCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCPARNEWCOUNT_ISSET_ID);
  }

  /** Returns true if field jvmGcParNewCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcParNewCount() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCPARNEWCOUNT_ISSET_ID);
  }

  public void setJvmGcParNewCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCPARNEWCOUNT_ISSET_ID, value);
  }

  public long getJvmGcParNewTime() {
    return this.jvmGcParNewTime;
  }

  public void setJvmGcParNewTime(long jvmGcParNewTime) {
    this.jvmGcParNewTime = jvmGcParNewTime;
    setJvmGcParNewTimeIsSet(true);
  }

  public void unsetJvmGcParNewTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCPARNEWTIME_ISSET_ID);
  }

  /** Returns true if field jvmGcParNewTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcParNewTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCPARNEWTIME_ISSET_ID);
  }

  public void setJvmGcParNewTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCPARNEWTIME_ISSET_ID, value);
  }

  public long getJvmGcCmsCount() {
    return this.jvmGcCmsCount;
  }

  public void setJvmGcCmsCount(long jvmGcCmsCount) {
    this.jvmGcCmsCount = jvmGcCmsCount;
    setJvmGcCmsCountIsSet(true);
  }

  public void unsetJvmGcCmsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCCMSCOUNT_ISSET_ID);
  }

  /** Returns true if field jvmGcCmsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcCmsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCCMSCOUNT_ISSET_ID);
  }

  public void setJvmGcCmsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCCMSCOUNT_ISSET_ID, value);
  }

  public long getJvmGcTime() {
    return this.jvmGcTime;
  }

  public void setJvmGcTime(long jvmGcTime) {
    this.jvmGcTime = jvmGcTime;
    setJvmGcTimeIsSet(true);
  }

  public void unsetJvmGcTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCTIME_ISSET_ID);
  }

  /** Returns true if field jvmGcTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCTIME_ISSET_ID);
  }

  public void setJvmGcTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCTIME_ISSET_ID, value);
  }

  public String getMetadata() {
    return this.metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_INIT:
      if (value == null) {
        unsetJvmMemoryTotalInit();
      } else {
        setJvmMemoryTotalInit((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_USED:
      if (value == null) {
        unsetJvmMemoryTotalUsed();
      } else {
        setJvmMemoryTotalUsed((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_COMMITTED:
      if (value == null) {
        unsetJvmMemoryTotalCommitted();
      } else {
        setJvmMemoryTotalCommitted((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_MAX:
      if (value == null) {
        unsetJvmMemoryTotalMax();
      } else {
        setJvmMemoryTotalMax((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_INIT:
      if (value == null) {
        unsetJvmMemoryHeapInit();
      } else {
        setJvmMemoryHeapInit((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_USED:
      if (value == null) {
        unsetJvmMemoryHeapUsed();
      } else {
        setJvmMemoryHeapUsed((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_COMMITTED:
      if (value == null) {
        unsetJvmMemoryHeapCommitted();
      } else {
        setJvmMemoryHeapCommitted((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_MAX:
      if (value == null) {
        unsetJvmMemoryHeapMax();
      } else {
        setJvmMemoryHeapMax((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_INIT:
      if (value == null) {
        unsetJvmMemoryNonHeapInit();
      } else {
        setJvmMemoryNonHeapInit((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_USED:
      if (value == null) {
        unsetJvmMemoryNonHeapUsed();
      } else {
        setJvmMemoryNonHeapUsed((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_COMMITTED:
      if (value == null) {
        unsetJvmMemoryNonHeapCommitted();
      } else {
        setJvmMemoryNonHeapCommitted((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_MAX:
      if (value == null) {
        unsetJvmMemoryNonHeapMax();
      } else {
        setJvmMemoryNonHeapMax((Long)value);
      }
      break;

    case JVM_GC_PAR_NEW_COUNT:
      if (value == null) {
        unsetJvmGcParNewCount();
      } else {
        setJvmGcParNewCount((Long)value);
      }
      break;

    case JVM_GC_PAR_NEW_TIME:
      if (value == null) {
        unsetJvmGcParNewTime();
      } else {
        setJvmGcParNewTime((Long)value);
      }
      break;

    case JVM_GC_CMS_COUNT:
      if (value == null) {
        unsetJvmGcCmsCount();
      } else {
        setJvmGcCmsCount((Long)value);
      }
      break;

    case JVM_GC_TIME:
      if (value == null) {
        unsetJvmGcTime();
      } else {
        setJvmGcTime((Long)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case JVM_MEMORY_TOTAL_INIT:
      return Long.valueOf(getJvmMemoryTotalInit());

    case JVM_MEMORY_TOTAL_USED:
      return Long.valueOf(getJvmMemoryTotalUsed());

    case JVM_MEMORY_TOTAL_COMMITTED:
      return Long.valueOf(getJvmMemoryTotalCommitted());

    case JVM_MEMORY_TOTAL_MAX:
      return Long.valueOf(getJvmMemoryTotalMax());

    case JVM_MEMORY_HEAP_INIT:
      return Long.valueOf(getJvmMemoryHeapInit());

    case JVM_MEMORY_HEAP_USED:
      return Long.valueOf(getJvmMemoryHeapUsed());

    case JVM_MEMORY_HEAP_COMMITTED:
      return Long.valueOf(getJvmMemoryHeapCommitted());

    case JVM_MEMORY_HEAP_MAX:
      return Long.valueOf(getJvmMemoryHeapMax());

    case JVM_MEMORY_NON_HEAP_INIT:
      return Long.valueOf(getJvmMemoryNonHeapInit());

    case JVM_MEMORY_NON_HEAP_USED:
      return Long.valueOf(getJvmMemoryNonHeapUsed());

    case JVM_MEMORY_NON_HEAP_COMMITTED:
      return Long.valueOf(getJvmMemoryNonHeapCommitted());

    case JVM_MEMORY_NON_HEAP_MAX:
      return Long.valueOf(getJvmMemoryNonHeapMax());

    case JVM_GC_PAR_NEW_COUNT:
      return Long.valueOf(getJvmGcParNewCount());

    case JVM_GC_PAR_NEW_TIME:
      return Long.valueOf(getJvmGcParNewTime());

    case JVM_GC_CMS_COUNT:
      return Long.valueOf(getJvmGcCmsCount());

    case JVM_GC_TIME:
      return Long.valueOf(getJvmGcTime());

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case TIMESTAMP:
      return isSetTimestamp();
    case JVM_MEMORY_TOTAL_INIT:
      return isSetJvmMemoryTotalInit();
    case JVM_MEMORY_TOTAL_USED:
      return isSetJvmMemoryTotalUsed();
    case JVM_MEMORY_TOTAL_COMMITTED:
      return isSetJvmMemoryTotalCommitted();
    case JVM_MEMORY_TOTAL_MAX:
      return isSetJvmMemoryTotalMax();
    case JVM_MEMORY_HEAP_INIT:
      return isSetJvmMemoryHeapInit();
    case JVM_MEMORY_HEAP_USED:
      return isSetJvmMemoryHeapUsed();
    case JVM_MEMORY_HEAP_COMMITTED:
      return isSetJvmMemoryHeapCommitted();
    case JVM_MEMORY_HEAP_MAX:
      return isSetJvmMemoryHeapMax();
    case JVM_MEMORY_NON_HEAP_INIT:
      return isSetJvmMemoryNonHeapInit();
    case JVM_MEMORY_NON_HEAP_USED:
      return isSetJvmMemoryNonHeapUsed();
    case JVM_MEMORY_NON_HEAP_COMMITTED:
      return isSetJvmMemoryNonHeapCommitted();
    case JVM_MEMORY_NON_HEAP_MAX:
      return isSetJvmMemoryNonHeapMax();
    case JVM_GC_PAR_NEW_COUNT:
      return isSetJvmGcParNewCount();
    case JVM_GC_PAR_NEW_TIME:
      return isSetJvmGcParNewTime();
    case JVM_GC_CMS_COUNT:
      return isSetJvmGcCmsCount();
    case JVM_GC_TIME:
      return isSetJvmGcTime();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatWithCmsCollector)
      return this.equals((StatWithCmsCollector)that);
    return false;
  }

  public boolean equals(StatWithCmsCollector that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_jvmMemoryTotalInit = true;
    boolean that_present_jvmMemoryTotalInit = true;
    if (this_present_jvmMemoryTotalInit || that_present_jvmMemoryTotalInit) {
      if (!(this_present_jvmMemoryTotalInit && that_present_jvmMemoryTotalInit))
        return false;
      if (this.jvmMemoryTotalInit != that.jvmMemoryTotalInit)
        return false;
    }

    boolean this_present_jvmMemoryTotalUsed = true;
    boolean that_present_jvmMemoryTotalUsed = true;
    if (this_present_jvmMemoryTotalUsed || that_present_jvmMemoryTotalUsed) {
      if (!(this_present_jvmMemoryTotalUsed && that_present_jvmMemoryTotalUsed))
        return false;
      if (this.jvmMemoryTotalUsed != that.jvmMemoryTotalUsed)
        return false;
    }

    boolean this_present_jvmMemoryTotalCommitted = true;
    boolean that_present_jvmMemoryTotalCommitted = true;
    if (this_present_jvmMemoryTotalCommitted || that_present_jvmMemoryTotalCommitted) {
      if (!(this_present_jvmMemoryTotalCommitted && that_present_jvmMemoryTotalCommitted))
        return false;
      if (this.jvmMemoryTotalCommitted != that.jvmMemoryTotalCommitted)
        return false;
    }

    boolean this_present_jvmMemoryTotalMax = true;
    boolean that_present_jvmMemoryTotalMax = true;
    if (this_present_jvmMemoryTotalMax || that_present_jvmMemoryTotalMax) {
      if (!(this_present_jvmMemoryTotalMax && that_present_jvmMemoryTotalMax))
        return false;
      if (this.jvmMemoryTotalMax != that.jvmMemoryTotalMax)
        return false;
    }

    boolean this_present_jvmMemoryHeapInit = true;
    boolean that_present_jvmMemoryHeapInit = true;
    if (this_present_jvmMemoryHeapInit || that_present_jvmMemoryHeapInit) {
      if (!(this_present_jvmMemoryHeapInit && that_present_jvmMemoryHeapInit))
        return false;
      if (this.jvmMemoryHeapInit != that.jvmMemoryHeapInit)
        return false;
    }

    boolean this_present_jvmMemoryHeapUsed = true;
    boolean that_present_jvmMemoryHeapUsed = true;
    if (this_present_jvmMemoryHeapUsed || that_present_jvmMemoryHeapUsed) {
      if (!(this_present_jvmMemoryHeapUsed && that_present_jvmMemoryHeapUsed))
        return false;
      if (this.jvmMemoryHeapUsed != that.jvmMemoryHeapUsed)
        return false;
    }

    boolean this_present_jvmMemoryHeapCommitted = true;
    boolean that_present_jvmMemoryHeapCommitted = true;
    if (this_present_jvmMemoryHeapCommitted || that_present_jvmMemoryHeapCommitted) {
      if (!(this_present_jvmMemoryHeapCommitted && that_present_jvmMemoryHeapCommitted))
        return false;
      if (this.jvmMemoryHeapCommitted != that.jvmMemoryHeapCommitted)
        return false;
    }

    boolean this_present_jvmMemoryHeapMax = true;
    boolean that_present_jvmMemoryHeapMax = true;
    if (this_present_jvmMemoryHeapMax || that_present_jvmMemoryHeapMax) {
      if (!(this_present_jvmMemoryHeapMax && that_present_jvmMemoryHeapMax))
        return false;
      if (this.jvmMemoryHeapMax != that.jvmMemoryHeapMax)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapInit = true;
    boolean that_present_jvmMemoryNonHeapInit = true;
    if (this_present_jvmMemoryNonHeapInit || that_present_jvmMemoryNonHeapInit) {
      if (!(this_present_jvmMemoryNonHeapInit && that_present_jvmMemoryNonHeapInit))
        return false;
      if (this.jvmMemoryNonHeapInit != that.jvmMemoryNonHeapInit)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapUsed = true;
    boolean that_present_jvmMemoryNonHeapUsed = true;
    if (this_present_jvmMemoryNonHeapUsed || that_present_jvmMemoryNonHeapUsed) {
      if (!(this_present_jvmMemoryNonHeapUsed && that_present_jvmMemoryNonHeapUsed))
        return false;
      if (this.jvmMemoryNonHeapUsed != that.jvmMemoryNonHeapUsed)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapCommitted = true;
    boolean that_present_jvmMemoryNonHeapCommitted = true;
    if (this_present_jvmMemoryNonHeapCommitted || that_present_jvmMemoryNonHeapCommitted) {
      if (!(this_present_jvmMemoryNonHeapCommitted && that_present_jvmMemoryNonHeapCommitted))
        return false;
      if (this.jvmMemoryNonHeapCommitted != that.jvmMemoryNonHeapCommitted)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapMax = true;
    boolean that_present_jvmMemoryNonHeapMax = true;
    if (this_present_jvmMemoryNonHeapMax || that_present_jvmMemoryNonHeapMax) {
      if (!(this_present_jvmMemoryNonHeapMax && that_present_jvmMemoryNonHeapMax))
        return false;
      if (this.jvmMemoryNonHeapMax != that.jvmMemoryNonHeapMax)
        return false;
    }

    boolean this_present_jvmGcParNewCount = true;
    boolean that_present_jvmGcParNewCount = true;
    if (this_present_jvmGcParNewCount || that_present_jvmGcParNewCount) {
      if (!(this_present_jvmGcParNewCount && that_present_jvmGcParNewCount))
        return false;
      if (this.jvmGcParNewCount != that.jvmGcParNewCount)
        return false;
    }

    boolean this_present_jvmGcParNewTime = true;
    boolean that_present_jvmGcParNewTime = true;
    if (this_present_jvmGcParNewTime || that_present_jvmGcParNewTime) {
      if (!(this_present_jvmGcParNewTime && that_present_jvmGcParNewTime))
        return false;
      if (this.jvmGcParNewTime != that.jvmGcParNewTime)
        return false;
    }

    boolean this_present_jvmGcCmsCount = true;
    boolean that_present_jvmGcCmsCount = true;
    if (this_present_jvmGcCmsCount || that_present_jvmGcCmsCount) {
      if (!(this_present_jvmGcCmsCount && that_present_jvmGcCmsCount))
        return false;
      if (this.jvmGcCmsCount != that.jvmGcCmsCount)
        return false;
    }

    boolean this_present_jvmGcTime = true;
    boolean that_present_jvmGcTime = true;
    if (this_present_jvmGcTime || that_present_jvmGcTime) {
      if (!(this_present_jvmGcTime && that_present_jvmGcTime))
        return false;
      if (this.jvmGcTime != that.jvmGcTime)
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatWithCmsCollector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalInit()).compareTo(other.isSetJvmMemoryTotalInit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalInit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalInit, other.jvmMemoryTotalInit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalUsed()).compareTo(other.isSetJvmMemoryTotalUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalUsed, other.jvmMemoryTotalUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalCommitted()).compareTo(other.isSetJvmMemoryTotalCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalCommitted, other.jvmMemoryTotalCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalMax()).compareTo(other.isSetJvmMemoryTotalMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalMax, other.jvmMemoryTotalMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapInit()).compareTo(other.isSetJvmMemoryHeapInit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapInit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapInit, other.jvmMemoryHeapInit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapUsed()).compareTo(other.isSetJvmMemoryHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapUsed, other.jvmMemoryHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapCommitted()).compareTo(other.isSetJvmMemoryHeapCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapCommitted, other.jvmMemoryHeapCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapMax()).compareTo(other.isSetJvmMemoryHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapMax, other.jvmMemoryHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapInit()).compareTo(other.isSetJvmMemoryNonHeapInit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapInit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapInit, other.jvmMemoryNonHeapInit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapUsed()).compareTo(other.isSetJvmMemoryNonHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapUsed, other.jvmMemoryNonHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapCommitted()).compareTo(other.isSetJvmMemoryNonHeapCommitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapCommitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapCommitted, other.jvmMemoryNonHeapCommitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapMax()).compareTo(other.isSetJvmMemoryNonHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapMax, other.jvmMemoryNonHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcParNewCount()).compareTo(other.isSetJvmGcParNewCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcParNewCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcParNewCount, other.jvmGcParNewCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcParNewTime()).compareTo(other.isSetJvmGcParNewTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcParNewTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcParNewTime, other.jvmGcParNewTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcCmsCount()).compareTo(other.isSetJvmGcCmsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcCmsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcCmsCount, other.jvmGcCmsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcTime()).compareTo(other.isSetJvmGcTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcTime, other.jvmGcTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatWithCmsCollector(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalInit:");
    sb.append(this.jvmMemoryTotalInit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalUsed:");
    sb.append(this.jvmMemoryTotalUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalCommitted:");
    sb.append(this.jvmMemoryTotalCommitted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalMax:");
    sb.append(this.jvmMemoryTotalMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapInit:");
    sb.append(this.jvmMemoryHeapInit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapUsed:");
    sb.append(this.jvmMemoryHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapCommitted:");
    sb.append(this.jvmMemoryHeapCommitted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapMax:");
    sb.append(this.jvmMemoryHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapInit:");
    sb.append(this.jvmMemoryNonHeapInit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapUsed:");
    sb.append(this.jvmMemoryNonHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapCommitted:");
    sb.append(this.jvmMemoryNonHeapCommitted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapMax:");
    sb.append(this.jvmMemoryNonHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcParNewCount:");
    sb.append(this.jvmGcParNewCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcParNewTime:");
    sb.append(this.jvmGcParNewTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcCmsCount:");
    sb.append(this.jvmGcCmsCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcTime:");
    sb.append(this.jvmGcTime);
    first = false;
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatWithCmsCollectorStandardSchemeFactory implements SchemeFactory {
    public StatWithCmsCollectorStandardScheme getScheme() {
      return new StatWithCmsCollectorStandardScheme();
    }
  }

  private static class StatWithCmsCollectorStandardScheme extends StandardScheme<StatWithCmsCollector> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatWithCmsCollector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JVM_MEMORY_TOTAL_INIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalInit = iprot.readI64();
              struct.setJvmMemoryTotalInitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JVM_MEMORY_TOTAL_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalUsed = iprot.readI64();
              struct.setJvmMemoryTotalUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JVM_MEMORY_TOTAL_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalCommitted = iprot.readI64();
              struct.setJvmMemoryTotalCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JVM_MEMORY_TOTAL_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalMax = iprot.readI64();
              struct.setJvmMemoryTotalMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JVM_MEMORY_HEAP_INIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapInit = iprot.readI64();
              struct.setJvmMemoryHeapInitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JVM_MEMORY_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapUsed = iprot.readI64();
              struct.setJvmMemoryHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JVM_MEMORY_HEAP_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapCommitted = iprot.readI64();
              struct.setJvmMemoryHeapCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JVM_MEMORY_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapMax = iprot.readI64();
              struct.setJvmMemoryHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JVM_MEMORY_NON_HEAP_INIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapInit = iprot.readI64();
              struct.setJvmMemoryNonHeapInitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // JVM_MEMORY_NON_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapUsed = iprot.readI64();
              struct.setJvmMemoryNonHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // JVM_MEMORY_NON_HEAP_COMMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapCommitted = iprot.readI64();
              struct.setJvmMemoryNonHeapCommittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // JVM_MEMORY_NON_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapMax = iprot.readI64();
              struct.setJvmMemoryNonHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // JVM_GC_PAR_NEW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcParNewCount = iprot.readI64();
              struct.setJvmGcParNewCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // JVM_GC_PAR_NEW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcParNewTime = iprot.readI64();
              struct.setJvmGcParNewTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // JVM_GC_CMS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcCmsCount = iprot.readI64();
              struct.setJvmGcCmsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // JVM_GC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcTime = iprot.readI64();
              struct.setJvmGcTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatWithCmsCollector struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_INIT_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalInit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalCommitted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_INIT_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapInit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapCommitted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_INIT_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapInit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_COMMITTED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapCommitted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_PAR_NEW_COUNT_FIELD_DESC);
      oprot.writeI64(struct.jvmGcParNewCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_PAR_NEW_TIME_FIELD_DESC);
      oprot.writeI64(struct.jvmGcParNewTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_CMS_COUNT_FIELD_DESC);
      oprot.writeI64(struct.jvmGcCmsCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_TIME_FIELD_DESC);
      oprot.writeI64(struct.jvmGcTime);
      oprot.writeFieldEnd();
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatWithCmsCollectorTupleSchemeFactory implements SchemeFactory {
    public StatWithCmsCollectorTupleScheme getScheme() {
      return new StatWithCmsCollectorTupleScheme();
    }
  }

  private static class StatWithCmsCollectorTupleScheme extends TupleScheme<StatWithCmsCollector> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatWithCmsCollector struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetJvmMemoryTotalInit()) {
        optionals.set(2);
      }
      if (struct.isSetJvmMemoryTotalUsed()) {
        optionals.set(3);
      }
      if (struct.isSetJvmMemoryTotalCommitted()) {
        optionals.set(4);
      }
      if (struct.isSetJvmMemoryTotalMax()) {
        optionals.set(5);
      }
      if (struct.isSetJvmMemoryHeapInit()) {
        optionals.set(6);
      }
      if (struct.isSetJvmMemoryHeapUsed()) {
        optionals.set(7);
      }
      if (struct.isSetJvmMemoryHeapCommitted()) {
        optionals.set(8);
      }
      if (struct.isSetJvmMemoryHeapMax()) {
        optionals.set(9);
      }
      if (struct.isSetJvmMemoryNonHeapInit()) {
        optionals.set(10);
      }
      if (struct.isSetJvmMemoryNonHeapUsed()) {
        optionals.set(11);
      }
      if (struct.isSetJvmMemoryNonHeapCommitted()) {
        optionals.set(12);
      }
      if (struct.isSetJvmMemoryNonHeapMax()) {
        optionals.set(13);
      }
      if (struct.isSetJvmGcParNewCount()) {
        optionals.set(14);
      }
      if (struct.isSetJvmGcParNewTime()) {
        optionals.set(15);
      }
      if (struct.isSetJvmGcCmsCount()) {
        optionals.set(16);
      }
      if (struct.isSetJvmGcTime()) {
        optionals.set(17);
      }
      if (struct.isSetMetadata()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetJvmMemoryTotalInit()) {
        oprot.writeI64(struct.jvmMemoryTotalInit);
      }
      if (struct.isSetJvmMemoryTotalUsed()) {
        oprot.writeI64(struct.jvmMemoryTotalUsed);
      }
      if (struct.isSetJvmMemoryTotalCommitted()) {
        oprot.writeI64(struct.jvmMemoryTotalCommitted);
      }
      if (struct.isSetJvmMemoryTotalMax()) {
        oprot.writeI64(struct.jvmMemoryTotalMax);
      }
      if (struct.isSetJvmMemoryHeapInit()) {
        oprot.writeI64(struct.jvmMemoryHeapInit);
      }
      if (struct.isSetJvmMemoryHeapUsed()) {
        oprot.writeI64(struct.jvmMemoryHeapUsed);
      }
      if (struct.isSetJvmMemoryHeapCommitted()) {
        oprot.writeI64(struct.jvmMemoryHeapCommitted);
      }
      if (struct.isSetJvmMemoryHeapMax()) {
        oprot.writeI64(struct.jvmMemoryHeapMax);
      }
      if (struct.isSetJvmMemoryNonHeapInit()) {
        oprot.writeI64(struct.jvmMemoryNonHeapInit);
      }
      if (struct.isSetJvmMemoryNonHeapUsed()) {
        oprot.writeI64(struct.jvmMemoryNonHeapUsed);
      }
      if (struct.isSetJvmMemoryNonHeapCommitted()) {
        oprot.writeI64(struct.jvmMemoryNonHeapCommitted);
      }
      if (struct.isSetJvmMemoryNonHeapMax()) {
        oprot.writeI64(struct.jvmMemoryNonHeapMax);
      }
      if (struct.isSetJvmGcParNewCount()) {
        oprot.writeI64(struct.jvmGcParNewCount);
      }
      if (struct.isSetJvmGcParNewTime()) {
        oprot.writeI64(struct.jvmGcParNewTime);
      }
      if (struct.isSetJvmGcCmsCount()) {
        oprot.writeI64(struct.jvmGcCmsCount);
      }
      if (struct.isSetJvmGcTime()) {
        oprot.writeI64(struct.jvmGcTime);
      }
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatWithCmsCollector struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jvmMemoryTotalInit = iprot.readI64();
        struct.setJvmMemoryTotalInitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jvmMemoryTotalUsed = iprot.readI64();
        struct.setJvmMemoryTotalUsedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jvmMemoryTotalCommitted = iprot.readI64();
        struct.setJvmMemoryTotalCommittedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jvmMemoryTotalMax = iprot.readI64();
        struct.setJvmMemoryTotalMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jvmMemoryHeapInit = iprot.readI64();
        struct.setJvmMemoryHeapInitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.jvmMemoryHeapUsed = iprot.readI64();
        struct.setJvmMemoryHeapUsedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jvmMemoryHeapCommitted = iprot.readI64();
        struct.setJvmMemoryHeapCommittedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.jvmMemoryHeapMax = iprot.readI64();
        struct.setJvmMemoryHeapMaxIsSet(true);
      }
      if (incoming.get(10)) {
        struct.jvmMemoryNonHeapInit = iprot.readI64();
        struct.setJvmMemoryNonHeapInitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.jvmMemoryNonHeapUsed = iprot.readI64();
        struct.setJvmMemoryNonHeapUsedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.jvmMemoryNonHeapCommitted = iprot.readI64();
        struct.setJvmMemoryNonHeapCommittedIsSet(true);
      }
      if (incoming.get(13)) {
        struct.jvmMemoryNonHeapMax = iprot.readI64();
        struct.setJvmMemoryNonHeapMaxIsSet(true);
      }
      if (incoming.get(14)) {
        struct.jvmGcParNewCount = iprot.readI64();
        struct.setJvmGcParNewCountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.jvmGcParNewTime = iprot.readI64();
        struct.setJvmGcParNewTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.jvmGcCmsCount = iprot.readI64();
        struct.setJvmGcCmsCountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.jvmGcTime = iprot.readI64();
        struct.setJvmGcTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
    }
  }

}

