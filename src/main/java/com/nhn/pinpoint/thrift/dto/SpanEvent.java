/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nhn.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpanEvent implements org.apache.thrift.TBase<SpanEvent, SpanEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpanEvent");

  private static final org.apache.thrift.protocol.TField AGENT_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("agentKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("parentServiceType", org.apache.thrift.protocol.TType.I16, (short)17);
  private static final org.apache.thrift.protocol.TField PARENT_END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("parentEndPoint", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TRACE_AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceAgentId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRACE_AGENT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("traceAgentStartTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TRACE_TRANSACTION_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("traceTransactionSequence", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField START_ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("startElapsed", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField END_ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("endElapsed", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField RPC_FIELD_DESC = new org.apache.thrift.protocol.TField("rpc", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endPoint", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField NEXT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nextSpanId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DESTINATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationId", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DESTINATION_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationAddress", org.apache.thrift.protocol.TType.LIST, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanEventTupleSchemeFactory());
  }

  private AgentKey agentKey; // optional
  private short parentServiceType; // optional
  private String parentEndPoint; // optional
  private String traceAgentId; // optional
  private long traceAgentStartTime; // optional
  private long traceTransactionSequence; // optional
  private int spanId; // optional
  private short sequence; // required
  private int startElapsed; // required
  private int endElapsed; // required
  private String rpc; // optional
  private short serviceType; // required
  private String endPoint; // optional
  private List<Annotation> annotations; // required
  private int depth; // optional
  private int nextSpanId; // optional
  private String destinationId; // optional
  private List<String> destinationAddress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_KEY((short)1, "agentKey"),
    PARENT_SERVICE_TYPE((short)17, "parentServiceType"),
    PARENT_END_POINT((short)18, "parentEndPoint"),
    TRACE_AGENT_ID((short)4, "traceAgentId"),
    TRACE_AGENT_START_TIME((short)5, "traceAgentStartTime"),
    TRACE_TRANSACTION_SEQUENCE((short)6, "traceTransactionSequence"),
    SPAN_ID((short)7, "spanId"),
    SEQUENCE((short)8, "sequence"),
    START_ELAPSED((short)9, "startElapsed"),
    END_ELAPSED((short)10, "endElapsed"),
    RPC((short)11, "rpc"),
    SERVICE_TYPE((short)12, "serviceType"),
    END_POINT((short)13, "endPoint"),
    ANNOTATIONS((short)14, "annotations"),
    DEPTH((short)15, "depth"),
    NEXT_SPAN_ID((short)16, "nextSpanId"),
    DESTINATION_ID((short)20, "destinationId"),
    DESTINATION_ADDRESS((short)21, "destinationAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_KEY
          return AGENT_KEY;
        case 17: // PARENT_SERVICE_TYPE
          return PARENT_SERVICE_TYPE;
        case 18: // PARENT_END_POINT
          return PARENT_END_POINT;
        case 4: // TRACE_AGENT_ID
          return TRACE_AGENT_ID;
        case 5: // TRACE_AGENT_START_TIME
          return TRACE_AGENT_START_TIME;
        case 6: // TRACE_TRANSACTION_SEQUENCE
          return TRACE_TRANSACTION_SEQUENCE;
        case 7: // SPAN_ID
          return SPAN_ID;
        case 8: // SEQUENCE
          return SEQUENCE;
        case 9: // START_ELAPSED
          return START_ELAPSED;
        case 10: // END_ELAPSED
          return END_ELAPSED;
        case 11: // RPC
          return RPC;
        case 12: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 13: // END_POINT
          return END_POINT;
        case 14: // ANNOTATIONS
          return ANNOTATIONS;
        case 15: // DEPTH
          return DEPTH;
        case 16: // NEXT_SPAN_ID
          return NEXT_SPAN_ID;
        case 20: // DESTINATION_ID
          return DESTINATION_ID;
        case 21: // DESTINATION_ADDRESS
          return DESTINATION_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARENTSERVICETYPE_ISSET_ID = 0;
  private static final int __TRACEAGENTSTARTTIME_ISSET_ID = 1;
  private static final int __TRACETRANSACTIONSEQUENCE_ISSET_ID = 2;
  private static final int __SPANID_ISSET_ID = 3;
  private static final int __SEQUENCE_ISSET_ID = 4;
  private static final int __STARTELAPSED_ISSET_ID = 5;
  private static final int __ENDELAPSED_ISSET_ID = 6;
  private static final int __SERVICETYPE_ISSET_ID = 7;
  private static final int __DEPTH_ISSET_ID = 8;
  private static final int __NEXTSPANID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.AGENT_KEY,_Fields.PARENT_SERVICE_TYPE,_Fields.PARENT_END_POINT,_Fields.TRACE_AGENT_ID,_Fields.TRACE_AGENT_START_TIME,_Fields.TRACE_TRANSACTION_SEQUENCE,_Fields.SPAN_ID,_Fields.RPC,_Fields.END_POINT,_Fields.DEPTH,_Fields.NEXT_SPAN_ID,_Fields.DESTINATION_ID,_Fields.DESTINATION_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_KEY, new org.apache.thrift.meta_data.FieldMetaData("agentKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgentKey.class)));
    tmpMap.put(_Fields.PARENT_SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("parentServiceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PARENT_END_POINT, new org.apache.thrift.meta_data.FieldMetaData("parentEndPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("traceAgentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_AGENT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("traceAgentStartTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRACE_TRANSACTION_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("traceTransactionSequence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.START_ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("startElapsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("endElapsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RPC, new org.apache.thrift.meta_data.FieldMetaData("rpc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("endPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotation.class))));
    tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEXT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("nextSpanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESTINATION_ID, new org.apache.thrift.meta_data.FieldMetaData("destinationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("destinationAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpanEvent.class, metaDataMap);
  }

  public SpanEvent() {
  }

  public SpanEvent(
    short sequence,
    int startElapsed,
    int endElapsed,
    short serviceType,
    List<Annotation> annotations)
  {
    this();
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.startElapsed = startElapsed;
    setStartElapsedIsSet(true);
    this.endElapsed = endElapsed;
    setEndElapsedIsSet(true);
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
    this.annotations = annotations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpanEvent(SpanEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentKey()) {
      this.agentKey = new AgentKey(other.agentKey);
    }
    this.parentServiceType = other.parentServiceType;
    if (other.isSetParentEndPoint()) {
      this.parentEndPoint = other.parentEndPoint;
    }
    if (other.isSetTraceAgentId()) {
      this.traceAgentId = other.traceAgentId;
    }
    this.traceAgentStartTime = other.traceAgentStartTime;
    this.traceTransactionSequence = other.traceTransactionSequence;
    this.spanId = other.spanId;
    this.sequence = other.sequence;
    this.startElapsed = other.startElapsed;
    this.endElapsed = other.endElapsed;
    if (other.isSetRpc()) {
      this.rpc = other.rpc;
    }
    this.serviceType = other.serviceType;
    if (other.isSetEndPoint()) {
      this.endPoint = other.endPoint;
    }
    if (other.isSetAnnotations()) {
      List<Annotation> __this__annotations = new ArrayList<Annotation>();
      for (Annotation other_element : other.annotations) {
        __this__annotations.add(new Annotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    this.depth = other.depth;
    this.nextSpanId = other.nextSpanId;
    if (other.isSetDestinationId()) {
      this.destinationId = other.destinationId;
    }
    if (other.isSetDestinationAddress()) {
      List<String> __this__destinationAddress = new ArrayList<String>();
      for (String other_element : other.destinationAddress) {
        __this__destinationAddress.add(other_element);
      }
      this.destinationAddress = __this__destinationAddress;
    }
  }

  public SpanEvent deepCopy() {
    return new SpanEvent(this);
  }

  @Override
  public void clear() {
    this.agentKey = null;
    setParentServiceTypeIsSet(false);
    this.parentServiceType = 0;
    this.parentEndPoint = null;
    this.traceAgentId = null;
    setTraceAgentStartTimeIsSet(false);
    this.traceAgentStartTime = 0;
    setTraceTransactionSequenceIsSet(false);
    this.traceTransactionSequence = 0;
    setSpanIdIsSet(false);
    this.spanId = 0;
    setSequenceIsSet(false);
    this.sequence = 0;
    setStartElapsedIsSet(false);
    this.startElapsed = 0;
    setEndElapsedIsSet(false);
    this.endElapsed = 0;
    this.rpc = null;
    setServiceTypeIsSet(false);
    this.serviceType = 0;
    this.endPoint = null;
    this.annotations = null;
    setDepthIsSet(false);
    this.depth = 0;
    setNextSpanIdIsSet(false);
    this.nextSpanId = 0;
    this.destinationId = null;
    this.destinationAddress = null;
  }

  public AgentKey getAgentKey() {
    return this.agentKey;
  }

  public void setAgentKey(AgentKey agentKey) {
    this.agentKey = agentKey;
  }

  public void unsetAgentKey() {
    this.agentKey = null;
  }

  /** Returns true if field agentKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentKey() {
    return this.agentKey != null;
  }

  public void setAgentKeyIsSet(boolean value) {
    if (!value) {
      this.agentKey = null;
    }
  }

  public short getParentServiceType() {
    return this.parentServiceType;
  }

  public void setParentServiceType(short parentServiceType) {
    this.parentServiceType = parentServiceType;
    setParentServiceTypeIsSet(true);
  }

  public void unsetParentServiceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTSERVICETYPE_ISSET_ID);
  }

  /** Returns true if field parentServiceType is set (has been assigned a value) and false otherwise */
  public boolean isSetParentServiceType() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTSERVICETYPE_ISSET_ID);
  }

  public void setParentServiceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTSERVICETYPE_ISSET_ID, value);
  }

  public String getParentEndPoint() {
    return this.parentEndPoint;
  }

  public void setParentEndPoint(String parentEndPoint) {
    this.parentEndPoint = parentEndPoint;
  }

  public void unsetParentEndPoint() {
    this.parentEndPoint = null;
  }

  /** Returns true if field parentEndPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetParentEndPoint() {
    return this.parentEndPoint != null;
  }

  public void setParentEndPointIsSet(boolean value) {
    if (!value) {
      this.parentEndPoint = null;
    }
  }

  public String getTraceAgentId() {
    return this.traceAgentId;
  }

  public void setTraceAgentId(String traceAgentId) {
    this.traceAgentId = traceAgentId;
  }

  public void unsetTraceAgentId() {
    this.traceAgentId = null;
  }

  /** Returns true if field traceAgentId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceAgentId() {
    return this.traceAgentId != null;
  }

  public void setTraceAgentIdIsSet(boolean value) {
    if (!value) {
      this.traceAgentId = null;
    }
  }

  public long getTraceAgentStartTime() {
    return this.traceAgentStartTime;
  }

  public void setTraceAgentStartTime(long traceAgentStartTime) {
    this.traceAgentStartTime = traceAgentStartTime;
    setTraceAgentStartTimeIsSet(true);
  }

  public void unsetTraceAgentStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACEAGENTSTARTTIME_ISSET_ID);
  }

  /** Returns true if field traceAgentStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceAgentStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACEAGENTSTARTTIME_ISSET_ID);
  }

  public void setTraceAgentStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACEAGENTSTARTTIME_ISSET_ID, value);
  }

  public long getTraceTransactionSequence() {
    return this.traceTransactionSequence;
  }

  public void setTraceTransactionSequence(long traceTransactionSequence) {
    this.traceTransactionSequence = traceTransactionSequence;
    setTraceTransactionSequenceIsSet(true);
  }

  public void unsetTraceTransactionSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACETRANSACTIONSEQUENCE_ISSET_ID);
  }

  /** Returns true if field traceTransactionSequence is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceTransactionSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACETRANSACTIONSEQUENCE_ISSET_ID);
  }

  public void setTraceTransactionSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACETRANSACTIONSEQUENCE_ISSET_ID, value);
  }

  public int getSpanId() {
    return this.spanId;
  }

  public void setSpanId(int spanId) {
    this.spanId = spanId;
    setSpanIdIsSet(true);
  }

  public void unsetSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPANID_ISSET_ID, value);
  }

  public short getSequence() {
    return this.sequence;
  }

  public void setSequence(short sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
  }

  public void unsetSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public int getStartElapsed() {
    return this.startElapsed;
  }

  public void setStartElapsed(int startElapsed) {
    this.startElapsed = startElapsed;
    setStartElapsedIsSet(true);
  }

  public void unsetStartElapsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTELAPSED_ISSET_ID);
  }

  /** Returns true if field startElapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetStartElapsed() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTELAPSED_ISSET_ID);
  }

  public void setStartElapsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTELAPSED_ISSET_ID, value);
  }

  public int getEndElapsed() {
    return this.endElapsed;
  }

  public void setEndElapsed(int endElapsed) {
    this.endElapsed = endElapsed;
    setEndElapsedIsSet(true);
  }

  public void unsetEndElapsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDELAPSED_ISSET_ID);
  }

  /** Returns true if field endElapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetEndElapsed() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDELAPSED_ISSET_ID);
  }

  public void setEndElapsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDELAPSED_ISSET_ID, value);
  }

  public String getRpc() {
    return this.rpc;
  }

  public void setRpc(String rpc) {
    this.rpc = rpc;
  }

  public void unsetRpc() {
    this.rpc = null;
  }

  /** Returns true if field rpc is set (has been assigned a value) and false otherwise */
  public boolean isSetRpc() {
    return this.rpc != null;
  }

  public void setRpcIsSet(boolean value) {
    if (!value) {
      this.rpc = null;
    }
  }

  public short getServiceType() {
    return this.serviceType;
  }

  public void setServiceType(short serviceType) {
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
  }

  public void unsetServiceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
  }

  public void setServiceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICETYPE_ISSET_ID, value);
  }

  public String getEndPoint() {
    return this.endPoint;
  }

  public void setEndPoint(String endPoint) {
    this.endPoint = endPoint;
  }

  public void unsetEndPoint() {
    this.endPoint = null;
  }

  /** Returns true if field endPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPoint() {
    return this.endPoint != null;
  }

  public void setEndPointIsSet(boolean value) {
    if (!value) {
      this.endPoint = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<Annotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(Annotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<Annotation>();
    }
    this.annotations.add(elem);
  }

  public List<Annotation> getAnnotations() {
    return this.annotations;
  }

  public void setAnnotations(List<Annotation> annotations) {
    this.annotations = annotations;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public int getDepth() {
    return this.depth;
  }

  public void setDepth(int depth) {
    this.depth = depth;
    setDepthIsSet(true);
  }

  public void unsetDepth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTH_ISSET_ID);
  }

  /** Returns true if field depth is set (has been assigned a value) and false otherwise */
  public boolean isSetDepth() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTH_ISSET_ID);
  }

  public void setDepthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTH_ISSET_ID, value);
  }

  public int getNextSpanId() {
    return this.nextSpanId;
  }

  public void setNextSpanId(int nextSpanId) {
    this.nextSpanId = nextSpanId;
    setNextSpanIdIsSet(true);
  }

  public void unsetNextSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTSPANID_ISSET_ID);
  }

  /** Returns true if field nextSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetNextSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTSPANID_ISSET_ID);
  }

  public void setNextSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTSPANID_ISSET_ID, value);
  }

  public String getDestinationId() {
    return this.destinationId;
  }

  public void setDestinationId(String destinationId) {
    this.destinationId = destinationId;
  }

  public void unsetDestinationId() {
    this.destinationId = null;
  }

  /** Returns true if field destinationId is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinationId() {
    return this.destinationId != null;
  }

  public void setDestinationIdIsSet(boolean value) {
    if (!value) {
      this.destinationId = null;
    }
  }

  public int getDestinationAddressSize() {
    return (this.destinationAddress == null) ? 0 : this.destinationAddress.size();
  }

  public java.util.Iterator<String> getDestinationAddressIterator() {
    return (this.destinationAddress == null) ? null : this.destinationAddress.iterator();
  }

  public void addToDestinationAddress(String elem) {
    if (this.destinationAddress == null) {
      this.destinationAddress = new ArrayList<String>();
    }
    this.destinationAddress.add(elem);
  }

  public List<String> getDestinationAddress() {
    return this.destinationAddress;
  }

  public void setDestinationAddress(List<String> destinationAddress) {
    this.destinationAddress = destinationAddress;
  }

  public void unsetDestinationAddress() {
    this.destinationAddress = null;
  }

  /** Returns true if field destinationAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinationAddress() {
    return this.destinationAddress != null;
  }

  public void setDestinationAddressIsSet(boolean value) {
    if (!value) {
      this.destinationAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_KEY:
      if (value == null) {
        unsetAgentKey();
      } else {
        setAgentKey((AgentKey)value);
      }
      break;

    case PARENT_SERVICE_TYPE:
      if (value == null) {
        unsetParentServiceType();
      } else {
        setParentServiceType((Short)value);
      }
      break;

    case PARENT_END_POINT:
      if (value == null) {
        unsetParentEndPoint();
      } else {
        setParentEndPoint((String)value);
      }
      break;

    case TRACE_AGENT_ID:
      if (value == null) {
        unsetTraceAgentId();
      } else {
        setTraceAgentId((String)value);
      }
      break;

    case TRACE_AGENT_START_TIME:
      if (value == null) {
        unsetTraceAgentStartTime();
      } else {
        setTraceAgentStartTime((Long)value);
      }
      break;

    case TRACE_TRANSACTION_SEQUENCE:
      if (value == null) {
        unsetTraceTransactionSequence();
      } else {
        setTraceTransactionSequence((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Integer)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Short)value);
      }
      break;

    case START_ELAPSED:
      if (value == null) {
        unsetStartElapsed();
      } else {
        setStartElapsed((Integer)value);
      }
      break;

    case END_ELAPSED:
      if (value == null) {
        unsetEndElapsed();
      } else {
        setEndElapsed((Integer)value);
      }
      break;

    case RPC:
      if (value == null) {
        unsetRpc();
      } else {
        setRpc((String)value);
      }
      break;

    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((Short)value);
      }
      break;

    case END_POINT:
      if (value == null) {
        unsetEndPoint();
      } else {
        setEndPoint((String)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<Annotation>)value);
      }
      break;

    case DEPTH:
      if (value == null) {
        unsetDepth();
      } else {
        setDepth((Integer)value);
      }
      break;

    case NEXT_SPAN_ID:
      if (value == null) {
        unsetNextSpanId();
      } else {
        setNextSpanId((Integer)value);
      }
      break;

    case DESTINATION_ID:
      if (value == null) {
        unsetDestinationId();
      } else {
        setDestinationId((String)value);
      }
      break;

    case DESTINATION_ADDRESS:
      if (value == null) {
        unsetDestinationAddress();
      } else {
        setDestinationAddress((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_KEY:
      return getAgentKey();

    case PARENT_SERVICE_TYPE:
      return Short.valueOf(getParentServiceType());

    case PARENT_END_POINT:
      return getParentEndPoint();

    case TRACE_AGENT_ID:
      return getTraceAgentId();

    case TRACE_AGENT_START_TIME:
      return Long.valueOf(getTraceAgentStartTime());

    case TRACE_TRANSACTION_SEQUENCE:
      return Long.valueOf(getTraceTransactionSequence());

    case SPAN_ID:
      return Integer.valueOf(getSpanId());

    case SEQUENCE:
      return Short.valueOf(getSequence());

    case START_ELAPSED:
      return Integer.valueOf(getStartElapsed());

    case END_ELAPSED:
      return Integer.valueOf(getEndElapsed());

    case RPC:
      return getRpc();

    case SERVICE_TYPE:
      return Short.valueOf(getServiceType());

    case END_POINT:
      return getEndPoint();

    case ANNOTATIONS:
      return getAnnotations();

    case DEPTH:
      return Integer.valueOf(getDepth());

    case NEXT_SPAN_ID:
      return Integer.valueOf(getNextSpanId());

    case DESTINATION_ID:
      return getDestinationId();

    case DESTINATION_ADDRESS:
      return getDestinationAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_KEY:
      return isSetAgentKey();
    case PARENT_SERVICE_TYPE:
      return isSetParentServiceType();
    case PARENT_END_POINT:
      return isSetParentEndPoint();
    case TRACE_AGENT_ID:
      return isSetTraceAgentId();
    case TRACE_AGENT_START_TIME:
      return isSetTraceAgentStartTime();
    case TRACE_TRANSACTION_SEQUENCE:
      return isSetTraceTransactionSequence();
    case SPAN_ID:
      return isSetSpanId();
    case SEQUENCE:
      return isSetSequence();
    case START_ELAPSED:
      return isSetStartElapsed();
    case END_ELAPSED:
      return isSetEndElapsed();
    case RPC:
      return isSetRpc();
    case SERVICE_TYPE:
      return isSetServiceType();
    case END_POINT:
      return isSetEndPoint();
    case ANNOTATIONS:
      return isSetAnnotations();
    case DEPTH:
      return isSetDepth();
    case NEXT_SPAN_ID:
      return isSetNextSpanId();
    case DESTINATION_ID:
      return isSetDestinationId();
    case DESTINATION_ADDRESS:
      return isSetDestinationAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpanEvent)
      return this.equals((SpanEvent)that);
    return false;
  }

  public boolean equals(SpanEvent that) {
    if (that == null)
      return false;

    boolean this_present_agentKey = true && this.isSetAgentKey();
    boolean that_present_agentKey = true && that.isSetAgentKey();
    if (this_present_agentKey || that_present_agentKey) {
      if (!(this_present_agentKey && that_present_agentKey))
        return false;
      if (!this.agentKey.equals(that.agentKey))
        return false;
    }

    boolean this_present_parentServiceType = true && this.isSetParentServiceType();
    boolean that_present_parentServiceType = true && that.isSetParentServiceType();
    if (this_present_parentServiceType || that_present_parentServiceType) {
      if (!(this_present_parentServiceType && that_present_parentServiceType))
        return false;
      if (this.parentServiceType != that.parentServiceType)
        return false;
    }

    boolean this_present_parentEndPoint = true && this.isSetParentEndPoint();
    boolean that_present_parentEndPoint = true && that.isSetParentEndPoint();
    if (this_present_parentEndPoint || that_present_parentEndPoint) {
      if (!(this_present_parentEndPoint && that_present_parentEndPoint))
        return false;
      if (!this.parentEndPoint.equals(that.parentEndPoint))
        return false;
    }

    boolean this_present_traceAgentId = true && this.isSetTraceAgentId();
    boolean that_present_traceAgentId = true && that.isSetTraceAgentId();
    if (this_present_traceAgentId || that_present_traceAgentId) {
      if (!(this_present_traceAgentId && that_present_traceAgentId))
        return false;
      if (!this.traceAgentId.equals(that.traceAgentId))
        return false;
    }

    boolean this_present_traceAgentStartTime = true && this.isSetTraceAgentStartTime();
    boolean that_present_traceAgentStartTime = true && that.isSetTraceAgentStartTime();
    if (this_present_traceAgentStartTime || that_present_traceAgentStartTime) {
      if (!(this_present_traceAgentStartTime && that_present_traceAgentStartTime))
        return false;
      if (this.traceAgentStartTime != that.traceAgentStartTime)
        return false;
    }

    boolean this_present_traceTransactionSequence = true && this.isSetTraceTransactionSequence();
    boolean that_present_traceTransactionSequence = true && that.isSetTraceTransactionSequence();
    if (this_present_traceTransactionSequence || that_present_traceTransactionSequence) {
      if (!(this_present_traceTransactionSequence && that_present_traceTransactionSequence))
        return false;
      if (this.traceTransactionSequence != that.traceTransactionSequence)
        return false;
    }

    boolean this_present_spanId = true && this.isSetSpanId();
    boolean that_present_spanId = true && that.isSetSpanId();
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (this.spanId != that.spanId)
        return false;
    }

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_startElapsed = true;
    boolean that_present_startElapsed = true;
    if (this_present_startElapsed || that_present_startElapsed) {
      if (!(this_present_startElapsed && that_present_startElapsed))
        return false;
      if (this.startElapsed != that.startElapsed)
        return false;
    }

    boolean this_present_endElapsed = true;
    boolean that_present_endElapsed = true;
    if (this_present_endElapsed || that_present_endElapsed) {
      if (!(this_present_endElapsed && that_present_endElapsed))
        return false;
      if (this.endElapsed != that.endElapsed)
        return false;
    }

    boolean this_present_rpc = true && this.isSetRpc();
    boolean that_present_rpc = true && that.isSetRpc();
    if (this_present_rpc || that_present_rpc) {
      if (!(this_present_rpc && that_present_rpc))
        return false;
      if (!this.rpc.equals(that.rpc))
        return false;
    }

    boolean this_present_serviceType = true;
    boolean that_present_serviceType = true;
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (this.serviceType != that.serviceType)
        return false;
    }

    boolean this_present_endPoint = true && this.isSetEndPoint();
    boolean that_present_endPoint = true && that.isSetEndPoint();
    if (this_present_endPoint || that_present_endPoint) {
      if (!(this_present_endPoint && that_present_endPoint))
        return false;
      if (!this.endPoint.equals(that.endPoint))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_depth = true && this.isSetDepth();
    boolean that_present_depth = true && that.isSetDepth();
    if (this_present_depth || that_present_depth) {
      if (!(this_present_depth && that_present_depth))
        return false;
      if (this.depth != that.depth)
        return false;
    }

    boolean this_present_nextSpanId = true && this.isSetNextSpanId();
    boolean that_present_nextSpanId = true && that.isSetNextSpanId();
    if (this_present_nextSpanId || that_present_nextSpanId) {
      if (!(this_present_nextSpanId && that_present_nextSpanId))
        return false;
      if (this.nextSpanId != that.nextSpanId)
        return false;
    }

    boolean this_present_destinationId = true && this.isSetDestinationId();
    boolean that_present_destinationId = true && that.isSetDestinationId();
    if (this_present_destinationId || that_present_destinationId) {
      if (!(this_present_destinationId && that_present_destinationId))
        return false;
      if (!this.destinationId.equals(that.destinationId))
        return false;
    }

    boolean this_present_destinationAddress = true && this.isSetDestinationAddress();
    boolean that_present_destinationAddress = true && that.isSetDestinationAddress();
    if (this_present_destinationAddress || that_present_destinationAddress) {
      if (!(this_present_destinationAddress && that_present_destinationAddress))
        return false;
      if (!this.destinationAddress.equals(that.destinationAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SpanEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SpanEvent typedOther = (SpanEvent)other;

    lastComparison = Boolean.valueOf(isSetAgentKey()).compareTo(typedOther.isSetAgentKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentKey, typedOther.agentKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentServiceType()).compareTo(typedOther.isSetParentServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentServiceType, typedOther.parentServiceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentEndPoint()).compareTo(typedOther.isSetParentEndPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentEndPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentEndPoint, typedOther.parentEndPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceAgentId()).compareTo(typedOther.isSetTraceAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceAgentId, typedOther.traceAgentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceAgentStartTime()).compareTo(typedOther.isSetTraceAgentStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceAgentStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceAgentStartTime, typedOther.traceAgentStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceTransactionSequence()).compareTo(typedOther.isSetTraceTransactionSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceTransactionSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceTransactionSequence, typedOther.traceTransactionSequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(typedOther.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, typedOther.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartElapsed()).compareTo(typedOther.isSetStartElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startElapsed, typedOther.startElapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndElapsed()).compareTo(typedOther.isSetEndElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endElapsed, typedOther.endElapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpc()).compareTo(typedOther.isSetRpc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpc, typedOther.rpc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(typedOther.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, typedOther.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPoint()).compareTo(typedOther.isSetEndPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPoint, typedOther.endPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepth()).compareTo(typedOther.isSetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, typedOther.depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextSpanId()).compareTo(typedOther.isSetNextSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextSpanId, typedOther.nextSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestinationId()).compareTo(typedOther.isSetDestinationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationId, typedOther.destinationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestinationAddress()).compareTo(typedOther.isSetDestinationAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinationAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationAddress, typedOther.destinationAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpanEvent(");
    boolean first = true;

    if (isSetAgentKey()) {
      sb.append("agentKey:");
      if (this.agentKey == null) {
        sb.append("null");
      } else {
        sb.append(this.agentKey);
      }
      first = false;
    }
    if (isSetParentServiceType()) {
      if (!first) sb.append(", ");
      sb.append("parentServiceType:");
      sb.append(this.parentServiceType);
      first = false;
    }
    if (isSetParentEndPoint()) {
      if (!first) sb.append(", ");
      sb.append("parentEndPoint:");
      if (this.parentEndPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.parentEndPoint);
      }
      first = false;
    }
    if (isSetTraceAgentId()) {
      if (!first) sb.append(", ");
      sb.append("traceAgentId:");
      if (this.traceAgentId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceAgentId);
      }
      first = false;
    }
    if (isSetTraceAgentStartTime()) {
      if (!first) sb.append(", ");
      sb.append("traceAgentStartTime:");
      sb.append(this.traceAgentStartTime);
      first = false;
    }
    if (isSetTraceTransactionSequence()) {
      if (!first) sb.append(", ");
      sb.append("traceTransactionSequence:");
      sb.append(this.traceTransactionSequence);
      first = false;
    }
    if (isSetSpanId()) {
      if (!first) sb.append(", ");
      sb.append("spanId:");
      sb.append(this.spanId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startElapsed:");
    sb.append(this.startElapsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endElapsed:");
    sb.append(this.endElapsed);
    first = false;
    if (isSetRpc()) {
      if (!first) sb.append(", ");
      sb.append("rpc:");
      if (this.rpc == null) {
        sb.append("null");
      } else {
        sb.append(this.rpc);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("serviceType:");
    sb.append(this.serviceType);
    first = false;
    if (isSetEndPoint()) {
      if (!first) sb.append(", ");
      sb.append("endPoint:");
      if (this.endPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endPoint);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (isSetDepth()) {
      if (!first) sb.append(", ");
      sb.append("depth:");
      sb.append(this.depth);
      first = false;
    }
    if (isSetNextSpanId()) {
      if (!first) sb.append(", ");
      sb.append("nextSpanId:");
      sb.append(this.nextSpanId);
      first = false;
    }
    if (isSetDestinationId()) {
      if (!first) sb.append(", ");
      sb.append("destinationId:");
      if (this.destinationId == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationId);
      }
      first = false;
    }
    if (isSetDestinationAddress()) {
      if (!first) sb.append(", ");
      sb.append("destinationAddress:");
      if (this.destinationAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationAddress);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (agentKey != null) {
      agentKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanEventStandardSchemeFactory implements SchemeFactory {
    public SpanEventStandardScheme getScheme() {
      return new SpanEventStandardScheme();
    }
  }

  private static class SpanEventStandardScheme extends StandardScheme<SpanEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpanEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agentKey = new AgentKey();
              struct.agentKey.read(iprot);
              struct.setAgentKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PARENT_SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.parentServiceType = iprot.readI16();
              struct.setParentServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PARENT_END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentEndPoint = iprot.readString();
              struct.setParentEndPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACE_AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceAgentId = iprot.readString();
              struct.setTraceAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACE_AGENT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceAgentStartTime = iprot.readI64();
              struct.setTraceAgentStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRACE_TRANSACTION_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceTransactionSequence = iprot.readI64();
              struct.setTraceTransactionSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spanId = iprot.readI32();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sequence = iprot.readI16();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // START_ELAPSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startElapsed = iprot.readI32();
              struct.setStartElapsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // END_ELAPSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endElapsed = iprot.readI32();
              struct.setEndElapsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RPC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpc = iprot.readString();
              struct.setRpcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serviceType = iprot.readI16();
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endPoint = iprot.readString();
              struct.setEndPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.annotations = new ArrayList<Annotation>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Annotation _elem2; // required
                  _elem2 = new Annotation();
                  _elem2.read(iprot);
                  struct.annotations.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.depth = iprot.readI32();
              struct.setDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NEXT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextSpanId = iprot.readI32();
              struct.setNextSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DESTINATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destinationId = iprot.readString();
              struct.setDestinationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DESTINATION_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.destinationAddress = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.destinationAddress.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setDestinationAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpanEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentKey != null) {
        if (struct.isSetAgentKey()) {
          oprot.writeFieldBegin(AGENT_KEY_FIELD_DESC);
          struct.agentKey.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceAgentId != null) {
        if (struct.isSetTraceAgentId()) {
          oprot.writeFieldBegin(TRACE_AGENT_ID_FIELD_DESC);
          oprot.writeString(struct.traceAgentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTraceAgentStartTime()) {
        oprot.writeFieldBegin(TRACE_AGENT_START_TIME_FIELD_DESC);
        oprot.writeI64(struct.traceAgentStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTraceTransactionSequence()) {
        oprot.writeFieldBegin(TRACE_TRANSACTION_SEQUENCE_FIELD_DESC);
        oprot.writeI64(struct.traceTransactionSequence);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpanId()) {
        oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
        oprot.writeI32(struct.spanId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI16(struct.sequence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_ELAPSED_FIELD_DESC);
      oprot.writeI32(struct.startElapsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_ELAPSED_FIELD_DESC);
      oprot.writeI32(struct.endElapsed);
      oprot.writeFieldEnd();
      if (struct.rpc != null) {
        if (struct.isSetRpc()) {
          oprot.writeFieldBegin(RPC_FIELD_DESC);
          oprot.writeString(struct.rpc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
      oprot.writeI16(struct.serviceType);
      oprot.writeFieldEnd();
      if (struct.endPoint != null) {
        if (struct.isSetEndPoint()) {
          oprot.writeFieldBegin(END_POINT_FIELD_DESC);
          oprot.writeString(struct.endPoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.annotations != null) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.annotations.size()));
          for (Annotation _iter6 : struct.annotations)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepth()) {
        oprot.writeFieldBegin(DEPTH_FIELD_DESC);
        oprot.writeI32(struct.depth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNextSpanId()) {
        oprot.writeFieldBegin(NEXT_SPAN_ID_FIELD_DESC);
        oprot.writeI32(struct.nextSpanId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParentServiceType()) {
        oprot.writeFieldBegin(PARENT_SERVICE_TYPE_FIELD_DESC);
        oprot.writeI16(struct.parentServiceType);
        oprot.writeFieldEnd();
      }
      if (struct.parentEndPoint != null) {
        if (struct.isSetParentEndPoint()) {
          oprot.writeFieldBegin(PARENT_END_POINT_FIELD_DESC);
          oprot.writeString(struct.parentEndPoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destinationId != null) {
        if (struct.isSetDestinationId()) {
          oprot.writeFieldBegin(DESTINATION_ID_FIELD_DESC);
          oprot.writeString(struct.destinationId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destinationAddress != null) {
        if (struct.isSetDestinationAddress()) {
          oprot.writeFieldBegin(DESTINATION_ADDRESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.destinationAddress.size()));
            for (String _iter7 : struct.destinationAddress)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanEventTupleSchemeFactory implements SchemeFactory {
    public SpanEventTupleScheme getScheme() {
      return new SpanEventTupleScheme();
    }
  }

  private static class SpanEventTupleScheme extends TupleScheme<SpanEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpanEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentKey()) {
        optionals.set(0);
      }
      if (struct.isSetParentServiceType()) {
        optionals.set(1);
      }
      if (struct.isSetParentEndPoint()) {
        optionals.set(2);
      }
      if (struct.isSetTraceAgentId()) {
        optionals.set(3);
      }
      if (struct.isSetTraceAgentStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetTraceTransactionSequence()) {
        optionals.set(5);
      }
      if (struct.isSetSpanId()) {
        optionals.set(6);
      }
      if (struct.isSetSequence()) {
        optionals.set(7);
      }
      if (struct.isSetStartElapsed()) {
        optionals.set(8);
      }
      if (struct.isSetEndElapsed()) {
        optionals.set(9);
      }
      if (struct.isSetRpc()) {
        optionals.set(10);
      }
      if (struct.isSetServiceType()) {
        optionals.set(11);
      }
      if (struct.isSetEndPoint()) {
        optionals.set(12);
      }
      if (struct.isSetAnnotations()) {
        optionals.set(13);
      }
      if (struct.isSetDepth()) {
        optionals.set(14);
      }
      if (struct.isSetNextSpanId()) {
        optionals.set(15);
      }
      if (struct.isSetDestinationId()) {
        optionals.set(16);
      }
      if (struct.isSetDestinationAddress()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetAgentKey()) {
        struct.agentKey.write(oprot);
      }
      if (struct.isSetParentServiceType()) {
        oprot.writeI16(struct.parentServiceType);
      }
      if (struct.isSetParentEndPoint()) {
        oprot.writeString(struct.parentEndPoint);
      }
      if (struct.isSetTraceAgentId()) {
        oprot.writeString(struct.traceAgentId);
      }
      if (struct.isSetTraceAgentStartTime()) {
        oprot.writeI64(struct.traceAgentStartTime);
      }
      if (struct.isSetTraceTransactionSequence()) {
        oprot.writeI64(struct.traceTransactionSequence);
      }
      if (struct.isSetSpanId()) {
        oprot.writeI32(struct.spanId);
      }
      if (struct.isSetSequence()) {
        oprot.writeI16(struct.sequence);
      }
      if (struct.isSetStartElapsed()) {
        oprot.writeI32(struct.startElapsed);
      }
      if (struct.isSetEndElapsed()) {
        oprot.writeI32(struct.endElapsed);
      }
      if (struct.isSetRpc()) {
        oprot.writeString(struct.rpc);
      }
      if (struct.isSetServiceType()) {
        oprot.writeI16(struct.serviceType);
      }
      if (struct.isSetEndPoint()) {
        oprot.writeString(struct.endPoint);
      }
      if (struct.isSetAnnotations()) {
        {
          oprot.writeI32(struct.annotations.size());
          for (Annotation _iter8 : struct.annotations)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetDepth()) {
        oprot.writeI32(struct.depth);
      }
      if (struct.isSetNextSpanId()) {
        oprot.writeI32(struct.nextSpanId);
      }
      if (struct.isSetDestinationId()) {
        oprot.writeString(struct.destinationId);
      }
      if (struct.isSetDestinationAddress()) {
        {
          oprot.writeI32(struct.destinationAddress.size());
          for (String _iter9 : struct.destinationAddress)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpanEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.agentKey = new AgentKey();
        struct.agentKey.read(iprot);
        struct.setAgentKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentServiceType = iprot.readI16();
        struct.setParentServiceTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentEndPoint = iprot.readString();
        struct.setParentEndPointIsSet(true);
      }
      if (incoming.get(3)) {
        struct.traceAgentId = iprot.readString();
        struct.setTraceAgentIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.traceAgentStartTime = iprot.readI64();
        struct.setTraceAgentStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.traceTransactionSequence = iprot.readI64();
        struct.setTraceTransactionSequenceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.spanId = iprot.readI32();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sequence = iprot.readI16();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.startElapsed = iprot.readI32();
        struct.setStartElapsedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.endElapsed = iprot.readI32();
        struct.setEndElapsedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rpc = iprot.readString();
        struct.setRpcIsSet(true);
      }
      if (incoming.get(11)) {
        struct.serviceType = iprot.readI16();
        struct.setServiceTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.endPoint = iprot.readString();
        struct.setEndPointIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.annotations = new ArrayList<Annotation>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            Annotation _elem12; // required
            _elem12 = new Annotation();
            _elem12.read(iprot);
            struct.annotations.add(_elem12);
          }
        }
        struct.setAnnotationsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.depth = iprot.readI32();
        struct.setDepthIsSet(true);
      }
      if (incoming.get(15)) {
        struct.nextSpanId = iprot.readI32();
        struct.setNextSpanIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.destinationId = iprot.readString();
        struct.setDestinationIdIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.destinationAddress = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.destinationAddress.add(_elem15);
          }
        }
        struct.setDestinationAddressIsSet(true);
      }
    }
  }

}

