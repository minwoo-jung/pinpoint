/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nhn.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TStatWithSerialCollector implements org.apache.thrift.TBase<TStatWithSerialCollector, TStatWithSerialCollector._Fields>, java.io.Serializable, Cloneable, Comparable<TStatWithSerialCollector> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStatWithSerialCollector");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalUsed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_TOTAL_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryTotalMax", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapUsed", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryHeapMax", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapUsed", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_NON_HEAP_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryNonHeapMax", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_CODE_CACHE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsCodeCacheUsage", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_EDEN_SPACE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsEdenSpaceUsage", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsSurvivorSpaceUsage", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_PERM_GEN_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsPermGenUsage", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField JVM_MEMORY_POOLS_TENURED_GEN_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMemoryPoolsTenuredGenUsage", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField JVM_GC_COPY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcCopyCount", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField JVM_GC_COPY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcCopyTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField JVM_GC_MARK_SWEEP_COMPACT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcMarkSweepCompactCount", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField JVM_GC_MARK_SWEEP_COMPACT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmGcMarkSweepCompactTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TStatWithSerialCollectorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TStatWithSerialCollectorTupleSchemeFactory());
  }

  private String agentId; // required
  private long timestamp; // required
  private long jvmMemoryTotalUsed; // required
  private long jvmMemoryTotalMax; // required
  private long jvmMemoryHeapUsed; // required
  private long jvmMemoryHeapMax; // required
  private long jvmMemoryNonHeapUsed; // required
  private long jvmMemoryNonHeapMax; // required
  private long jvmMemoryPoolsCodeCacheUsage; // required
  private long jvmMemoryPoolsEdenSpaceUsage; // required
  private long jvmMemoryPoolsSurvivorSpaceUsage; // required
  private long jvmMemoryPoolsPermGenUsage; // required
  private long jvmMemoryPoolsTenuredGenUsage; // required
  private long jvmGcCopyCount; // required
  private long jvmGcCopyTime; // required
  private long jvmGcMarkSweepCompactCount; // required
  private long jvmGcMarkSweepCompactTime; // required
  private String metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    TIMESTAMP((short)2, "timestamp"),
    JVM_MEMORY_TOTAL_USED((short)3, "jvmMemoryTotalUsed"),
    JVM_MEMORY_TOTAL_MAX((short)4, "jvmMemoryTotalMax"),
    JVM_MEMORY_HEAP_USED((short)5, "jvmMemoryHeapUsed"),
    JVM_MEMORY_HEAP_MAX((short)6, "jvmMemoryHeapMax"),
    JVM_MEMORY_NON_HEAP_USED((short)7, "jvmMemoryNonHeapUsed"),
    JVM_MEMORY_NON_HEAP_MAX((short)8, "jvmMemoryNonHeapMax"),
    JVM_MEMORY_POOLS_CODE_CACHE_USAGE((short)9, "jvmMemoryPoolsCodeCacheUsage"),
    JVM_MEMORY_POOLS_EDEN_SPACE_USAGE((short)10, "jvmMemoryPoolsEdenSpaceUsage"),
    JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE((short)11, "jvmMemoryPoolsSurvivorSpaceUsage"),
    JVM_MEMORY_POOLS_PERM_GEN_USAGE((short)12, "jvmMemoryPoolsPermGenUsage"),
    JVM_MEMORY_POOLS_TENURED_GEN_USAGE((short)13, "jvmMemoryPoolsTenuredGenUsage"),
    JVM_GC_COPY_COUNT((short)14, "jvmGcCopyCount"),
    JVM_GC_COPY_TIME((short)15, "jvmGcCopyTime"),
    JVM_GC_MARK_SWEEP_COMPACT_COUNT((short)16, "jvmGcMarkSweepCompactCount"),
    JVM_GC_MARK_SWEEP_COMPACT_TIME((short)17, "jvmGcMarkSweepCompactTime"),
    METADATA((short)200, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // JVM_MEMORY_TOTAL_USED
          return JVM_MEMORY_TOTAL_USED;
        case 4: // JVM_MEMORY_TOTAL_MAX
          return JVM_MEMORY_TOTAL_MAX;
        case 5: // JVM_MEMORY_HEAP_USED
          return JVM_MEMORY_HEAP_USED;
        case 6: // JVM_MEMORY_HEAP_MAX
          return JVM_MEMORY_HEAP_MAX;
        case 7: // JVM_MEMORY_NON_HEAP_USED
          return JVM_MEMORY_NON_HEAP_USED;
        case 8: // JVM_MEMORY_NON_HEAP_MAX
          return JVM_MEMORY_NON_HEAP_MAX;
        case 9: // JVM_MEMORY_POOLS_CODE_CACHE_USAGE
          return JVM_MEMORY_POOLS_CODE_CACHE_USAGE;
        case 10: // JVM_MEMORY_POOLS_EDEN_SPACE_USAGE
          return JVM_MEMORY_POOLS_EDEN_SPACE_USAGE;
        case 11: // JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE
          return JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE;
        case 12: // JVM_MEMORY_POOLS_PERM_GEN_USAGE
          return JVM_MEMORY_POOLS_PERM_GEN_USAGE;
        case 13: // JVM_MEMORY_POOLS_TENURED_GEN_USAGE
          return JVM_MEMORY_POOLS_TENURED_GEN_USAGE;
        case 14: // JVM_GC_COPY_COUNT
          return JVM_GC_COPY_COUNT;
        case 15: // JVM_GC_COPY_TIME
          return JVM_GC_COPY_TIME;
        case 16: // JVM_GC_MARK_SWEEP_COMPACT_COUNT
          return JVM_GC_MARK_SWEEP_COMPACT_COUNT;
        case 17: // JVM_GC_MARK_SWEEP_COMPACT_TIME
          return JVM_GC_MARK_SWEEP_COMPACT_TIME;
        case 200: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __JVMMEMORYTOTALUSED_ISSET_ID = 1;
  private static final int __JVMMEMORYTOTALMAX_ISSET_ID = 2;
  private static final int __JVMMEMORYHEAPUSED_ISSET_ID = 3;
  private static final int __JVMMEMORYHEAPMAX_ISSET_ID = 4;
  private static final int __JVMMEMORYNONHEAPUSED_ISSET_ID = 5;
  private static final int __JVMMEMORYNONHEAPMAX_ISSET_ID = 6;
  private static final int __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID = 7;
  private static final int __JVMMEMORYPOOLSEDENSPACEUSAGE_ISSET_ID = 8;
  private static final int __JVMMEMORYPOOLSSURVIVORSPACEUSAGE_ISSET_ID = 9;
  private static final int __JVMMEMORYPOOLSPERMGENUSAGE_ISSET_ID = 10;
  private static final int __JVMMEMORYPOOLSTENUREDGENUSAGE_ISSET_ID = 11;
  private static final int __JVMGCCOPYCOUNT_ISSET_ID = 12;
  private static final int __JVMGCCOPYTIME_ISSET_ID = 13;
  private static final int __JVMGCMARKSWEEPCOMPACTCOUNT_ISSET_ID = 14;
  private static final int __JVMGCMARKSWEEPCOMPACTTIME_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_TOTAL_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryTotalMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_USED, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_NON_HEAP_MAX, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryNonHeapMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_CODE_CACHE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsCodeCacheUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_EDEN_SPACE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsEdenSpaceUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsSurvivorSpaceUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_PERM_GEN_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsPermGenUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_MEMORY_POOLS_TENURED_GEN_USAGE, new org.apache.thrift.meta_data.FieldMetaData("jvmMemoryPoolsTenuredGenUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_COPY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("jvmGcCopyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_COPY_TIME, new org.apache.thrift.meta_data.FieldMetaData("jvmGcCopyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_MARK_SWEEP_COMPACT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("jvmGcMarkSweepCompactCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_GC_MARK_SWEEP_COMPACT_TIME, new org.apache.thrift.meta_data.FieldMetaData("jvmGcMarkSweepCompactTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStatWithSerialCollector.class, metaDataMap);
  }

  public TStatWithSerialCollector() {
  }

  public TStatWithSerialCollector(
    String agentId,
    long timestamp,
    long jvmMemoryTotalUsed,
    long jvmMemoryTotalMax,
    long jvmMemoryHeapUsed,
    long jvmMemoryHeapMax,
    long jvmMemoryNonHeapUsed,
    long jvmMemoryNonHeapMax,
    long jvmMemoryPoolsCodeCacheUsage,
    long jvmMemoryPoolsEdenSpaceUsage,
    long jvmMemoryPoolsSurvivorSpaceUsage,
    long jvmMemoryPoolsPermGenUsage,
    long jvmMemoryPoolsTenuredGenUsage,
    long jvmGcCopyCount,
    long jvmGcCopyTime,
    long jvmGcMarkSweepCompactCount,
    long jvmGcMarkSweepCompactTime)
  {
    this();
    this.agentId = agentId;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.jvmMemoryTotalUsed = jvmMemoryTotalUsed;
    setJvmMemoryTotalUsedIsSet(true);
    this.jvmMemoryTotalMax = jvmMemoryTotalMax;
    setJvmMemoryTotalMaxIsSet(true);
    this.jvmMemoryHeapUsed = jvmMemoryHeapUsed;
    setJvmMemoryHeapUsedIsSet(true);
    this.jvmMemoryHeapMax = jvmMemoryHeapMax;
    setJvmMemoryHeapMaxIsSet(true);
    this.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed;
    setJvmMemoryNonHeapUsedIsSet(true);
    this.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax;
    setJvmMemoryNonHeapMaxIsSet(true);
    this.jvmMemoryPoolsCodeCacheUsage = jvmMemoryPoolsCodeCacheUsage;
    setJvmMemoryPoolsCodeCacheUsageIsSet(true);
    this.jvmMemoryPoolsEdenSpaceUsage = jvmMemoryPoolsEdenSpaceUsage;
    setJvmMemoryPoolsEdenSpaceUsageIsSet(true);
    this.jvmMemoryPoolsSurvivorSpaceUsage = jvmMemoryPoolsSurvivorSpaceUsage;
    setJvmMemoryPoolsSurvivorSpaceUsageIsSet(true);
    this.jvmMemoryPoolsPermGenUsage = jvmMemoryPoolsPermGenUsage;
    setJvmMemoryPoolsPermGenUsageIsSet(true);
    this.jvmMemoryPoolsTenuredGenUsage = jvmMemoryPoolsTenuredGenUsage;
    setJvmMemoryPoolsTenuredGenUsageIsSet(true);
    this.jvmGcCopyCount = jvmGcCopyCount;
    setJvmGcCopyCountIsSet(true);
    this.jvmGcCopyTime = jvmGcCopyTime;
    setJvmGcCopyTimeIsSet(true);
    this.jvmGcMarkSweepCompactCount = jvmGcMarkSweepCompactCount;
    setJvmGcMarkSweepCompactCountIsSet(true);
    this.jvmGcMarkSweepCompactTime = jvmGcMarkSweepCompactTime;
    setJvmGcMarkSweepCompactTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStatWithSerialCollector(TStatWithSerialCollector other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    this.timestamp = other.timestamp;
    this.jvmMemoryTotalUsed = other.jvmMemoryTotalUsed;
    this.jvmMemoryTotalMax = other.jvmMemoryTotalMax;
    this.jvmMemoryHeapUsed = other.jvmMemoryHeapUsed;
    this.jvmMemoryHeapMax = other.jvmMemoryHeapMax;
    this.jvmMemoryNonHeapUsed = other.jvmMemoryNonHeapUsed;
    this.jvmMemoryNonHeapMax = other.jvmMemoryNonHeapMax;
    this.jvmMemoryPoolsCodeCacheUsage = other.jvmMemoryPoolsCodeCacheUsage;
    this.jvmMemoryPoolsEdenSpaceUsage = other.jvmMemoryPoolsEdenSpaceUsage;
    this.jvmMemoryPoolsSurvivorSpaceUsage = other.jvmMemoryPoolsSurvivorSpaceUsage;
    this.jvmMemoryPoolsPermGenUsage = other.jvmMemoryPoolsPermGenUsage;
    this.jvmMemoryPoolsTenuredGenUsage = other.jvmMemoryPoolsTenuredGenUsage;
    this.jvmGcCopyCount = other.jvmGcCopyCount;
    this.jvmGcCopyTime = other.jvmGcCopyTime;
    this.jvmGcMarkSweepCompactCount = other.jvmGcMarkSweepCompactCount;
    this.jvmGcMarkSweepCompactTime = other.jvmGcMarkSweepCompactTime;
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
  }

  public TStatWithSerialCollector deepCopy() {
    return new TStatWithSerialCollector(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setJvmMemoryTotalUsedIsSet(false);
    this.jvmMemoryTotalUsed = 0;
    setJvmMemoryTotalMaxIsSet(false);
    this.jvmMemoryTotalMax = 0;
    setJvmMemoryHeapUsedIsSet(false);
    this.jvmMemoryHeapUsed = 0;
    setJvmMemoryHeapMaxIsSet(false);
    this.jvmMemoryHeapMax = 0;
    setJvmMemoryNonHeapUsedIsSet(false);
    this.jvmMemoryNonHeapUsed = 0;
    setJvmMemoryNonHeapMaxIsSet(false);
    this.jvmMemoryNonHeapMax = 0;
    setJvmMemoryPoolsCodeCacheUsageIsSet(false);
    this.jvmMemoryPoolsCodeCacheUsage = 0;
    setJvmMemoryPoolsEdenSpaceUsageIsSet(false);
    this.jvmMemoryPoolsEdenSpaceUsage = 0;
    setJvmMemoryPoolsSurvivorSpaceUsageIsSet(false);
    this.jvmMemoryPoolsSurvivorSpaceUsage = 0;
    setJvmMemoryPoolsPermGenUsageIsSet(false);
    this.jvmMemoryPoolsPermGenUsage = 0;
    setJvmMemoryPoolsTenuredGenUsageIsSet(false);
    this.jvmMemoryPoolsTenuredGenUsage = 0;
    setJvmGcCopyCountIsSet(false);
    this.jvmGcCopyCount = 0;
    setJvmGcCopyTimeIsSet(false);
    this.jvmGcCopyTime = 0;
    setJvmGcMarkSweepCompactCountIsSet(false);
    this.jvmGcMarkSweepCompactCount = 0;
    setJvmGcMarkSweepCompactTimeIsSet(false);
    this.jvmGcMarkSweepCompactTime = 0;
    this.metadata = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getJvmMemoryTotalUsed() {
    return this.jvmMemoryTotalUsed;
  }

  public void setJvmMemoryTotalUsed(long jvmMemoryTotalUsed) {
    this.jvmMemoryTotalUsed = jvmMemoryTotalUsed;
    setJvmMemoryTotalUsedIsSet(true);
  }

  public void unsetJvmMemoryTotalUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID);
  }

  public void setJvmMemoryTotalUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALUSED_ISSET_ID, value);
  }

  public long getJvmMemoryTotalMax() {
    return this.jvmMemoryTotalMax;
  }

  public void setJvmMemoryTotalMax(long jvmMemoryTotalMax) {
    this.jvmMemoryTotalMax = jvmMemoryTotalMax;
    setJvmMemoryTotalMaxIsSet(true);
  }

  public void unsetJvmMemoryTotalMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryTotalMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryTotalMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID);
  }

  public void setJvmMemoryTotalMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYTOTALMAX_ISSET_ID, value);
  }

  public long getJvmMemoryHeapUsed() {
    return this.jvmMemoryHeapUsed;
  }

  public void setJvmMemoryHeapUsed(long jvmMemoryHeapUsed) {
    this.jvmMemoryHeapUsed = jvmMemoryHeapUsed;
    setJvmMemoryHeapUsedIsSet(true);
  }

  public void unsetJvmMemoryHeapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID);
  }

  public void setJvmMemoryHeapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPUSED_ISSET_ID, value);
  }

  public long getJvmMemoryHeapMax() {
    return this.jvmMemoryHeapMax;
  }

  public void setJvmMemoryHeapMax(long jvmMemoryHeapMax) {
    this.jvmMemoryHeapMax = jvmMemoryHeapMax;
    setJvmMemoryHeapMaxIsSet(true);
  }

  public void unsetJvmMemoryHeapMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryHeapMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID);
  }

  public void setJvmMemoryHeapMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYHEAPMAX_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapUsed() {
    return this.jvmMemoryNonHeapUsed;
  }

  public void setJvmMemoryNonHeapUsed(long jvmMemoryNonHeapUsed) {
    this.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed;
    setJvmMemoryNonHeapUsedIsSet(true);
  }

  public void unsetJvmMemoryNonHeapUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID);
  }

  public void setJvmMemoryNonHeapUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPUSED_ISSET_ID, value);
  }

  public long getJvmMemoryNonHeapMax() {
    return this.jvmMemoryNonHeapMax;
  }

  public void setJvmMemoryNonHeapMax(long jvmMemoryNonHeapMax) {
    this.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax;
    setJvmMemoryNonHeapMaxIsSet(true);
  }

  public void unsetJvmMemoryNonHeapMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID);
  }

  /** Returns true if field jvmMemoryNonHeapMax is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryNonHeapMax() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID);
  }

  public void setJvmMemoryNonHeapMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYNONHEAPMAX_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsCodeCacheUsage() {
    return this.jvmMemoryPoolsCodeCacheUsage;
  }

  public void setJvmMemoryPoolsCodeCacheUsage(long jvmMemoryPoolsCodeCacheUsage) {
    this.jvmMemoryPoolsCodeCacheUsage = jvmMemoryPoolsCodeCacheUsage;
    setJvmMemoryPoolsCodeCacheUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsCodeCacheUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsCodeCacheUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsCodeCacheUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsCodeCacheUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSCODECACHEUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsEdenSpaceUsage() {
    return this.jvmMemoryPoolsEdenSpaceUsage;
  }

  public void setJvmMemoryPoolsEdenSpaceUsage(long jvmMemoryPoolsEdenSpaceUsage) {
    this.jvmMemoryPoolsEdenSpaceUsage = jvmMemoryPoolsEdenSpaceUsage;
    setJvmMemoryPoolsEdenSpaceUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsEdenSpaceUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSEDENSPACEUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsEdenSpaceUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsEdenSpaceUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSEDENSPACEUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsEdenSpaceUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSEDENSPACEUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsSurvivorSpaceUsage() {
    return this.jvmMemoryPoolsSurvivorSpaceUsage;
  }

  public void setJvmMemoryPoolsSurvivorSpaceUsage(long jvmMemoryPoolsSurvivorSpaceUsage) {
    this.jvmMemoryPoolsSurvivorSpaceUsage = jvmMemoryPoolsSurvivorSpaceUsage;
    setJvmMemoryPoolsSurvivorSpaceUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsSurvivorSpaceUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSSURVIVORSPACEUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsSurvivorSpaceUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsSurvivorSpaceUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSSURVIVORSPACEUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsSurvivorSpaceUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSSURVIVORSPACEUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsPermGenUsage() {
    return this.jvmMemoryPoolsPermGenUsage;
  }

  public void setJvmMemoryPoolsPermGenUsage(long jvmMemoryPoolsPermGenUsage) {
    this.jvmMemoryPoolsPermGenUsage = jvmMemoryPoolsPermGenUsage;
    setJvmMemoryPoolsPermGenUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsPermGenUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSPERMGENUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsPermGenUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsPermGenUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSPERMGENUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsPermGenUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSPERMGENUSAGE_ISSET_ID, value);
  }

  public long getJvmMemoryPoolsTenuredGenUsage() {
    return this.jvmMemoryPoolsTenuredGenUsage;
  }

  public void setJvmMemoryPoolsTenuredGenUsage(long jvmMemoryPoolsTenuredGenUsage) {
    this.jvmMemoryPoolsTenuredGenUsage = jvmMemoryPoolsTenuredGenUsage;
    setJvmMemoryPoolsTenuredGenUsageIsSet(true);
  }

  public void unsetJvmMemoryPoolsTenuredGenUsage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMEMORYPOOLSTENUREDGENUSAGE_ISSET_ID);
  }

  /** Returns true if field jvmMemoryPoolsTenuredGenUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMemoryPoolsTenuredGenUsage() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMEMORYPOOLSTENUREDGENUSAGE_ISSET_ID);
  }

  public void setJvmMemoryPoolsTenuredGenUsageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMEMORYPOOLSTENUREDGENUSAGE_ISSET_ID, value);
  }

  public long getJvmGcCopyCount() {
    return this.jvmGcCopyCount;
  }

  public void setJvmGcCopyCount(long jvmGcCopyCount) {
    this.jvmGcCopyCount = jvmGcCopyCount;
    setJvmGcCopyCountIsSet(true);
  }

  public void unsetJvmGcCopyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCCOPYCOUNT_ISSET_ID);
  }

  /** Returns true if field jvmGcCopyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcCopyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCCOPYCOUNT_ISSET_ID);
  }

  public void setJvmGcCopyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCCOPYCOUNT_ISSET_ID, value);
  }

  public long getJvmGcCopyTime() {
    return this.jvmGcCopyTime;
  }

  public void setJvmGcCopyTime(long jvmGcCopyTime) {
    this.jvmGcCopyTime = jvmGcCopyTime;
    setJvmGcCopyTimeIsSet(true);
  }

  public void unsetJvmGcCopyTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCCOPYTIME_ISSET_ID);
  }

  /** Returns true if field jvmGcCopyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcCopyTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCCOPYTIME_ISSET_ID);
  }

  public void setJvmGcCopyTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCCOPYTIME_ISSET_ID, value);
  }

  public long getJvmGcMarkSweepCompactCount() {
    return this.jvmGcMarkSweepCompactCount;
  }

  public void setJvmGcMarkSweepCompactCount(long jvmGcMarkSweepCompactCount) {
    this.jvmGcMarkSweepCompactCount = jvmGcMarkSweepCompactCount;
    setJvmGcMarkSweepCompactCountIsSet(true);
  }

  public void unsetJvmGcMarkSweepCompactCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCMARKSWEEPCOMPACTCOUNT_ISSET_ID);
  }

  /** Returns true if field jvmGcMarkSweepCompactCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcMarkSweepCompactCount() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCMARKSWEEPCOMPACTCOUNT_ISSET_ID);
  }

  public void setJvmGcMarkSweepCompactCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCMARKSWEEPCOMPACTCOUNT_ISSET_ID, value);
  }

  public long getJvmGcMarkSweepCompactTime() {
    return this.jvmGcMarkSweepCompactTime;
  }

  public void setJvmGcMarkSweepCompactTime(long jvmGcMarkSweepCompactTime) {
    this.jvmGcMarkSweepCompactTime = jvmGcMarkSweepCompactTime;
    setJvmGcMarkSweepCompactTimeIsSet(true);
  }

  public void unsetJvmGcMarkSweepCompactTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMGCMARKSWEEPCOMPACTTIME_ISSET_ID);
  }

  /** Returns true if field jvmGcMarkSweepCompactTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmGcMarkSweepCompactTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMGCMARKSWEEPCOMPACTTIME_ISSET_ID);
  }

  public void setJvmGcMarkSweepCompactTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMGCMARKSWEEPCOMPACTTIME_ISSET_ID, value);
  }

  public String getMetadata() {
    return this.metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_USED:
      if (value == null) {
        unsetJvmMemoryTotalUsed();
      } else {
        setJvmMemoryTotalUsed((Long)value);
      }
      break;

    case JVM_MEMORY_TOTAL_MAX:
      if (value == null) {
        unsetJvmMemoryTotalMax();
      } else {
        setJvmMemoryTotalMax((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_USED:
      if (value == null) {
        unsetJvmMemoryHeapUsed();
      } else {
        setJvmMemoryHeapUsed((Long)value);
      }
      break;

    case JVM_MEMORY_HEAP_MAX:
      if (value == null) {
        unsetJvmMemoryHeapMax();
      } else {
        setJvmMemoryHeapMax((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_USED:
      if (value == null) {
        unsetJvmMemoryNonHeapUsed();
      } else {
        setJvmMemoryNonHeapUsed((Long)value);
      }
      break;

    case JVM_MEMORY_NON_HEAP_MAX:
      if (value == null) {
        unsetJvmMemoryNonHeapMax();
      } else {
        setJvmMemoryNonHeapMax((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_CODE_CACHE_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsCodeCacheUsage();
      } else {
        setJvmMemoryPoolsCodeCacheUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_EDEN_SPACE_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsEdenSpaceUsage();
      } else {
        setJvmMemoryPoolsEdenSpaceUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsSurvivorSpaceUsage();
      } else {
        setJvmMemoryPoolsSurvivorSpaceUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_PERM_GEN_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsPermGenUsage();
      } else {
        setJvmMemoryPoolsPermGenUsage((Long)value);
      }
      break;

    case JVM_MEMORY_POOLS_TENURED_GEN_USAGE:
      if (value == null) {
        unsetJvmMemoryPoolsTenuredGenUsage();
      } else {
        setJvmMemoryPoolsTenuredGenUsage((Long)value);
      }
      break;

    case JVM_GC_COPY_COUNT:
      if (value == null) {
        unsetJvmGcCopyCount();
      } else {
        setJvmGcCopyCount((Long)value);
      }
      break;

    case JVM_GC_COPY_TIME:
      if (value == null) {
        unsetJvmGcCopyTime();
      } else {
        setJvmGcCopyTime((Long)value);
      }
      break;

    case JVM_GC_MARK_SWEEP_COMPACT_COUNT:
      if (value == null) {
        unsetJvmGcMarkSweepCompactCount();
      } else {
        setJvmGcMarkSweepCompactCount((Long)value);
      }
      break;

    case JVM_GC_MARK_SWEEP_COMPACT_TIME:
      if (value == null) {
        unsetJvmGcMarkSweepCompactTime();
      } else {
        setJvmGcMarkSweepCompactTime((Long)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case JVM_MEMORY_TOTAL_USED:
      return Long.valueOf(getJvmMemoryTotalUsed());

    case JVM_MEMORY_TOTAL_MAX:
      return Long.valueOf(getJvmMemoryTotalMax());

    case JVM_MEMORY_HEAP_USED:
      return Long.valueOf(getJvmMemoryHeapUsed());

    case JVM_MEMORY_HEAP_MAX:
      return Long.valueOf(getJvmMemoryHeapMax());

    case JVM_MEMORY_NON_HEAP_USED:
      return Long.valueOf(getJvmMemoryNonHeapUsed());

    case JVM_MEMORY_NON_HEAP_MAX:
      return Long.valueOf(getJvmMemoryNonHeapMax());

    case JVM_MEMORY_POOLS_CODE_CACHE_USAGE:
      return Long.valueOf(getJvmMemoryPoolsCodeCacheUsage());

    case JVM_MEMORY_POOLS_EDEN_SPACE_USAGE:
      return Long.valueOf(getJvmMemoryPoolsEdenSpaceUsage());

    case JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE:
      return Long.valueOf(getJvmMemoryPoolsSurvivorSpaceUsage());

    case JVM_MEMORY_POOLS_PERM_GEN_USAGE:
      return Long.valueOf(getJvmMemoryPoolsPermGenUsage());

    case JVM_MEMORY_POOLS_TENURED_GEN_USAGE:
      return Long.valueOf(getJvmMemoryPoolsTenuredGenUsage());

    case JVM_GC_COPY_COUNT:
      return Long.valueOf(getJvmGcCopyCount());

    case JVM_GC_COPY_TIME:
      return Long.valueOf(getJvmGcCopyTime());

    case JVM_GC_MARK_SWEEP_COMPACT_COUNT:
      return Long.valueOf(getJvmGcMarkSweepCompactCount());

    case JVM_GC_MARK_SWEEP_COMPACT_TIME:
      return Long.valueOf(getJvmGcMarkSweepCompactTime());

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case TIMESTAMP:
      return isSetTimestamp();
    case JVM_MEMORY_TOTAL_USED:
      return isSetJvmMemoryTotalUsed();
    case JVM_MEMORY_TOTAL_MAX:
      return isSetJvmMemoryTotalMax();
    case JVM_MEMORY_HEAP_USED:
      return isSetJvmMemoryHeapUsed();
    case JVM_MEMORY_HEAP_MAX:
      return isSetJvmMemoryHeapMax();
    case JVM_MEMORY_NON_HEAP_USED:
      return isSetJvmMemoryNonHeapUsed();
    case JVM_MEMORY_NON_HEAP_MAX:
      return isSetJvmMemoryNonHeapMax();
    case JVM_MEMORY_POOLS_CODE_CACHE_USAGE:
      return isSetJvmMemoryPoolsCodeCacheUsage();
    case JVM_MEMORY_POOLS_EDEN_SPACE_USAGE:
      return isSetJvmMemoryPoolsEdenSpaceUsage();
    case JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE:
      return isSetJvmMemoryPoolsSurvivorSpaceUsage();
    case JVM_MEMORY_POOLS_PERM_GEN_USAGE:
      return isSetJvmMemoryPoolsPermGenUsage();
    case JVM_MEMORY_POOLS_TENURED_GEN_USAGE:
      return isSetJvmMemoryPoolsTenuredGenUsage();
    case JVM_GC_COPY_COUNT:
      return isSetJvmGcCopyCount();
    case JVM_GC_COPY_TIME:
      return isSetJvmGcCopyTime();
    case JVM_GC_MARK_SWEEP_COMPACT_COUNT:
      return isSetJvmGcMarkSweepCompactCount();
    case JVM_GC_MARK_SWEEP_COMPACT_TIME:
      return isSetJvmGcMarkSweepCompactTime();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TStatWithSerialCollector)
      return this.equals((TStatWithSerialCollector)that);
    return false;
  }

  public boolean equals(TStatWithSerialCollector that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_jvmMemoryTotalUsed = true;
    boolean that_present_jvmMemoryTotalUsed = true;
    if (this_present_jvmMemoryTotalUsed || that_present_jvmMemoryTotalUsed) {
      if (!(this_present_jvmMemoryTotalUsed && that_present_jvmMemoryTotalUsed))
        return false;
      if (this.jvmMemoryTotalUsed != that.jvmMemoryTotalUsed)
        return false;
    }

    boolean this_present_jvmMemoryTotalMax = true;
    boolean that_present_jvmMemoryTotalMax = true;
    if (this_present_jvmMemoryTotalMax || that_present_jvmMemoryTotalMax) {
      if (!(this_present_jvmMemoryTotalMax && that_present_jvmMemoryTotalMax))
        return false;
      if (this.jvmMemoryTotalMax != that.jvmMemoryTotalMax)
        return false;
    }

    boolean this_present_jvmMemoryHeapUsed = true;
    boolean that_present_jvmMemoryHeapUsed = true;
    if (this_present_jvmMemoryHeapUsed || that_present_jvmMemoryHeapUsed) {
      if (!(this_present_jvmMemoryHeapUsed && that_present_jvmMemoryHeapUsed))
        return false;
      if (this.jvmMemoryHeapUsed != that.jvmMemoryHeapUsed)
        return false;
    }

    boolean this_present_jvmMemoryHeapMax = true;
    boolean that_present_jvmMemoryHeapMax = true;
    if (this_present_jvmMemoryHeapMax || that_present_jvmMemoryHeapMax) {
      if (!(this_present_jvmMemoryHeapMax && that_present_jvmMemoryHeapMax))
        return false;
      if (this.jvmMemoryHeapMax != that.jvmMemoryHeapMax)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapUsed = true;
    boolean that_present_jvmMemoryNonHeapUsed = true;
    if (this_present_jvmMemoryNonHeapUsed || that_present_jvmMemoryNonHeapUsed) {
      if (!(this_present_jvmMemoryNonHeapUsed && that_present_jvmMemoryNonHeapUsed))
        return false;
      if (this.jvmMemoryNonHeapUsed != that.jvmMemoryNonHeapUsed)
        return false;
    }

    boolean this_present_jvmMemoryNonHeapMax = true;
    boolean that_present_jvmMemoryNonHeapMax = true;
    if (this_present_jvmMemoryNonHeapMax || that_present_jvmMemoryNonHeapMax) {
      if (!(this_present_jvmMemoryNonHeapMax && that_present_jvmMemoryNonHeapMax))
        return false;
      if (this.jvmMemoryNonHeapMax != that.jvmMemoryNonHeapMax)
        return false;
    }

    boolean this_present_jvmMemoryPoolsCodeCacheUsage = true;
    boolean that_present_jvmMemoryPoolsCodeCacheUsage = true;
    if (this_present_jvmMemoryPoolsCodeCacheUsage || that_present_jvmMemoryPoolsCodeCacheUsage) {
      if (!(this_present_jvmMemoryPoolsCodeCacheUsage && that_present_jvmMemoryPoolsCodeCacheUsage))
        return false;
      if (this.jvmMemoryPoolsCodeCacheUsage != that.jvmMemoryPoolsCodeCacheUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsEdenSpaceUsage = true;
    boolean that_present_jvmMemoryPoolsEdenSpaceUsage = true;
    if (this_present_jvmMemoryPoolsEdenSpaceUsage || that_present_jvmMemoryPoolsEdenSpaceUsage) {
      if (!(this_present_jvmMemoryPoolsEdenSpaceUsage && that_present_jvmMemoryPoolsEdenSpaceUsage))
        return false;
      if (this.jvmMemoryPoolsEdenSpaceUsage != that.jvmMemoryPoolsEdenSpaceUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsSurvivorSpaceUsage = true;
    boolean that_present_jvmMemoryPoolsSurvivorSpaceUsage = true;
    if (this_present_jvmMemoryPoolsSurvivorSpaceUsage || that_present_jvmMemoryPoolsSurvivorSpaceUsage) {
      if (!(this_present_jvmMemoryPoolsSurvivorSpaceUsage && that_present_jvmMemoryPoolsSurvivorSpaceUsage))
        return false;
      if (this.jvmMemoryPoolsSurvivorSpaceUsage != that.jvmMemoryPoolsSurvivorSpaceUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsPermGenUsage = true;
    boolean that_present_jvmMemoryPoolsPermGenUsage = true;
    if (this_present_jvmMemoryPoolsPermGenUsage || that_present_jvmMemoryPoolsPermGenUsage) {
      if (!(this_present_jvmMemoryPoolsPermGenUsage && that_present_jvmMemoryPoolsPermGenUsage))
        return false;
      if (this.jvmMemoryPoolsPermGenUsage != that.jvmMemoryPoolsPermGenUsage)
        return false;
    }

    boolean this_present_jvmMemoryPoolsTenuredGenUsage = true;
    boolean that_present_jvmMemoryPoolsTenuredGenUsage = true;
    if (this_present_jvmMemoryPoolsTenuredGenUsage || that_present_jvmMemoryPoolsTenuredGenUsage) {
      if (!(this_present_jvmMemoryPoolsTenuredGenUsage && that_present_jvmMemoryPoolsTenuredGenUsage))
        return false;
      if (this.jvmMemoryPoolsTenuredGenUsage != that.jvmMemoryPoolsTenuredGenUsage)
        return false;
    }

    boolean this_present_jvmGcCopyCount = true;
    boolean that_present_jvmGcCopyCount = true;
    if (this_present_jvmGcCopyCount || that_present_jvmGcCopyCount) {
      if (!(this_present_jvmGcCopyCount && that_present_jvmGcCopyCount))
        return false;
      if (this.jvmGcCopyCount != that.jvmGcCopyCount)
        return false;
    }

    boolean this_present_jvmGcCopyTime = true;
    boolean that_present_jvmGcCopyTime = true;
    if (this_present_jvmGcCopyTime || that_present_jvmGcCopyTime) {
      if (!(this_present_jvmGcCopyTime && that_present_jvmGcCopyTime))
        return false;
      if (this.jvmGcCopyTime != that.jvmGcCopyTime)
        return false;
    }

    boolean this_present_jvmGcMarkSweepCompactCount = true;
    boolean that_present_jvmGcMarkSweepCompactCount = true;
    if (this_present_jvmGcMarkSweepCompactCount || that_present_jvmGcMarkSweepCompactCount) {
      if (!(this_present_jvmGcMarkSweepCompactCount && that_present_jvmGcMarkSweepCompactCount))
        return false;
      if (this.jvmGcMarkSweepCompactCount != that.jvmGcMarkSweepCompactCount)
        return false;
    }

    boolean this_present_jvmGcMarkSweepCompactTime = true;
    boolean that_present_jvmGcMarkSweepCompactTime = true;
    if (this_present_jvmGcMarkSweepCompactTime || that_present_jvmGcMarkSweepCompactTime) {
      if (!(this_present_jvmGcMarkSweepCompactTime && that_present_jvmGcMarkSweepCompactTime))
        return false;
      if (this.jvmGcMarkSweepCompactTime != that.jvmGcMarkSweepCompactTime)
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TStatWithSerialCollector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalUsed()).compareTo(other.isSetJvmMemoryTotalUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalUsed, other.jvmMemoryTotalUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryTotalMax()).compareTo(other.isSetJvmMemoryTotalMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryTotalMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryTotalMax, other.jvmMemoryTotalMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapUsed()).compareTo(other.isSetJvmMemoryHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapUsed, other.jvmMemoryHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryHeapMax()).compareTo(other.isSetJvmMemoryHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryHeapMax, other.jvmMemoryHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapUsed()).compareTo(other.isSetJvmMemoryNonHeapUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapUsed, other.jvmMemoryNonHeapUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryNonHeapMax()).compareTo(other.isSetJvmMemoryNonHeapMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryNonHeapMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryNonHeapMax, other.jvmMemoryNonHeapMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsCodeCacheUsage()).compareTo(other.isSetJvmMemoryPoolsCodeCacheUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsCodeCacheUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsCodeCacheUsage, other.jvmMemoryPoolsCodeCacheUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsEdenSpaceUsage()).compareTo(other.isSetJvmMemoryPoolsEdenSpaceUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsEdenSpaceUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsEdenSpaceUsage, other.jvmMemoryPoolsEdenSpaceUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsSurvivorSpaceUsage()).compareTo(other.isSetJvmMemoryPoolsSurvivorSpaceUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsSurvivorSpaceUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsSurvivorSpaceUsage, other.jvmMemoryPoolsSurvivorSpaceUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsPermGenUsage()).compareTo(other.isSetJvmMemoryPoolsPermGenUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsPermGenUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsPermGenUsage, other.jvmMemoryPoolsPermGenUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMemoryPoolsTenuredGenUsage()).compareTo(other.isSetJvmMemoryPoolsTenuredGenUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMemoryPoolsTenuredGenUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMemoryPoolsTenuredGenUsage, other.jvmMemoryPoolsTenuredGenUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcCopyCount()).compareTo(other.isSetJvmGcCopyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcCopyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcCopyCount, other.jvmGcCopyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcCopyTime()).compareTo(other.isSetJvmGcCopyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcCopyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcCopyTime, other.jvmGcCopyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcMarkSweepCompactCount()).compareTo(other.isSetJvmGcMarkSweepCompactCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcMarkSweepCompactCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcMarkSweepCompactCount, other.jvmGcMarkSweepCompactCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmGcMarkSweepCompactTime()).compareTo(other.isSetJvmGcMarkSweepCompactTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmGcMarkSweepCompactTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmGcMarkSweepCompactTime, other.jvmGcMarkSweepCompactTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TStatWithSerialCollector(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalUsed:");
    sb.append(this.jvmMemoryTotalUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryTotalMax:");
    sb.append(this.jvmMemoryTotalMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapUsed:");
    sb.append(this.jvmMemoryHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryHeapMax:");
    sb.append(this.jvmMemoryHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapUsed:");
    sb.append(this.jvmMemoryNonHeapUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryNonHeapMax:");
    sb.append(this.jvmMemoryNonHeapMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsCodeCacheUsage:");
    sb.append(this.jvmMemoryPoolsCodeCacheUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsEdenSpaceUsage:");
    sb.append(this.jvmMemoryPoolsEdenSpaceUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsSurvivorSpaceUsage:");
    sb.append(this.jvmMemoryPoolsSurvivorSpaceUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsPermGenUsage:");
    sb.append(this.jvmMemoryPoolsPermGenUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMemoryPoolsTenuredGenUsage:");
    sb.append(this.jvmMemoryPoolsTenuredGenUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcCopyCount:");
    sb.append(this.jvmGcCopyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcCopyTime:");
    sb.append(this.jvmGcCopyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcMarkSweepCompactCount:");
    sb.append(this.jvmGcMarkSweepCompactCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmGcMarkSweepCompactTime:");
    sb.append(this.jvmGcMarkSweepCompactTime);
    first = false;
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStatWithSerialCollectorStandardSchemeFactory implements SchemeFactory {
    public TStatWithSerialCollectorStandardScheme getScheme() {
      return new TStatWithSerialCollectorStandardScheme();
    }
  }

  private static class TStatWithSerialCollectorStandardScheme extends StandardScheme<TStatWithSerialCollector> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStatWithSerialCollector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JVM_MEMORY_TOTAL_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalUsed = iprot.readI64();
              struct.setJvmMemoryTotalUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JVM_MEMORY_TOTAL_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryTotalMax = iprot.readI64();
              struct.setJvmMemoryTotalMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JVM_MEMORY_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapUsed = iprot.readI64();
              struct.setJvmMemoryHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JVM_MEMORY_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryHeapMax = iprot.readI64();
              struct.setJvmMemoryHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JVM_MEMORY_NON_HEAP_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapUsed = iprot.readI64();
              struct.setJvmMemoryNonHeapUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JVM_MEMORY_NON_HEAP_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryNonHeapMax = iprot.readI64();
              struct.setJvmMemoryNonHeapMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JVM_MEMORY_POOLS_CODE_CACHE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsCodeCacheUsage = iprot.readI64();
              struct.setJvmMemoryPoolsCodeCacheUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JVM_MEMORY_POOLS_EDEN_SPACE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsEdenSpaceUsage = iprot.readI64();
              struct.setJvmMemoryPoolsEdenSpaceUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsSurvivorSpaceUsage = iprot.readI64();
              struct.setJvmMemoryPoolsSurvivorSpaceUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // JVM_MEMORY_POOLS_PERM_GEN_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsPermGenUsage = iprot.readI64();
              struct.setJvmMemoryPoolsPermGenUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // JVM_MEMORY_POOLS_TENURED_GEN_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmMemoryPoolsTenuredGenUsage = iprot.readI64();
              struct.setJvmMemoryPoolsTenuredGenUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // JVM_GC_COPY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcCopyCount = iprot.readI64();
              struct.setJvmGcCopyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // JVM_GC_COPY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcCopyTime = iprot.readI64();
              struct.setJvmGcCopyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // JVM_GC_MARK_SWEEP_COMPACT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcMarkSweepCompactCount = iprot.readI64();
              struct.setJvmGcMarkSweepCompactCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // JVM_GC_MARK_SWEEP_COMPACT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmGcMarkSweepCompactTime = iprot.readI64();
              struct.setJvmGcMarkSweepCompactTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStatWithSerialCollector struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_TOTAL_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryTotalMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryHeapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_USED_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_NON_HEAP_MAX_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryNonHeapMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_CODE_CACHE_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsCodeCacheUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_EDEN_SPACE_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsEdenSpaceUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_SURVIVOR_SPACE_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsSurvivorSpaceUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_PERM_GEN_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsPermGenUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_MEMORY_POOLS_TENURED_GEN_USAGE_FIELD_DESC);
      oprot.writeI64(struct.jvmMemoryPoolsTenuredGenUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_COPY_COUNT_FIELD_DESC);
      oprot.writeI64(struct.jvmGcCopyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_COPY_TIME_FIELD_DESC);
      oprot.writeI64(struct.jvmGcCopyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_MARK_SWEEP_COMPACT_COUNT_FIELD_DESC);
      oprot.writeI64(struct.jvmGcMarkSweepCompactCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_GC_MARK_SWEEP_COMPACT_TIME_FIELD_DESC);
      oprot.writeI64(struct.jvmGcMarkSweepCompactTime);
      oprot.writeFieldEnd();
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStatWithSerialCollectorTupleSchemeFactory implements SchemeFactory {
    public TStatWithSerialCollectorTupleScheme getScheme() {
      return new TStatWithSerialCollectorTupleScheme();
    }
  }

  private static class TStatWithSerialCollectorTupleScheme extends TupleScheme<TStatWithSerialCollector> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStatWithSerialCollector struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetJvmMemoryTotalUsed()) {
        optionals.set(2);
      }
      if (struct.isSetJvmMemoryTotalMax()) {
        optionals.set(3);
      }
      if (struct.isSetJvmMemoryHeapUsed()) {
        optionals.set(4);
      }
      if (struct.isSetJvmMemoryHeapMax()) {
        optionals.set(5);
      }
      if (struct.isSetJvmMemoryNonHeapUsed()) {
        optionals.set(6);
      }
      if (struct.isSetJvmMemoryNonHeapMax()) {
        optionals.set(7);
      }
      if (struct.isSetJvmMemoryPoolsCodeCacheUsage()) {
        optionals.set(8);
      }
      if (struct.isSetJvmMemoryPoolsEdenSpaceUsage()) {
        optionals.set(9);
      }
      if (struct.isSetJvmMemoryPoolsSurvivorSpaceUsage()) {
        optionals.set(10);
      }
      if (struct.isSetJvmMemoryPoolsPermGenUsage()) {
        optionals.set(11);
      }
      if (struct.isSetJvmMemoryPoolsTenuredGenUsage()) {
        optionals.set(12);
      }
      if (struct.isSetJvmGcCopyCount()) {
        optionals.set(13);
      }
      if (struct.isSetJvmGcCopyTime()) {
        optionals.set(14);
      }
      if (struct.isSetJvmGcMarkSweepCompactCount()) {
        optionals.set(15);
      }
      if (struct.isSetJvmGcMarkSweepCompactTime()) {
        optionals.set(16);
      }
      if (struct.isSetMetadata()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetJvmMemoryTotalUsed()) {
        oprot.writeI64(struct.jvmMemoryTotalUsed);
      }
      if (struct.isSetJvmMemoryTotalMax()) {
        oprot.writeI64(struct.jvmMemoryTotalMax);
      }
      if (struct.isSetJvmMemoryHeapUsed()) {
        oprot.writeI64(struct.jvmMemoryHeapUsed);
      }
      if (struct.isSetJvmMemoryHeapMax()) {
        oprot.writeI64(struct.jvmMemoryHeapMax);
      }
      if (struct.isSetJvmMemoryNonHeapUsed()) {
        oprot.writeI64(struct.jvmMemoryNonHeapUsed);
      }
      if (struct.isSetJvmMemoryNonHeapMax()) {
        oprot.writeI64(struct.jvmMemoryNonHeapMax);
      }
      if (struct.isSetJvmMemoryPoolsCodeCacheUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsCodeCacheUsage);
      }
      if (struct.isSetJvmMemoryPoolsEdenSpaceUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsEdenSpaceUsage);
      }
      if (struct.isSetJvmMemoryPoolsSurvivorSpaceUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsSurvivorSpaceUsage);
      }
      if (struct.isSetJvmMemoryPoolsPermGenUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsPermGenUsage);
      }
      if (struct.isSetJvmMemoryPoolsTenuredGenUsage()) {
        oprot.writeI64(struct.jvmMemoryPoolsTenuredGenUsage);
      }
      if (struct.isSetJvmGcCopyCount()) {
        oprot.writeI64(struct.jvmGcCopyCount);
      }
      if (struct.isSetJvmGcCopyTime()) {
        oprot.writeI64(struct.jvmGcCopyTime);
      }
      if (struct.isSetJvmGcMarkSweepCompactCount()) {
        oprot.writeI64(struct.jvmGcMarkSweepCompactCount);
      }
      if (struct.isSetJvmGcMarkSweepCompactTime()) {
        oprot.writeI64(struct.jvmGcMarkSweepCompactTime);
      }
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStatWithSerialCollector struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jvmMemoryTotalUsed = iprot.readI64();
        struct.setJvmMemoryTotalUsedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jvmMemoryTotalMax = iprot.readI64();
        struct.setJvmMemoryTotalMaxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jvmMemoryHeapUsed = iprot.readI64();
        struct.setJvmMemoryHeapUsedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jvmMemoryHeapMax = iprot.readI64();
        struct.setJvmMemoryHeapMaxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jvmMemoryNonHeapUsed = iprot.readI64();
        struct.setJvmMemoryNonHeapUsedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.jvmMemoryNonHeapMax = iprot.readI64();
        struct.setJvmMemoryNonHeapMaxIsSet(true);
      }
      if (incoming.get(8)) {
        struct.jvmMemoryPoolsCodeCacheUsage = iprot.readI64();
        struct.setJvmMemoryPoolsCodeCacheUsageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.jvmMemoryPoolsEdenSpaceUsage = iprot.readI64();
        struct.setJvmMemoryPoolsEdenSpaceUsageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.jvmMemoryPoolsSurvivorSpaceUsage = iprot.readI64();
        struct.setJvmMemoryPoolsSurvivorSpaceUsageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.jvmMemoryPoolsPermGenUsage = iprot.readI64();
        struct.setJvmMemoryPoolsPermGenUsageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.jvmMemoryPoolsTenuredGenUsage = iprot.readI64();
        struct.setJvmMemoryPoolsTenuredGenUsageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.jvmGcCopyCount = iprot.readI64();
        struct.setJvmGcCopyCountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.jvmGcCopyTime = iprot.readI64();
        struct.setJvmGcCopyTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.jvmGcMarkSweepCompactCount = iprot.readI64();
        struct.setJvmGcMarkSweepCompactCountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.jvmGcMarkSweepCompactTime = iprot.readI64();
        struct.setJvmGcMarkSweepCompactTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
    }
  }

}

