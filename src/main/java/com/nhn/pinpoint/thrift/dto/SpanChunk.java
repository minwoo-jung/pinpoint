/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nhn.pinpoint.thrift.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpanChunk implements org.apache.thrift.TBase<SpanChunk, SpanChunk._Fields>, java.io.Serializable, Cloneable, Comparable<SpanChunk> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpanChunk");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AGENT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentStartTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField TRACE_AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceAgentId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRACE_AGENT_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("traceAgentStartTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TRACE_TRANSACTION_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("traceTransactionSequence", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endPoint", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SPAN_EVENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spanEventList", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanChunkTupleSchemeFactory());
  }

  private String agentId; // required
  private String applicationName; // required
  private long agentStartTime; // required
  private short serviceType; // required
  private String traceAgentId; // required
  private long traceAgentStartTime; // required
  private long traceTransactionSequence; // required
  private int spanId; // required
  private String endPoint; // optional
  private List<SpanEvent> spanEventList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    APPLICATION_NAME((short)2, "applicationName"),
    AGENT_START_TIME((short)3, "agentStartTime"),
    SERVICE_TYPE((short)4, "serviceType"),
    TRACE_AGENT_ID((short)5, "traceAgentId"),
    TRACE_AGENT_START_TIME((short)6, "traceAgentStartTime"),
    TRACE_TRANSACTION_SEQUENCE((short)7, "traceTransactionSequence"),
    SPAN_ID((short)8, "spanId"),
    END_POINT((short)9, "endPoint"),
    SPAN_EVENT_LIST((short)10, "spanEventList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // APPLICATION_NAME
          return APPLICATION_NAME;
        case 3: // AGENT_START_TIME
          return AGENT_START_TIME;
        case 4: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 5: // TRACE_AGENT_ID
          return TRACE_AGENT_ID;
        case 6: // TRACE_AGENT_START_TIME
          return TRACE_AGENT_START_TIME;
        case 7: // TRACE_TRANSACTION_SEQUENCE
          return TRACE_TRANSACTION_SEQUENCE;
        case 8: // SPAN_ID
          return SPAN_ID;
        case 9: // END_POINT
          return END_POINT;
        case 10: // SPAN_EVENT_LIST
          return SPAN_EVENT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGENTSTARTTIME_ISSET_ID = 0;
  private static final int __SERVICETYPE_ISSET_ID = 1;
  private static final int __TRACEAGENTSTARTTIME_ISSET_ID = 2;
  private static final int __TRACETRANSACTIONSEQUENCE_ISSET_ID = 3;
  private static final int __SPANID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.END_POINT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("agentStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TRACE_AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("traceAgentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_AGENT_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("traceAgentStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRACE_TRANSACTION_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("traceTransactionSequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("endPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_EVENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("spanEventList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpanEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpanChunk.class, metaDataMap);
  }

  public SpanChunk() {
  }

  public SpanChunk(
    String agentId,
    String applicationName,
    long agentStartTime,
    short serviceType,
    String traceAgentId,
    long traceAgentStartTime,
    long traceTransactionSequence,
    int spanId,
    List<SpanEvent> spanEventList)
  {
    this();
    this.agentId = agentId;
    this.applicationName = applicationName;
    this.agentStartTime = agentStartTime;
    setAgentStartTimeIsSet(true);
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
    this.traceAgentId = traceAgentId;
    this.traceAgentStartTime = traceAgentStartTime;
    setTraceAgentStartTimeIsSet(true);
    this.traceTransactionSequence = traceTransactionSequence;
    setTraceTransactionSequenceIsSet(true);
    this.spanId = spanId;
    setSpanIdIsSet(true);
    this.spanEventList = spanEventList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpanChunk(SpanChunk other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    if (other.isSetApplicationName()) {
      this.applicationName = other.applicationName;
    }
    this.agentStartTime = other.agentStartTime;
    this.serviceType = other.serviceType;
    if (other.isSetTraceAgentId()) {
      this.traceAgentId = other.traceAgentId;
    }
    this.traceAgentStartTime = other.traceAgentStartTime;
    this.traceTransactionSequence = other.traceTransactionSequence;
    this.spanId = other.spanId;
    if (other.isSetEndPoint()) {
      this.endPoint = other.endPoint;
    }
    if (other.isSetSpanEventList()) {
      List<SpanEvent> __this__spanEventList = new ArrayList<SpanEvent>(other.spanEventList.size());
      for (SpanEvent other_element : other.spanEventList) {
        __this__spanEventList.add(new SpanEvent(other_element));
      }
      this.spanEventList = __this__spanEventList;
    }
  }

  public SpanChunk deepCopy() {
    return new SpanChunk(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    this.applicationName = null;
    setAgentStartTimeIsSet(false);
    this.agentStartTime = 0;
    setServiceTypeIsSet(false);
    this.serviceType = 0;
    this.traceAgentId = null;
    setTraceAgentStartTimeIsSet(false);
    this.traceAgentStartTime = 0;
    setTraceTransactionSequenceIsSet(false);
    this.traceTransactionSequence = 0;
    setSpanIdIsSet(false);
    this.spanId = 0;
    this.endPoint = null;
    this.spanEventList = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public String getApplicationName() {
    return this.applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public void unsetApplicationName() {
    this.applicationName = null;
  }

  /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationName() {
    return this.applicationName != null;
  }

  public void setApplicationNameIsSet(boolean value) {
    if (!value) {
      this.applicationName = null;
    }
  }

  public long getAgentStartTime() {
    return this.agentStartTime;
  }

  public void setAgentStartTime(long agentStartTime) {
    this.agentStartTime = agentStartTime;
    setAgentStartTimeIsSet(true);
  }

  public void unsetAgentStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGENTSTARTTIME_ISSET_ID);
  }

  /** Returns true if field agentStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AGENTSTARTTIME_ISSET_ID);
  }

  public void setAgentStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGENTSTARTTIME_ISSET_ID, value);
  }

  public short getServiceType() {
    return this.serviceType;
  }

  public void setServiceType(short serviceType) {
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
  }

  public void unsetServiceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
  }

  public void setServiceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICETYPE_ISSET_ID, value);
  }

  public String getTraceAgentId() {
    return this.traceAgentId;
  }

  public void setTraceAgentId(String traceAgentId) {
    this.traceAgentId = traceAgentId;
  }

  public void unsetTraceAgentId() {
    this.traceAgentId = null;
  }

  /** Returns true if field traceAgentId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceAgentId() {
    return this.traceAgentId != null;
  }

  public void setTraceAgentIdIsSet(boolean value) {
    if (!value) {
      this.traceAgentId = null;
    }
  }

  public long getTraceAgentStartTime() {
    return this.traceAgentStartTime;
  }

  public void setTraceAgentStartTime(long traceAgentStartTime) {
    this.traceAgentStartTime = traceAgentStartTime;
    setTraceAgentStartTimeIsSet(true);
  }

  public void unsetTraceAgentStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACEAGENTSTARTTIME_ISSET_ID);
  }

  /** Returns true if field traceAgentStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceAgentStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACEAGENTSTARTTIME_ISSET_ID);
  }

  public void setTraceAgentStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACEAGENTSTARTTIME_ISSET_ID, value);
  }

  public long getTraceTransactionSequence() {
    return this.traceTransactionSequence;
  }

  public void setTraceTransactionSequence(long traceTransactionSequence) {
    this.traceTransactionSequence = traceTransactionSequence;
    setTraceTransactionSequenceIsSet(true);
  }

  public void unsetTraceTransactionSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACETRANSACTIONSEQUENCE_ISSET_ID);
  }

  /** Returns true if field traceTransactionSequence is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceTransactionSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACETRANSACTIONSEQUENCE_ISSET_ID);
  }

  public void setTraceTransactionSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACETRANSACTIONSEQUENCE_ISSET_ID, value);
  }

  public int getSpanId() {
    return this.spanId;
  }

  public void setSpanId(int spanId) {
    this.spanId = spanId;
    setSpanIdIsSet(true);
  }

  public void unsetSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPANID_ISSET_ID, value);
  }

  public String getEndPoint() {
    return this.endPoint;
  }

  public void setEndPoint(String endPoint) {
    this.endPoint = endPoint;
  }

  public void unsetEndPoint() {
    this.endPoint = null;
  }

  /** Returns true if field endPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPoint() {
    return this.endPoint != null;
  }

  public void setEndPointIsSet(boolean value) {
    if (!value) {
      this.endPoint = null;
    }
  }

  public int getSpanEventListSize() {
    return (this.spanEventList == null) ? 0 : this.spanEventList.size();
  }

  public java.util.Iterator<SpanEvent> getSpanEventListIterator() {
    return (this.spanEventList == null) ? null : this.spanEventList.iterator();
  }

  public void addToSpanEventList(SpanEvent elem) {
    if (this.spanEventList == null) {
      this.spanEventList = new ArrayList<SpanEvent>();
    }
    this.spanEventList.add(elem);
  }

  public List<SpanEvent> getSpanEventList() {
    return this.spanEventList;
  }

  public void setSpanEventList(List<SpanEvent> spanEventList) {
    this.spanEventList = spanEventList;
  }

  public void unsetSpanEventList() {
    this.spanEventList = null;
  }

  /** Returns true if field spanEventList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanEventList() {
    return this.spanEventList != null;
  }

  public void setSpanEventListIsSet(boolean value) {
    if (!value) {
      this.spanEventList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case APPLICATION_NAME:
      if (value == null) {
        unsetApplicationName();
      } else {
        setApplicationName((String)value);
      }
      break;

    case AGENT_START_TIME:
      if (value == null) {
        unsetAgentStartTime();
      } else {
        setAgentStartTime((Long)value);
      }
      break;

    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((Short)value);
      }
      break;

    case TRACE_AGENT_ID:
      if (value == null) {
        unsetTraceAgentId();
      } else {
        setTraceAgentId((String)value);
      }
      break;

    case TRACE_AGENT_START_TIME:
      if (value == null) {
        unsetTraceAgentStartTime();
      } else {
        setTraceAgentStartTime((Long)value);
      }
      break;

    case TRACE_TRANSACTION_SEQUENCE:
      if (value == null) {
        unsetTraceTransactionSequence();
      } else {
        setTraceTransactionSequence((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Integer)value);
      }
      break;

    case END_POINT:
      if (value == null) {
        unsetEndPoint();
      } else {
        setEndPoint((String)value);
      }
      break;

    case SPAN_EVENT_LIST:
      if (value == null) {
        unsetSpanEventList();
      } else {
        setSpanEventList((List<SpanEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case APPLICATION_NAME:
      return getApplicationName();

    case AGENT_START_TIME:
      return Long.valueOf(getAgentStartTime());

    case SERVICE_TYPE:
      return Short.valueOf(getServiceType());

    case TRACE_AGENT_ID:
      return getTraceAgentId();

    case TRACE_AGENT_START_TIME:
      return Long.valueOf(getTraceAgentStartTime());

    case TRACE_TRANSACTION_SEQUENCE:
      return Long.valueOf(getTraceTransactionSequence());

    case SPAN_ID:
      return Integer.valueOf(getSpanId());

    case END_POINT:
      return getEndPoint();

    case SPAN_EVENT_LIST:
      return getSpanEventList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case APPLICATION_NAME:
      return isSetApplicationName();
    case AGENT_START_TIME:
      return isSetAgentStartTime();
    case SERVICE_TYPE:
      return isSetServiceType();
    case TRACE_AGENT_ID:
      return isSetTraceAgentId();
    case TRACE_AGENT_START_TIME:
      return isSetTraceAgentStartTime();
    case TRACE_TRANSACTION_SEQUENCE:
      return isSetTraceTransactionSequence();
    case SPAN_ID:
      return isSetSpanId();
    case END_POINT:
      return isSetEndPoint();
    case SPAN_EVENT_LIST:
      return isSetSpanEventList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpanChunk)
      return this.equals((SpanChunk)that);
    return false;
  }

  public boolean equals(SpanChunk that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_applicationName = true && this.isSetApplicationName();
    boolean that_present_applicationName = true && that.isSetApplicationName();
    if (this_present_applicationName || that_present_applicationName) {
      if (!(this_present_applicationName && that_present_applicationName))
        return false;
      if (!this.applicationName.equals(that.applicationName))
        return false;
    }

    boolean this_present_agentStartTime = true;
    boolean that_present_agentStartTime = true;
    if (this_present_agentStartTime || that_present_agentStartTime) {
      if (!(this_present_agentStartTime && that_present_agentStartTime))
        return false;
      if (this.agentStartTime != that.agentStartTime)
        return false;
    }

    boolean this_present_serviceType = true;
    boolean that_present_serviceType = true;
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (this.serviceType != that.serviceType)
        return false;
    }

    boolean this_present_traceAgentId = true && this.isSetTraceAgentId();
    boolean that_present_traceAgentId = true && that.isSetTraceAgentId();
    if (this_present_traceAgentId || that_present_traceAgentId) {
      if (!(this_present_traceAgentId && that_present_traceAgentId))
        return false;
      if (!this.traceAgentId.equals(that.traceAgentId))
        return false;
    }

    boolean this_present_traceAgentStartTime = true;
    boolean that_present_traceAgentStartTime = true;
    if (this_present_traceAgentStartTime || that_present_traceAgentStartTime) {
      if (!(this_present_traceAgentStartTime && that_present_traceAgentStartTime))
        return false;
      if (this.traceAgentStartTime != that.traceAgentStartTime)
        return false;
    }

    boolean this_present_traceTransactionSequence = true;
    boolean that_present_traceTransactionSequence = true;
    if (this_present_traceTransactionSequence || that_present_traceTransactionSequence) {
      if (!(this_present_traceTransactionSequence && that_present_traceTransactionSequence))
        return false;
      if (this.traceTransactionSequence != that.traceTransactionSequence)
        return false;
    }

    boolean this_present_spanId = true;
    boolean that_present_spanId = true;
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (this.spanId != that.spanId)
        return false;
    }

    boolean this_present_endPoint = true && this.isSetEndPoint();
    boolean that_present_endPoint = true && that.isSetEndPoint();
    if (this_present_endPoint || that_present_endPoint) {
      if (!(this_present_endPoint && that_present_endPoint))
        return false;
      if (!this.endPoint.equals(that.endPoint))
        return false;
    }

    boolean this_present_spanEventList = true && this.isSetSpanEventList();
    boolean that_present_spanEventList = true && that.isSetSpanEventList();
    if (this_present_spanEventList || that_present_spanEventList) {
      if (!(this_present_spanEventList && that_present_spanEventList))
        return false;
      if (!this.spanEventList.equals(that.spanEventList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SpanChunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentStartTime()).compareTo(other.isSetAgentStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentStartTime, other.agentStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceAgentId()).compareTo(other.isSetTraceAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceAgentId, other.traceAgentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceAgentStartTime()).compareTo(other.isSetTraceAgentStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceAgentStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceAgentStartTime, other.traceAgentStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceTransactionSequence()).compareTo(other.isSetTraceTransactionSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceTransactionSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceTransactionSequence, other.traceTransactionSequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(other.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, other.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPoint()).compareTo(other.isSetEndPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPoint, other.endPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanEventList()).compareTo(other.isSetSpanEventList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanEventList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanEventList, other.spanEventList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpanChunk(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationName:");
    if (this.applicationName == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentStartTime:");
    sb.append(this.agentStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceType:");
    sb.append(this.serviceType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceAgentId:");
    if (this.traceAgentId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceAgentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceAgentStartTime:");
    sb.append(this.traceAgentStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceTransactionSequence:");
    sb.append(this.traceTransactionSequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    sb.append(this.spanId);
    first = false;
    if (isSetEndPoint()) {
      if (!first) sb.append(", ");
      sb.append("endPoint:");
      if (this.endPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endPoint);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("spanEventList:");
    if (this.spanEventList == null) {
      sb.append("null");
    } else {
      sb.append(this.spanEventList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanChunkStandardSchemeFactory implements SchemeFactory {
    public SpanChunkStandardScheme getScheme() {
      return new SpanChunkStandardScheme();
    }
  }

  private static class SpanChunkStandardScheme extends StandardScheme<SpanChunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpanChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationName = iprot.readString();
              struct.setApplicationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.agentStartTime = iprot.readI64();
              struct.setAgentStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serviceType = iprot.readI16();
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACE_AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceAgentId = iprot.readString();
              struct.setTraceAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRACE_AGENT_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceAgentStartTime = iprot.readI64();
              struct.setTraceAgentStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRACE_TRANSACTION_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceTransactionSequence = iprot.readI64();
              struct.setTraceTransactionSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spanId = iprot.readI32();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endPoint = iprot.readString();
              struct.setEndPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPAN_EVENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.spanEventList = new ArrayList<SpanEvent>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  SpanEvent _elem34;
                  _elem34 = new SpanEvent();
                  _elem34.read(iprot);
                  struct.spanEventList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setSpanEventListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpanChunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      if (struct.applicationName != null) {
        oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
        oprot.writeString(struct.applicationName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGENT_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.agentStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
      oprot.writeI16(struct.serviceType);
      oprot.writeFieldEnd();
      if (struct.traceAgentId != null) {
        oprot.writeFieldBegin(TRACE_AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.traceAgentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRACE_AGENT_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.traceAgentStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRACE_TRANSACTION_SEQUENCE_FIELD_DESC);
      oprot.writeI64(struct.traceTransactionSequence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI32(struct.spanId);
      oprot.writeFieldEnd();
      if (struct.endPoint != null) {
        if (struct.isSetEndPoint()) {
          oprot.writeFieldBegin(END_POINT_FIELD_DESC);
          oprot.writeString(struct.endPoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.spanEventList != null) {
        oprot.writeFieldBegin(SPAN_EVENT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spanEventList.size()));
          for (SpanEvent _iter35 : struct.spanEventList)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanChunkTupleSchemeFactory implements SchemeFactory {
    public SpanChunkTupleScheme getScheme() {
      return new SpanChunkTupleScheme();
    }
  }

  private static class SpanChunkTupleScheme extends TupleScheme<SpanChunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpanChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationName()) {
        optionals.set(1);
      }
      if (struct.isSetAgentStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetServiceType()) {
        optionals.set(3);
      }
      if (struct.isSetTraceAgentId()) {
        optionals.set(4);
      }
      if (struct.isSetTraceAgentStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetTraceTransactionSequence()) {
        optionals.set(6);
      }
      if (struct.isSetSpanId()) {
        optionals.set(7);
      }
      if (struct.isSetEndPoint()) {
        optionals.set(8);
      }
      if (struct.isSetSpanEventList()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetApplicationName()) {
        oprot.writeString(struct.applicationName);
      }
      if (struct.isSetAgentStartTime()) {
        oprot.writeI64(struct.agentStartTime);
      }
      if (struct.isSetServiceType()) {
        oprot.writeI16(struct.serviceType);
      }
      if (struct.isSetTraceAgentId()) {
        oprot.writeString(struct.traceAgentId);
      }
      if (struct.isSetTraceAgentStartTime()) {
        oprot.writeI64(struct.traceAgentStartTime);
      }
      if (struct.isSetTraceTransactionSequence()) {
        oprot.writeI64(struct.traceTransactionSequence);
      }
      if (struct.isSetSpanId()) {
        oprot.writeI32(struct.spanId);
      }
      if (struct.isSetEndPoint()) {
        oprot.writeString(struct.endPoint);
      }
      if (struct.isSetSpanEventList()) {
        {
          oprot.writeI32(struct.spanEventList.size());
          for (SpanEvent _iter36 : struct.spanEventList)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpanChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationName = iprot.readString();
        struct.setApplicationNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agentStartTime = iprot.readI64();
        struct.setAgentStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serviceType = iprot.readI16();
        struct.setServiceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.traceAgentId = iprot.readString();
        struct.setTraceAgentIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.traceAgentStartTime = iprot.readI64();
        struct.setTraceAgentStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.traceTransactionSequence = iprot.readI64();
        struct.setTraceTransactionSequenceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.spanId = iprot.readI32();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endPoint = iprot.readString();
        struct.setEndPointIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spanEventList = new ArrayList<SpanEvent>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            SpanEvent _elem39;
            _elem39 = new SpanEvent();
            _elem39.read(iprot);
            struct.spanEventList.add(_elem39);
          }
        }
        struct.setSpanEventListIsSet(true);
      }
    }
  }

}

