/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.profiler.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JVMInfoData implements org.apache.thrift.TBase<JVMInfoData, JVMInfoData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JVMInfoData");

  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField JVM_INFO_THRIFT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmInfoThriftDTO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JVMInfoDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JVMInfoDataTupleSchemeFactory());
  }

  private com.profiler.dto.Header header; // required
  private com.profiler.dto.JVMInfoThriftDTO jvmInfoThriftDTO; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER((short)1, "header"),
    JVM_INFO_THRIFT_DTO((short)2, "jvmInfoThriftDTO");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER
          return HEADER;
        case 2: // JVM_INFO_THRIFT_DTO
          return JVM_INFO_THRIFT_DTO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.profiler.dto.Header.class)));
    tmpMap.put(_Fields.JVM_INFO_THRIFT_DTO, new org.apache.thrift.meta_data.FieldMetaData("jvmInfoThriftDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.profiler.dto.JVMInfoThriftDTO.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JVMInfoData.class, metaDataMap);
  }

  public JVMInfoData() {
  }

  public JVMInfoData(
    com.profiler.dto.Header header,
    com.profiler.dto.JVMInfoThriftDTO jvmInfoThriftDTO)
  {
    this();
    this.header = header;
    this.jvmInfoThriftDTO = jvmInfoThriftDTO;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JVMInfoData(JVMInfoData other) {
    if (other.isSetHeader()) {
      this.header = new com.profiler.dto.Header(other.header);
    }
    if (other.isSetJvmInfoThriftDTO()) {
      this.jvmInfoThriftDTO = new com.profiler.dto.JVMInfoThriftDTO(other.jvmInfoThriftDTO);
    }
  }

  public JVMInfoData deepCopy() {
    return new JVMInfoData(this);
  }

  @Override
  public void clear() {
    this.header = null;
    this.jvmInfoThriftDTO = null;
  }

  public com.profiler.dto.Header getHeader() {
    return this.header;
  }

  public void setHeader(com.profiler.dto.Header header) {
    this.header = header;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public com.profiler.dto.JVMInfoThriftDTO getJvmInfoThriftDTO() {
    return this.jvmInfoThriftDTO;
  }

  public void setJvmInfoThriftDTO(com.profiler.dto.JVMInfoThriftDTO jvmInfoThriftDTO) {
    this.jvmInfoThriftDTO = jvmInfoThriftDTO;
  }

  public void unsetJvmInfoThriftDTO() {
    this.jvmInfoThriftDTO = null;
  }

  /** Returns true if field jvmInfoThriftDTO is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmInfoThriftDTO() {
    return this.jvmInfoThriftDTO != null;
  }

  public void setJvmInfoThriftDTOIsSet(boolean value) {
    if (!value) {
      this.jvmInfoThriftDTO = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((com.profiler.dto.Header)value);
      }
      break;

    case JVM_INFO_THRIFT_DTO:
      if (value == null) {
        unsetJvmInfoThriftDTO();
      } else {
        setJvmInfoThriftDTO((com.profiler.dto.JVMInfoThriftDTO)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER:
      return getHeader();

    case JVM_INFO_THRIFT_DTO:
      return getJvmInfoThriftDTO();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER:
      return isSetHeader();
    case JVM_INFO_THRIFT_DTO:
      return isSetJvmInfoThriftDTO();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JVMInfoData)
      return this.equals((JVMInfoData)that);
    return false;
  }

  public boolean equals(JVMInfoData that) {
    if (that == null)
      return false;

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_jvmInfoThriftDTO = true && this.isSetJvmInfoThriftDTO();
    boolean that_present_jvmInfoThriftDTO = true && that.isSetJvmInfoThriftDTO();
    if (this_present_jvmInfoThriftDTO || that_present_jvmInfoThriftDTO) {
      if (!(this_present_jvmInfoThriftDTO && that_present_jvmInfoThriftDTO))
        return false;
      if (!this.jvmInfoThriftDTO.equals(that.jvmInfoThriftDTO))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JVMInfoData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JVMInfoData typedOther = (JVMInfoData)other;

    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(typedOther.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, typedOther.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmInfoThriftDTO()).compareTo(typedOther.isSetJvmInfoThriftDTO());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmInfoThriftDTO()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmInfoThriftDTO, typedOther.jvmInfoThriftDTO);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JVMInfoData(");
    boolean first = true;

    sb.append("header:");
    if (this.header == null) {
      sb.append("null");
    } else {
      sb.append(this.header);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmInfoThriftDTO:");
    if (this.jvmInfoThriftDTO == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmInfoThriftDTO);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JVMInfoDataStandardSchemeFactory implements SchemeFactory {
    public JVMInfoDataStandardScheme getScheme() {
      return new JVMInfoDataStandardScheme();
    }
  }

  private static class JVMInfoDataStandardScheme extends StandardScheme<JVMInfoData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JVMInfoData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new com.profiler.dto.Header();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JVM_INFO_THRIFT_DTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jvmInfoThriftDTO = new com.profiler.dto.JVMInfoThriftDTO();
              struct.jvmInfoThriftDTO.read(iprot);
              struct.setJvmInfoThriftDTOIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JVMInfoData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.header != null) {
        oprot.writeFieldBegin(HEADER_FIELD_DESC);
        struct.header.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.jvmInfoThriftDTO != null) {
        oprot.writeFieldBegin(JVM_INFO_THRIFT_DTO_FIELD_DESC);
        struct.jvmInfoThriftDTO.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JVMInfoDataTupleSchemeFactory implements SchemeFactory {
    public JVMInfoDataTupleScheme getScheme() {
      return new JVMInfoDataTupleScheme();
    }
  }

  private static class JVMInfoDataTupleScheme extends TupleScheme<JVMInfoData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JVMInfoData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetJvmInfoThriftDTO()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetJvmInfoThriftDTO()) {
        struct.jvmInfoThriftDTO.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JVMInfoData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.header = new com.profiler.dto.Header();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jvmInfoThriftDTO = new com.profiler.dto.JVMInfoThriftDTO();
        struct.jvmInfoThriftDTO.read(iprot);
        struct.setJvmInfoThriftDTOIsSet(true);
      }
    }
  }

}

