/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.profiler.common.dto2.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpanChunk implements org.apache.thrift.TBase<SpanChunk, SpanChunk._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpanChunk");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AGENT_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("agentIdentifier", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MOST_TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mostTraceId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LEAST_TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leastTraceId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SPAN_EVENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spanEventList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanChunkTupleSchemeFactory());
  }

  private String agentId; // required
  private String applicationId; // required
  private short agentIdentifier; // required
  private long mostTraceId; // required
  private long leastTraceId; // required
  private int spanId; // required
  private List<SpanEvent> spanEventList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    APPLICATION_ID((short)2, "applicationId"),
    AGENT_IDENTIFIER((short)3, "agentIdentifier"),
    MOST_TRACE_ID((short)4, "mostTraceId"),
    LEAST_TRACE_ID((short)5, "leastTraceId"),
    SPAN_ID((short)6, "spanId"),
    SPAN_EVENT_LIST((short)7, "spanEventList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // APPLICATION_ID
          return APPLICATION_ID;
        case 3: // AGENT_IDENTIFIER
          return AGENT_IDENTIFIER;
        case 4: // MOST_TRACE_ID
          return MOST_TRACE_ID;
        case 5: // LEAST_TRACE_ID
          return LEAST_TRACE_ID;
        case 6: // SPAN_ID
          return SPAN_ID;
        case 7: // SPAN_EVENT_LIST
          return SPAN_EVENT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGENTIDENTIFIER_ISSET_ID = 0;
  private static final int __MOSTTRACEID_ISSET_ID = 1;
  private static final int __LEASTTRACEID_ISSET_ID = 2;
  private static final int __SPANID_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("agentIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MOST_TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("mostTraceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEAST_TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("leastTraceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPAN_EVENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("spanEventList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpanEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpanChunk.class, metaDataMap);
  }

  public SpanChunk() {
  }

  public SpanChunk(
    String agentId,
    String applicationId,
    short agentIdentifier,
    long mostTraceId,
    long leastTraceId,
    int spanId,
    List<SpanEvent> spanEventList)
  {
    this();
    this.agentId = agentId;
    this.applicationId = applicationId;
    this.agentIdentifier = agentIdentifier;
    setAgentIdentifierIsSet(true);
    this.mostTraceId = mostTraceId;
    setMostTraceIdIsSet(true);
    this.leastTraceId = leastTraceId;
    setLeastTraceIdIsSet(true);
    this.spanId = spanId;
    setSpanIdIsSet(true);
    this.spanEventList = spanEventList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpanChunk(SpanChunk other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    this.agentIdentifier = other.agentIdentifier;
    this.mostTraceId = other.mostTraceId;
    this.leastTraceId = other.leastTraceId;
    this.spanId = other.spanId;
    if (other.isSetSpanEventList()) {
      List<SpanEvent> __this__spanEventList = new ArrayList<SpanEvent>();
      for (SpanEvent other_element : other.spanEventList) {
        __this__spanEventList.add(new SpanEvent(other_element));
      }
      this.spanEventList = __this__spanEventList;
    }
  }

  public SpanChunk deepCopy() {
    return new SpanChunk(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    this.applicationId = null;
    setAgentIdentifierIsSet(false);
    this.agentIdentifier = 0;
    setMostTraceIdIsSet(false);
    this.mostTraceId = 0;
    setLeastTraceIdIsSet(false);
    this.leastTraceId = 0;
    setSpanIdIsSet(false);
    this.spanId = 0;
    this.spanEventList = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public String getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  public short getAgentIdentifier() {
    return this.agentIdentifier;
  }

  public void setAgentIdentifier(short agentIdentifier) {
    this.agentIdentifier = agentIdentifier;
    setAgentIdentifierIsSet(true);
  }

  public void unsetAgentIdentifier() {
    __isset_bit_vector.clear(__AGENTIDENTIFIER_ISSET_ID);
  }

  /** Returns true if field agentIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentIdentifier() {
    return __isset_bit_vector.get(__AGENTIDENTIFIER_ISSET_ID);
  }

  public void setAgentIdentifierIsSet(boolean value) {
    __isset_bit_vector.set(__AGENTIDENTIFIER_ISSET_ID, value);
  }

  public long getMostTraceId() {
    return this.mostTraceId;
  }

  public void setMostTraceId(long mostTraceId) {
    this.mostTraceId = mostTraceId;
    setMostTraceIdIsSet(true);
  }

  public void unsetMostTraceId() {
    __isset_bit_vector.clear(__MOSTTRACEID_ISSET_ID);
  }

  /** Returns true if field mostTraceId is set (has been assigned a value) and false otherwise */
  public boolean isSetMostTraceId() {
    return __isset_bit_vector.get(__MOSTTRACEID_ISSET_ID);
  }

  public void setMostTraceIdIsSet(boolean value) {
    __isset_bit_vector.set(__MOSTTRACEID_ISSET_ID, value);
  }

  public long getLeastTraceId() {
    return this.leastTraceId;
  }

  public void setLeastTraceId(long leastTraceId) {
    this.leastTraceId = leastTraceId;
    setLeastTraceIdIsSet(true);
  }

  public void unsetLeastTraceId() {
    __isset_bit_vector.clear(__LEASTTRACEID_ISSET_ID);
  }

  /** Returns true if field leastTraceId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeastTraceId() {
    return __isset_bit_vector.get(__LEASTTRACEID_ISSET_ID);
  }

  public void setLeastTraceIdIsSet(boolean value) {
    __isset_bit_vector.set(__LEASTTRACEID_ISSET_ID, value);
  }

  public int getSpanId() {
    return this.spanId;
  }

  public void setSpanId(int spanId) {
    this.spanId = spanId;
    setSpanIdIsSet(true);
  }

  public void unsetSpanId() {
    __isset_bit_vector.clear(__SPANID_ISSET_ID);
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return __isset_bit_vector.get(__SPANID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bit_vector.set(__SPANID_ISSET_ID, value);
  }

  public int getSpanEventListSize() {
    return (this.spanEventList == null) ? 0 : this.spanEventList.size();
  }

  public java.util.Iterator<SpanEvent> getSpanEventListIterator() {
    return (this.spanEventList == null) ? null : this.spanEventList.iterator();
  }

  public void addToSpanEventList(SpanEvent elem) {
    if (this.spanEventList == null) {
      this.spanEventList = new ArrayList<SpanEvent>();
    }
    this.spanEventList.add(elem);
  }

  public List<SpanEvent> getSpanEventList() {
    return this.spanEventList;
  }

  public void setSpanEventList(List<SpanEvent> spanEventList) {
    this.spanEventList = spanEventList;
  }

  public void unsetSpanEventList() {
    this.spanEventList = null;
  }

  /** Returns true if field spanEventList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanEventList() {
    return this.spanEventList != null;
  }

  public void setSpanEventListIsSet(boolean value) {
    if (!value) {
      this.spanEventList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((String)value);
      }
      break;

    case AGENT_IDENTIFIER:
      if (value == null) {
        unsetAgentIdentifier();
      } else {
        setAgentIdentifier((Short)value);
      }
      break;

    case MOST_TRACE_ID:
      if (value == null) {
        unsetMostTraceId();
      } else {
        setMostTraceId((Long)value);
      }
      break;

    case LEAST_TRACE_ID:
      if (value == null) {
        unsetLeastTraceId();
      } else {
        setLeastTraceId((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Integer)value);
      }
      break;

    case SPAN_EVENT_LIST:
      if (value == null) {
        unsetSpanEventList();
      } else {
        setSpanEventList((List<SpanEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case APPLICATION_ID:
      return getApplicationId();

    case AGENT_IDENTIFIER:
      return Short.valueOf(getAgentIdentifier());

    case MOST_TRACE_ID:
      return Long.valueOf(getMostTraceId());

    case LEAST_TRACE_ID:
      return Long.valueOf(getLeastTraceId());

    case SPAN_ID:
      return Integer.valueOf(getSpanId());

    case SPAN_EVENT_LIST:
      return getSpanEventList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case APPLICATION_ID:
      return isSetApplicationId();
    case AGENT_IDENTIFIER:
      return isSetAgentIdentifier();
    case MOST_TRACE_ID:
      return isSetMostTraceId();
    case LEAST_TRACE_ID:
      return isSetLeastTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case SPAN_EVENT_LIST:
      return isSetSpanEventList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpanChunk)
      return this.equals((SpanChunk)that);
    return false;
  }

  public boolean equals(SpanChunk that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_agentIdentifier = true;
    boolean that_present_agentIdentifier = true;
    if (this_present_agentIdentifier || that_present_agentIdentifier) {
      if (!(this_present_agentIdentifier && that_present_agentIdentifier))
        return false;
      if (this.agentIdentifier != that.agentIdentifier)
        return false;
    }

    boolean this_present_mostTraceId = true;
    boolean that_present_mostTraceId = true;
    if (this_present_mostTraceId || that_present_mostTraceId) {
      if (!(this_present_mostTraceId && that_present_mostTraceId))
        return false;
      if (this.mostTraceId != that.mostTraceId)
        return false;
    }

    boolean this_present_leastTraceId = true;
    boolean that_present_leastTraceId = true;
    if (this_present_leastTraceId || that_present_leastTraceId) {
      if (!(this_present_leastTraceId && that_present_leastTraceId))
        return false;
      if (this.leastTraceId != that.leastTraceId)
        return false;
    }

    boolean this_present_spanId = true;
    boolean that_present_spanId = true;
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (this.spanId != that.spanId)
        return false;
    }

    boolean this_present_spanEventList = true && this.isSetSpanEventList();
    boolean that_present_spanEventList = true && that.isSetSpanEventList();
    if (this_present_spanEventList || that_present_spanEventList) {
      if (!(this_present_spanEventList && that_present_spanEventList))
        return false;
      if (!this.spanEventList.equals(that.spanEventList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SpanChunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SpanChunk typedOther = (SpanChunk)other;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(typedOther.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, typedOther.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(typedOther.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, typedOther.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentIdentifier()).compareTo(typedOther.isSetAgentIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentIdentifier, typedOther.agentIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMostTraceId()).compareTo(typedOther.isSetMostTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMostTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mostTraceId, typedOther.mostTraceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeastTraceId()).compareTo(typedOther.isSetLeastTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeastTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leastTraceId, typedOther.leastTraceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanEventList()).compareTo(typedOther.isSetSpanEventList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanEventList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanEventList, typedOther.spanEventList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpanChunk(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentIdentifier:");
    sb.append(this.agentIdentifier);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mostTraceId:");
    sb.append(this.mostTraceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leastTraceId:");
    sb.append(this.leastTraceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    sb.append(this.spanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanEventList:");
    if (this.spanEventList == null) {
      sb.append("null");
    } else {
      sb.append(this.spanEventList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanChunkStandardSchemeFactory implements SchemeFactory {
    public SpanChunkStandardScheme getScheme() {
      return new SpanChunkStandardScheme();
    }
  }

  private static class SpanChunkStandardScheme extends StandardScheme<SpanChunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpanChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationId = iprot.readString();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENT_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.agentIdentifier = iprot.readI16();
              struct.setAgentIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOST_TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mostTraceId = iprot.readI64();
              struct.setMostTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEAST_TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leastTraceId = iprot.readI64();
              struct.setLeastTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spanId = iprot.readI32();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPAN_EVENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.spanEventList = new ArrayList<SpanEvent>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  SpanEvent _elem34; // required
                  _elem34 = new SpanEvent();
                  _elem34.read(iprot);
                  struct.spanEventList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setSpanEventListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpanChunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      if (struct.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(struct.applicationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGENT_IDENTIFIER_FIELD_DESC);
      oprot.writeI16(struct.agentIdentifier);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOST_TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.mostTraceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEAST_TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.leastTraceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI32(struct.spanId);
      oprot.writeFieldEnd();
      if (struct.spanEventList != null) {
        oprot.writeFieldBegin(SPAN_EVENT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spanEventList.size()));
          for (SpanEvent _iter35 : struct.spanEventList)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanChunkTupleSchemeFactory implements SchemeFactory {
    public SpanChunkTupleScheme getScheme() {
      return new SpanChunkTupleScheme();
    }
  }

  private static class SpanChunkTupleScheme extends TupleScheme<SpanChunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpanChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationId()) {
        optionals.set(1);
      }
      if (struct.isSetAgentIdentifier()) {
        optionals.set(2);
      }
      if (struct.isSetMostTraceId()) {
        optionals.set(3);
      }
      if (struct.isSetLeastTraceId()) {
        optionals.set(4);
      }
      if (struct.isSetSpanId()) {
        optionals.set(5);
      }
      if (struct.isSetSpanEventList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetApplicationId()) {
        oprot.writeString(struct.applicationId);
      }
      if (struct.isSetAgentIdentifier()) {
        oprot.writeI16(struct.agentIdentifier);
      }
      if (struct.isSetMostTraceId()) {
        oprot.writeI64(struct.mostTraceId);
      }
      if (struct.isSetLeastTraceId()) {
        oprot.writeI64(struct.leastTraceId);
      }
      if (struct.isSetSpanId()) {
        oprot.writeI32(struct.spanId);
      }
      if (struct.isSetSpanEventList()) {
        {
          oprot.writeI32(struct.spanEventList.size());
          for (SpanEvent _iter36 : struct.spanEventList)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpanChunk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationId = iprot.readString();
        struct.setApplicationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agentIdentifier = iprot.readI16();
        struct.setAgentIdentifierIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mostTraceId = iprot.readI64();
        struct.setMostTraceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.leastTraceId = iprot.readI64();
        struct.setLeastTraceIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.spanId = iprot.readI32();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spanEventList = new ArrayList<SpanEvent>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            SpanEvent _elem39; // required
            _elem39 = new SpanEvent();
            _elem39.read(iprot);
            struct.spanEventList.add(_elem39);
          }
        }
        struct.setSpanEventListIsSet(true);
      }
    }
  }

}

