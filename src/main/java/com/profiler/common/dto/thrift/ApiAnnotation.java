/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.profiler.common.dto.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApiAnnotation implements org.apache.thrift.TBase<ApiAnnotation, ApiAnnotation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApiAnnotation");

  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterType", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMETER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterName", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PARAMETER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterValue", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApiAnnotationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApiAnnotationTupleSchemeFactory());
  }

  private String className; // required
  private String methodName; // required
  private List<String> parameterType; // required
  private List<String> parameterName; // optional
  private List<String> parameterValue; // optional
  private int line; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASS_NAME((short)1, "className"),
    METHOD_NAME((short)2, "methodName"),
    PARAMETER_TYPE((short)3, "parameterType"),
    PARAMETER_NAME((short)4, "parameterName"),
    PARAMETER_VALUE((short)5, "parameterValue"),
    LINE((short)6, "line");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASS_NAME
          return CLASS_NAME;
        case 2: // METHOD_NAME
          return METHOD_NAME;
        case 3: // PARAMETER_TYPE
          return PARAMETER_TYPE;
        case 4: // PARAMETER_NAME
          return PARAMETER_NAME;
        case 5: // PARAMETER_VALUE
          return PARAMETER_VALUE;
        case 6: // LINE
          return LINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.PARAMETER_NAME,_Fields.PARAMETER_VALUE,_Fields.LINE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("parameterType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARAMETER_NAME, new org.apache.thrift.meta_data.FieldMetaData("parameterName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARAMETER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("parameterValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApiAnnotation.class, metaDataMap);
  }

  public ApiAnnotation() {
  }

  public ApiAnnotation(
    String className,
    String methodName,
    List<String> parameterType)
  {
    this();
    this.className = className;
    this.methodName = methodName;
    this.parameterType = parameterType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApiAnnotation(ApiAnnotation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetParameterType()) {
      List<String> __this__parameterType = new ArrayList<String>();
      for (String other_element : other.parameterType) {
        __this__parameterType.add(other_element);
      }
      this.parameterType = __this__parameterType;
    }
    if (other.isSetParameterName()) {
      List<String> __this__parameterName = new ArrayList<String>();
      for (String other_element : other.parameterName) {
        __this__parameterName.add(other_element);
      }
      this.parameterName = __this__parameterName;
    }
    if (other.isSetParameterValue()) {
      List<String> __this__parameterValue = new ArrayList<String>();
      for (String other_element : other.parameterValue) {
        __this__parameterValue.add(other_element);
      }
      this.parameterValue = __this__parameterValue;
    }
    this.line = other.line;
  }

  public ApiAnnotation deepCopy() {
    return new ApiAnnotation(this);
  }

  @Override
  public void clear() {
    this.className = null;
    this.methodName = null;
    this.parameterType = null;
    this.parameterName = null;
    this.parameterValue = null;
    setLineIsSet(false);
    this.line = 0;
  }

  public String getClassName() {
    return this.className;
  }

  public void setClassName(String className) {
    this.className = className;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public String getMethodName() {
    return this.methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public int getParameterTypeSize() {
    return (this.parameterType == null) ? 0 : this.parameterType.size();
  }

  public java.util.Iterator<String> getParameterTypeIterator() {
    return (this.parameterType == null) ? null : this.parameterType.iterator();
  }

  public void addToParameterType(String elem) {
    if (this.parameterType == null) {
      this.parameterType = new ArrayList<String>();
    }
    this.parameterType.add(elem);
  }

  public List<String> getParameterType() {
    return this.parameterType;
  }

  public void setParameterType(List<String> parameterType) {
    this.parameterType = parameterType;
  }

  public void unsetParameterType() {
    this.parameterType = null;
  }

  /** Returns true if field parameterType is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterType() {
    return this.parameterType != null;
  }

  public void setParameterTypeIsSet(boolean value) {
    if (!value) {
      this.parameterType = null;
    }
  }

  public int getParameterNameSize() {
    return (this.parameterName == null) ? 0 : this.parameterName.size();
  }

  public java.util.Iterator<String> getParameterNameIterator() {
    return (this.parameterName == null) ? null : this.parameterName.iterator();
  }

  public void addToParameterName(String elem) {
    if (this.parameterName == null) {
      this.parameterName = new ArrayList<String>();
    }
    this.parameterName.add(elem);
  }

  public List<String> getParameterName() {
    return this.parameterName;
  }

  public void setParameterName(List<String> parameterName) {
    this.parameterName = parameterName;
  }

  public void unsetParameterName() {
    this.parameterName = null;
  }

  /** Returns true if field parameterName is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterName() {
    return this.parameterName != null;
  }

  public void setParameterNameIsSet(boolean value) {
    if (!value) {
      this.parameterName = null;
    }
  }

  public int getParameterValueSize() {
    return (this.parameterValue == null) ? 0 : this.parameterValue.size();
  }

  public java.util.Iterator<String> getParameterValueIterator() {
    return (this.parameterValue == null) ? null : this.parameterValue.iterator();
  }

  public void addToParameterValue(String elem) {
    if (this.parameterValue == null) {
      this.parameterValue = new ArrayList<String>();
    }
    this.parameterValue.add(elem);
  }

  public List<String> getParameterValue() {
    return this.parameterValue;
  }

  public void setParameterValue(List<String> parameterValue) {
    this.parameterValue = parameterValue;
  }

  public void unsetParameterValue() {
    this.parameterValue = null;
  }

  /** Returns true if field parameterValue is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterValue() {
    return this.parameterValue != null;
  }

  public void setParameterValueIsSet(boolean value) {
    if (!value) {
      this.parameterValue = null;
    }
  }

  public int getLine() {
    return this.line;
  }

  public void setLine(int line) {
    this.line = line;
    setLineIsSet(true);
  }

  public void unsetLine() {
    __isset_bit_vector.clear(__LINE_ISSET_ID);
  }

  /** Returns true if field line is set (has been assigned a value) and false otherwise */
  public boolean isSetLine() {
    return __isset_bit_vector.get(__LINE_ISSET_ID);
  }

  public void setLineIsSet(boolean value) {
    __isset_bit_vector.set(__LINE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case PARAMETER_TYPE:
      if (value == null) {
        unsetParameterType();
      } else {
        setParameterType((List<String>)value);
      }
      break;

    case PARAMETER_NAME:
      if (value == null) {
        unsetParameterName();
      } else {
        setParameterName((List<String>)value);
      }
      break;

    case PARAMETER_VALUE:
      if (value == null) {
        unsetParameterValue();
      } else {
        setParameterValue((List<String>)value);
      }
      break;

    case LINE:
      if (value == null) {
        unsetLine();
      } else {
        setLine((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASS_NAME:
      return getClassName();

    case METHOD_NAME:
      return getMethodName();

    case PARAMETER_TYPE:
      return getParameterType();

    case PARAMETER_NAME:
      return getParameterName();

    case PARAMETER_VALUE:
      return getParameterValue();

    case LINE:
      return Integer.valueOf(getLine());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLASS_NAME:
      return isSetClassName();
    case METHOD_NAME:
      return isSetMethodName();
    case PARAMETER_TYPE:
      return isSetParameterType();
    case PARAMETER_NAME:
      return isSetParameterName();
    case PARAMETER_VALUE:
      return isSetParameterValue();
    case LINE:
      return isSetLine();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApiAnnotation)
      return this.equals((ApiAnnotation)that);
    return false;
  }

  public boolean equals(ApiAnnotation that) {
    if (that == null)
      return false;

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_parameterType = true && this.isSetParameterType();
    boolean that_present_parameterType = true && that.isSetParameterType();
    if (this_present_parameterType || that_present_parameterType) {
      if (!(this_present_parameterType && that_present_parameterType))
        return false;
      if (!this.parameterType.equals(that.parameterType))
        return false;
    }

    boolean this_present_parameterName = true && this.isSetParameterName();
    boolean that_present_parameterName = true && that.isSetParameterName();
    if (this_present_parameterName || that_present_parameterName) {
      if (!(this_present_parameterName && that_present_parameterName))
        return false;
      if (!this.parameterName.equals(that.parameterName))
        return false;
    }

    boolean this_present_parameterValue = true && this.isSetParameterValue();
    boolean that_present_parameterValue = true && that.isSetParameterValue();
    if (this_present_parameterValue || that_present_parameterValue) {
      if (!(this_present_parameterValue && that_present_parameterValue))
        return false;
      if (!this.parameterValue.equals(that.parameterValue))
        return false;
    }

    boolean this_present_line = true && this.isSetLine();
    boolean that_present_line = true && that.isSetLine();
    if (this_present_line || that_present_line) {
      if (!(this_present_line && that_present_line))
        return false;
      if (this.line != that.line)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ApiAnnotation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ApiAnnotation typedOther = (ApiAnnotation)other;

    lastComparison = Boolean.valueOf(isSetClassName()).compareTo(typedOther.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, typedOther.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(typedOther.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, typedOther.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterType()).compareTo(typedOther.isSetParameterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterType, typedOther.parameterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterName()).compareTo(typedOther.isSetParameterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterName, typedOther.parameterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterValue()).compareTo(typedOther.isSetParameterValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterValue, typedOther.parameterValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLine()).compareTo(typedOther.isSetLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, typedOther.line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApiAnnotation(");
    boolean first = true;

    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterType:");
    if (this.parameterType == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterType);
    }
    first = false;
    if (isSetParameterName()) {
      if (!first) sb.append(", ");
      sb.append("parameterName:");
      if (this.parameterName == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterName);
      }
      first = false;
    }
    if (isSetParameterValue()) {
      if (!first) sb.append(", ");
      sb.append("parameterValue:");
      if (this.parameterValue == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterValue);
      }
      first = false;
    }
    if (isSetLine()) {
      if (!first) sb.append(", ");
      sb.append("line:");
      sb.append(this.line);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApiAnnotationStandardSchemeFactory implements SchemeFactory {
    public ApiAnnotationStandardScheme getScheme() {
      return new ApiAnnotationStandardScheme();
    }
  }

  private static class ApiAnnotationStandardScheme extends StandardScheme<ApiAnnotation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApiAnnotation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.className = iprot.readString();
              struct.setClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.parameterType = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.parameterType.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setParameterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMETER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.parameterName = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.parameterName.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setParameterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAMETER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.parameterValue = new ArrayList<String>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  String _elem8; // required
                  _elem8 = iprot.readString();
                  struct.parameterValue.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setParameterValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.line = iprot.readI32();
              struct.setLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApiAnnotation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.className);
        oprot.writeFieldEnd();
      }
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.parameterType != null) {
        oprot.writeFieldBegin(PARAMETER_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parameterType.size()));
          for (String _iter9 : struct.parameterType)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.parameterName != null) {
        if (struct.isSetParameterName()) {
          oprot.writeFieldBegin(PARAMETER_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parameterName.size()));
            for (String _iter10 : struct.parameterName)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.parameterValue != null) {
        if (struct.isSetParameterValue()) {
          oprot.writeFieldBegin(PARAMETER_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parameterValue.size()));
            for (String _iter11 : struct.parameterValue)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLine()) {
        oprot.writeFieldBegin(LINE_FIELD_DESC);
        oprot.writeI32(struct.line);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApiAnnotationTupleSchemeFactory implements SchemeFactory {
    public ApiAnnotationTupleScheme getScheme() {
      return new ApiAnnotationTupleScheme();
    }
  }

  private static class ApiAnnotationTupleScheme extends TupleScheme<ApiAnnotation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApiAnnotation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClassName()) {
        optionals.set(0);
      }
      if (struct.isSetMethodName()) {
        optionals.set(1);
      }
      if (struct.isSetParameterType()) {
        optionals.set(2);
      }
      if (struct.isSetParameterName()) {
        optionals.set(3);
      }
      if (struct.isSetParameterValue()) {
        optionals.set(4);
      }
      if (struct.isSetLine()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetClassName()) {
        oprot.writeString(struct.className);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetParameterType()) {
        {
          oprot.writeI32(struct.parameterType.size());
          for (String _iter12 : struct.parameterType)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetParameterName()) {
        {
          oprot.writeI32(struct.parameterName.size());
          for (String _iter13 : struct.parameterName)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetParameterValue()) {
        {
          oprot.writeI32(struct.parameterValue.size());
          for (String _iter14 : struct.parameterValue)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetLine()) {
        oprot.writeI32(struct.line);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApiAnnotation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.className = iprot.readString();
        struct.setClassNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parameterType = new ArrayList<String>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            String _elem17; // required
            _elem17 = iprot.readString();
            struct.parameterType.add(_elem17);
          }
        }
        struct.setParameterTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parameterName = new ArrayList<String>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            String _elem20; // required
            _elem20 = iprot.readString();
            struct.parameterName.add(_elem20);
          }
        }
        struct.setParameterNameIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parameterValue = new ArrayList<String>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            String _elem23; // required
            _elem23 = iprot.readString();
            struct.parameterValue.add(_elem23);
          }
        }
        struct.setParameterValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.line = iprot.readI32();
        struct.setLineIsSet(true);
      }
    }
  }

}

