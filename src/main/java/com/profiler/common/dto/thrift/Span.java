/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.profiler.common.dto.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Span implements org.apache.thrift.TBase<Span, Span._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Span");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MOST_TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mostTraceID", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LEAST_TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leastTraceID", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanID", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField BINARY_ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryAnnotations", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endPoint", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanTupleSchemeFactory());
  }

  private String agentID; // required
  private long timestamp; // required
  private long mostTraceID; // required
  private long leastTraceID; // required
  private String name; // required
  private String serviceName; // required
  private long spanID; // required
  private long parentSpanId; // optional
  private List<Annotation> annotations; // required
  private List<BinaryAnnotation> binaryAnnotations; // required
  private int flag; // optional
  private Endpoint endPoint; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentID"),
    TIMESTAMP((short)2, "timestamp"),
    MOST_TRACE_ID((short)3, "mostTraceID"),
    LEAST_TRACE_ID((short)4, "leastTraceID"),
    NAME((short)5, "name"),
    SERVICE_NAME((short)6, "serviceName"),
    SPAN_ID((short)7, "spanID"),
    PARENT_SPAN_ID((short)8, "parentSpanId"),
    ANNOTATIONS((short)9, "annotations"),
    BINARY_ANNOTATIONS((short)10, "binaryAnnotations"),
    FLAG((short)11, "flag"),
    END_POINT((short)12, "endPoint");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // MOST_TRACE_ID
          return MOST_TRACE_ID;
        case 4: // LEAST_TRACE_ID
          return LEAST_TRACE_ID;
        case 5: // NAME
          return NAME;
        case 6: // SERVICE_NAME
          return SERVICE_NAME;
        case 7: // SPAN_ID
          return SPAN_ID;
        case 8: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 9: // ANNOTATIONS
          return ANNOTATIONS;
        case 10: // BINARY_ANNOTATIONS
          return BINARY_ANNOTATIONS;
        case 11: // FLAG
          return FLAG;
        case 12: // END_POINT
          return END_POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __MOSTTRACEID_ISSET_ID = 1;
  private static final int __LEASTTRACEID_ISSET_ID = 2;
  private static final int __SPANID_ISSET_ID = 3;
  private static final int __PARENTSPANID_ISSET_ID = 4;
  private static final int __FLAG_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.PARENT_SPAN_ID,_Fields.FLAG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MOST_TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("mostTraceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEAST_TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("leastTraceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotation.class))));
    tmpMap.put(_Fields.BINARY_ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("binaryAnnotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryAnnotation.class))));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("endPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Endpoint.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
  }

  public Span() {
    this.flag = 0;

  }

  public Span(
    String agentID,
    long timestamp,
    long mostTraceID,
    long leastTraceID,
    String name,
    String serviceName,
    long spanID,
    List<Annotation> annotations,
    List<BinaryAnnotation> binaryAnnotations,
    Endpoint endPoint)
  {
    this();
    this.agentID = agentID;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.mostTraceID = mostTraceID;
    setMostTraceIDIsSet(true);
    this.leastTraceID = leastTraceID;
    setLeastTraceIDIsSet(true);
    this.name = name;
    this.serviceName = serviceName;
    this.spanID = spanID;
    setSpanIDIsSet(true);
    this.annotations = annotations;
    this.binaryAnnotations = binaryAnnotations;
    this.endPoint = endPoint;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Span(Span other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAgentID()) {
      this.agentID = other.agentID;
    }
    this.timestamp = other.timestamp;
    this.mostTraceID = other.mostTraceID;
    this.leastTraceID = other.leastTraceID;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    this.spanID = other.spanID;
    this.parentSpanId = other.parentSpanId;
    if (other.isSetAnnotations()) {
      List<Annotation> __this__annotations = new ArrayList<Annotation>();
      for (Annotation other_element : other.annotations) {
        __this__annotations.add(new Annotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    if (other.isSetBinaryAnnotations()) {
      List<BinaryAnnotation> __this__binaryAnnotations = new ArrayList<BinaryAnnotation>();
      for (BinaryAnnotation other_element : other.binaryAnnotations) {
        __this__binaryAnnotations.add(new BinaryAnnotation(other_element));
      }
      this.binaryAnnotations = __this__binaryAnnotations;
    }
    this.flag = other.flag;
    if (other.isSetEndPoint()) {
      this.endPoint = new Endpoint(other.endPoint);
    }
  }

  public Span deepCopy() {
    return new Span(this);
  }

  @Override
  public void clear() {
    this.agentID = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setMostTraceIDIsSet(false);
    this.mostTraceID = 0;
    setLeastTraceIDIsSet(false);
    this.leastTraceID = 0;
    this.name = null;
    this.serviceName = null;
    setSpanIDIsSet(false);
    this.spanID = 0;
    setParentSpanIdIsSet(false);
    this.parentSpanId = 0;
    this.annotations = null;
    this.binaryAnnotations = null;
    this.flag = 0;

    this.endPoint = null;
  }

  public String getAgentID() {
    return this.agentID;
  }

  public void setAgentID(String agentID) {
    this.agentID = agentID;
  }

  public void unsetAgentID() {
    this.agentID = null;
  }

  /** Returns true if field agentID is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentID() {
    return this.agentID != null;
  }

  public void setAgentIDIsSet(boolean value) {
    if (!value) {
      this.agentID = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public long getMostTraceID() {
    return this.mostTraceID;
  }

  public void setMostTraceID(long mostTraceID) {
    this.mostTraceID = mostTraceID;
    setMostTraceIDIsSet(true);
  }

  public void unsetMostTraceID() {
    __isset_bit_vector.clear(__MOSTTRACEID_ISSET_ID);
  }

  /** Returns true if field mostTraceID is set (has been assigned a value) and false otherwise */
  public boolean isSetMostTraceID() {
    return __isset_bit_vector.get(__MOSTTRACEID_ISSET_ID);
  }

  public void setMostTraceIDIsSet(boolean value) {
    __isset_bit_vector.set(__MOSTTRACEID_ISSET_ID, value);
  }

  public long getLeastTraceID() {
    return this.leastTraceID;
  }

  public void setLeastTraceID(long leastTraceID) {
    this.leastTraceID = leastTraceID;
    setLeastTraceIDIsSet(true);
  }

  public void unsetLeastTraceID() {
    __isset_bit_vector.clear(__LEASTTRACEID_ISSET_ID);
  }

  /** Returns true if field leastTraceID is set (has been assigned a value) and false otherwise */
  public boolean isSetLeastTraceID() {
    return __isset_bit_vector.get(__LEASTTRACEID_ISSET_ID);
  }

  public void setLeastTraceIDIsSet(boolean value) {
    __isset_bit_vector.set(__LEASTTRACEID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public long getSpanID() {
    return this.spanID;
  }

  public void setSpanID(long spanID) {
    this.spanID = spanID;
    setSpanIDIsSet(true);
  }

  public void unsetSpanID() {
    __isset_bit_vector.clear(__SPANID_ISSET_ID);
  }

  /** Returns true if field spanID is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanID() {
    return __isset_bit_vector.get(__SPANID_ISSET_ID);
  }

  public void setSpanIDIsSet(boolean value) {
    __isset_bit_vector.set(__SPANID_ISSET_ID, value);
  }

  public long getParentSpanId() {
    return this.parentSpanId;
  }

  public void setParentSpanId(long parentSpanId) {
    this.parentSpanId = parentSpanId;
    setParentSpanIdIsSet(true);
  }

  public void unsetParentSpanId() {
    __isset_bit_vector.clear(__PARENTSPANID_ISSET_ID);
  }

  /** Returns true if field parentSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return __isset_bit_vector.get(__PARENTSPANID_ISSET_ID);
  }

  public void setParentSpanIdIsSet(boolean value) {
    __isset_bit_vector.set(__PARENTSPANID_ISSET_ID, value);
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<Annotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(Annotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<Annotation>();
    }
    this.annotations.add(elem);
  }

  public List<Annotation> getAnnotations() {
    return this.annotations;
  }

  public void setAnnotations(List<Annotation> annotations) {
    this.annotations = annotations;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public int getBinaryAnnotationsSize() {
    return (this.binaryAnnotations == null) ? 0 : this.binaryAnnotations.size();
  }

  public java.util.Iterator<BinaryAnnotation> getBinaryAnnotationsIterator() {
    return (this.binaryAnnotations == null) ? null : this.binaryAnnotations.iterator();
  }

  public void addToBinaryAnnotations(BinaryAnnotation elem) {
    if (this.binaryAnnotations == null) {
      this.binaryAnnotations = new ArrayList<BinaryAnnotation>();
    }
    this.binaryAnnotations.add(elem);
  }

  public List<BinaryAnnotation> getBinaryAnnotations() {
    return this.binaryAnnotations;
  }

  public void setBinaryAnnotations(List<BinaryAnnotation> binaryAnnotations) {
    this.binaryAnnotations = binaryAnnotations;
  }

  public void unsetBinaryAnnotations() {
    this.binaryAnnotations = null;
  }

  /** Returns true if field binaryAnnotations is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryAnnotations() {
    return this.binaryAnnotations != null;
  }

  public void setBinaryAnnotationsIsSet(boolean value) {
    if (!value) {
      this.binaryAnnotations = null;
    }
  }

  public int getFlag() {
    return this.flag;
  }

  public void setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
  }

  public void unsetFlag() {
    __isset_bit_vector.clear(__FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return __isset_bit_vector.get(__FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bit_vector.set(__FLAG_ISSET_ID, value);
  }

  public Endpoint getEndPoint() {
    return this.endPoint;
  }

  public void setEndPoint(Endpoint endPoint) {
    this.endPoint = endPoint;
  }

  public void unsetEndPoint() {
    this.endPoint = null;
  }

  /** Returns true if field endPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPoint() {
    return this.endPoint != null;
  }

  public void setEndPointIsSet(boolean value) {
    if (!value) {
      this.endPoint = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentID();
      } else {
        setAgentID((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case MOST_TRACE_ID:
      if (value == null) {
        unsetMostTraceID();
      } else {
        setMostTraceID((Long)value);
      }
      break;

    case LEAST_TRACE_ID:
      if (value == null) {
        unsetLeastTraceID();
      } else {
        setLeastTraceID((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanID();
      } else {
        setSpanID((Long)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((Long)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<Annotation>)value);
      }
      break;

    case BINARY_ANNOTATIONS:
      if (value == null) {
        unsetBinaryAnnotations();
      } else {
        setBinaryAnnotations((List<BinaryAnnotation>)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case END_POINT:
      if (value == null) {
        unsetEndPoint();
      } else {
        setEndPoint((Endpoint)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentID();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case MOST_TRACE_ID:
      return Long.valueOf(getMostTraceID());

    case LEAST_TRACE_ID:
      return Long.valueOf(getLeastTraceID());

    case NAME:
      return getName();

    case SERVICE_NAME:
      return getServiceName();

    case SPAN_ID:
      return Long.valueOf(getSpanID());

    case PARENT_SPAN_ID:
      return Long.valueOf(getParentSpanId());

    case ANNOTATIONS:
      return getAnnotations();

    case BINARY_ANNOTATIONS:
      return getBinaryAnnotations();

    case FLAG:
      return Integer.valueOf(getFlag());

    case END_POINT:
      return getEndPoint();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentID();
    case TIMESTAMP:
      return isSetTimestamp();
    case MOST_TRACE_ID:
      return isSetMostTraceID();
    case LEAST_TRACE_ID:
      return isSetLeastTraceID();
    case NAME:
      return isSetName();
    case SERVICE_NAME:
      return isSetServiceName();
    case SPAN_ID:
      return isSetSpanID();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case ANNOTATIONS:
      return isSetAnnotations();
    case BINARY_ANNOTATIONS:
      return isSetBinaryAnnotations();
    case FLAG:
      return isSetFlag();
    case END_POINT:
      return isSetEndPoint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Span)
      return this.equals((Span)that);
    return false;
  }

  public boolean equals(Span that) {
    if (that == null)
      return false;

    boolean this_present_agentID = true && this.isSetAgentID();
    boolean that_present_agentID = true && that.isSetAgentID();
    if (this_present_agentID || that_present_agentID) {
      if (!(this_present_agentID && that_present_agentID))
        return false;
      if (!this.agentID.equals(that.agentID))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_mostTraceID = true;
    boolean that_present_mostTraceID = true;
    if (this_present_mostTraceID || that_present_mostTraceID) {
      if (!(this_present_mostTraceID && that_present_mostTraceID))
        return false;
      if (this.mostTraceID != that.mostTraceID)
        return false;
    }

    boolean this_present_leastTraceID = true;
    boolean that_present_leastTraceID = true;
    if (this_present_leastTraceID || that_present_leastTraceID) {
      if (!(this_present_leastTraceID && that_present_leastTraceID))
        return false;
      if (this.leastTraceID != that.leastTraceID)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_spanID = true;
    boolean that_present_spanID = true;
    if (this_present_spanID || that_present_spanID) {
      if (!(this_present_spanID && that_present_spanID))
        return false;
      if (this.spanID != that.spanID)
        return false;
    }

    boolean this_present_parentSpanId = true && this.isSetParentSpanId();
    boolean that_present_parentSpanId = true && that.isSetParentSpanId();
    if (this_present_parentSpanId || that_present_parentSpanId) {
      if (!(this_present_parentSpanId && that_present_parentSpanId))
        return false;
      if (this.parentSpanId != that.parentSpanId)
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_binaryAnnotations = true && this.isSetBinaryAnnotations();
    boolean that_present_binaryAnnotations = true && that.isSetBinaryAnnotations();
    if (this_present_binaryAnnotations || that_present_binaryAnnotations) {
      if (!(this_present_binaryAnnotations && that_present_binaryAnnotations))
        return false;
      if (!this.binaryAnnotations.equals(that.binaryAnnotations))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_endPoint = true && this.isSetEndPoint();
    boolean that_present_endPoint = true && that.isSetEndPoint();
    if (this_present_endPoint || that_present_endPoint) {
      if (!(this_present_endPoint && that_present_endPoint))
        return false;
      if (!this.endPoint.equals(that.endPoint))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Span other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Span typedOther = (Span)other;

    lastComparison = Boolean.valueOf(isSetAgentID()).compareTo(typedOther.isSetAgentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentID, typedOther.agentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMostTraceID()).compareTo(typedOther.isSetMostTraceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMostTraceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mostTraceID, typedOther.mostTraceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeastTraceID()).compareTo(typedOther.isSetLeastTraceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeastTraceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leastTraceID, typedOther.leastTraceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanID()).compareTo(typedOther.isSetSpanID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanID, typedOther.spanID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentSpanId()).compareTo(typedOther.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanId, typedOther.parentSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryAnnotations()).compareTo(typedOther.isSetBinaryAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryAnnotations, typedOther.binaryAnnotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(typedOther.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, typedOther.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPoint()).compareTo(typedOther.isSetEndPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPoint, typedOther.endPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Span(");
    boolean first = true;

    sb.append("agentID:");
    if (this.agentID == null) {
      sb.append("null");
    } else {
      sb.append(this.agentID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mostTraceID:");
    sb.append(this.mostTraceID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leastTraceID:");
    sb.append(this.leastTraceID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanID:");
    sb.append(this.spanID);
    first = false;
    if (isSetParentSpanId()) {
      if (!first) sb.append(", ");
      sb.append("parentSpanId:");
      sb.append(this.parentSpanId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryAnnotations:");
    if (this.binaryAnnotations == null) {
      sb.append("null");
    } else {
      sb.append(this.binaryAnnotations);
    }
    first = false;
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("endPoint:");
    if (this.endPoint == null) {
      sb.append("null");
    } else {
      sb.append(this.endPoint);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanStandardSchemeFactory implements SchemeFactory {
    public SpanStandardScheme getScheme() {
      return new SpanStandardScheme();
    }
  }

  private static class SpanStandardScheme extends StandardScheme<Span> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Span struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentID = iprot.readString();
              struct.setAgentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOST_TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mostTraceID = iprot.readI64();
              struct.setMostTraceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEAST_TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leastTraceID = iprot.readI64();
              struct.setLeastTraceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spanID = iprot.readI64();
              struct.setSpanIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentSpanId = iprot.readI64();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.annotations = new ArrayList<Annotation>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Annotation _elem2; // required
                  _elem2 = new Annotation();
                  _elem2.read(iprot);
                  struct.annotations.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BINARY_ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.binaryAnnotations = new ArrayList<BinaryAnnotation>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  BinaryAnnotation _elem5; // required
                  _elem5 = new BinaryAnnotation();
                  _elem5.read(iprot);
                  struct.binaryAnnotations.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setBinaryAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endPoint = new Endpoint();
              struct.endPoint.read(iprot);
              struct.setEndPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Span struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentID != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOST_TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.mostTraceID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEAST_TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.leastTraceID);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.spanID);
      oprot.writeFieldEnd();
      if (struct.isSetParentSpanId()) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeI64(struct.parentSpanId);
        oprot.writeFieldEnd();
      }
      if (struct.annotations != null) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.annotations.size()));
          for (Annotation _iter6 : struct.annotations)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.binaryAnnotations != null) {
        oprot.writeFieldBegin(BINARY_ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.binaryAnnotations.size()));
          for (BinaryAnnotation _iter7 : struct.binaryAnnotations)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetFlag()) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.endPoint != null) {
        oprot.writeFieldBegin(END_POINT_FIELD_DESC);
        struct.endPoint.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanTupleSchemeFactory implements SchemeFactory {
    public SpanTupleScheme getScheme() {
      return new SpanTupleScheme();
    }
  }

  private static class SpanTupleScheme extends TupleScheme<Span> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentID()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetMostTraceID()) {
        optionals.set(2);
      }
      if (struct.isSetLeastTraceID()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetServiceName()) {
        optionals.set(5);
      }
      if (struct.isSetSpanID()) {
        optionals.set(6);
      }
      if (struct.isSetParentSpanId()) {
        optionals.set(7);
      }
      if (struct.isSetAnnotations()) {
        optionals.set(8);
      }
      if (struct.isSetBinaryAnnotations()) {
        optionals.set(9);
      }
      if (struct.isSetFlag()) {
        optionals.set(10);
      }
      if (struct.isSetEndPoint()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetAgentID()) {
        oprot.writeString(struct.agentID);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetMostTraceID()) {
        oprot.writeI64(struct.mostTraceID);
      }
      if (struct.isSetLeastTraceID()) {
        oprot.writeI64(struct.leastTraceID);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetSpanID()) {
        oprot.writeI64(struct.spanID);
      }
      if (struct.isSetParentSpanId()) {
        oprot.writeI64(struct.parentSpanId);
      }
      if (struct.isSetAnnotations()) {
        {
          oprot.writeI32(struct.annotations.size());
          for (Annotation _iter8 : struct.annotations)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetBinaryAnnotations()) {
        {
          oprot.writeI32(struct.binaryAnnotations.size());
          for (BinaryAnnotation _iter9 : struct.binaryAnnotations)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetEndPoint()) {
        struct.endPoint.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.agentID = iprot.readString();
        struct.setAgentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mostTraceID = iprot.readI64();
        struct.setMostTraceIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.leastTraceID = iprot.readI64();
        struct.setLeastTraceIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.spanID = iprot.readI64();
        struct.setSpanIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.parentSpanId = iprot.readI64();
        struct.setParentSpanIdIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.annotations = new ArrayList<Annotation>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            Annotation _elem12; // required
            _elem12 = new Annotation();
            _elem12.read(iprot);
            struct.annotations.add(_elem12);
          }
        }
        struct.setAnnotationsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.binaryAnnotations = new ArrayList<BinaryAnnotation>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            BinaryAnnotation _elem15; // required
            _elem15 = new BinaryAnnotation();
            _elem15.read(iprot);
            struct.binaryAnnotations.add(_elem15);
          }
        }
        struct.setBinaryAnnotationsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endPoint = new Endpoint();
        struct.endPoint.read(iprot);
        struct.setEndPointIsSet(true);
      }
    }
  }

}

