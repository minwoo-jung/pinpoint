/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.profiler.common.dto.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Span implements org.apache.thrift.TBase<Span, Span._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Span");

  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AGENT_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("agentIdentifier", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField MOST_TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mostTraceId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LEAST_TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leastTraceId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSpanId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("elapsed", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RPC_FIELD_DESC = new org.apache.thrift.protocol.TField("rpc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField END_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endPoint", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SUB_SPAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subSpanList", org.apache.thrift.protocol.TType.LIST, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanTupleSchemeFactory());
  }

  private String agentId; // required
  private short agentIdentifier; // required
  private long mostTraceId; // required
  private long leastTraceId; // required
  private int spanId; // required
  private int parentSpanId; // optional
  private long startTime; // required
  private int elapsed; // required
  private String rpc; // optional
  private String serviceName; // optional
  private short serviceType; // required
  private String endPoint; // optional
  private String remoteAddr; // optional
  private List<Annotation> annotations; // required
  private short flag; // optional
  private int err; // optional
  private List<SubSpan> subSpanList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_ID((short)1, "agentId"),
    AGENT_IDENTIFIER((short)2, "agentIdentifier"),
    MOST_TRACE_ID((short)3, "mostTraceId"),
    LEAST_TRACE_ID((short)4, "leastTraceId"),
    SPAN_ID((short)5, "spanId"),
    PARENT_SPAN_ID((short)6, "parentSpanId"),
    START_TIME((short)7, "startTime"),
    ELAPSED((short)8, "elapsed"),
    RPC((short)9, "rpc"),
    SERVICE_NAME((short)10, "serviceName"),
    SERVICE_TYPE((short)11, "serviceType"),
    END_POINT((short)12, "endPoint"),
    REMOTE_ADDR((short)13, "remoteAddr"),
    ANNOTATIONS((short)14, "annotations"),
    FLAG((short)15, "flag"),
    ERR((short)16, "err"),
    SUB_SPAN_LIST((short)17, "subSpanList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_ID
          return AGENT_ID;
        case 2: // AGENT_IDENTIFIER
          return AGENT_IDENTIFIER;
        case 3: // MOST_TRACE_ID
          return MOST_TRACE_ID;
        case 4: // LEAST_TRACE_ID
          return LEAST_TRACE_ID;
        case 5: // SPAN_ID
          return SPAN_ID;
        case 6: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 7: // START_TIME
          return START_TIME;
        case 8: // ELAPSED
          return ELAPSED;
        case 9: // RPC
          return RPC;
        case 10: // SERVICE_NAME
          return SERVICE_NAME;
        case 11: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 12: // END_POINT
          return END_POINT;
        case 13: // REMOTE_ADDR
          return REMOTE_ADDR;
        case 14: // ANNOTATIONS
          return ANNOTATIONS;
        case 15: // FLAG
          return FLAG;
        case 16: // ERR
          return ERR;
        case 17: // SUB_SPAN_LIST
          return SUB_SPAN_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGENTIDENTIFIER_ISSET_ID = 0;
  private static final int __MOSTTRACEID_ISSET_ID = 1;
  private static final int __LEASTTRACEID_ISSET_ID = 2;
  private static final int __SPANID_ISSET_ID = 3;
  private static final int __PARENTSPANID_ISSET_ID = 4;
  private static final int __STARTTIME_ISSET_ID = 5;
  private static final int __ELAPSED_ISSET_ID = 6;
  private static final int __SERVICETYPE_ISSET_ID = 7;
  private static final int __FLAG_ISSET_ID = 8;
  private static final int __ERR_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);
  private _Fields optionals[] = {_Fields.PARENT_SPAN_ID,_Fields.RPC,_Fields.SERVICE_NAME,_Fields.END_POINT,_Fields.REMOTE_ADDR,_Fields.FLAG,_Fields.ERR,_Fields.SUB_SPAN_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("agentIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MOST_TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("mostTraceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEAST_TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("leastTraceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parentSpanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("elapsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RPC, new org.apache.thrift.meta_data.FieldMetaData("rpc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.END_POINT, new org.apache.thrift.meta_data.FieldMetaData("endPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("remoteAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Annotation.class))));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_SPAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("subSpanList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubSpan.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
  }

  public Span() {
    this.parentSpanId = -1;

    this.flag = (short)0;

  }

  public Span(
    String agentId,
    short agentIdentifier,
    long mostTraceId,
    long leastTraceId,
    int spanId,
    long startTime,
    int elapsed,
    short serviceType,
    List<Annotation> annotations)
  {
    this();
    this.agentId = agentId;
    this.agentIdentifier = agentIdentifier;
    setAgentIdentifierIsSet(true);
    this.mostTraceId = mostTraceId;
    setMostTraceIdIsSet(true);
    this.leastTraceId = leastTraceId;
    setLeastTraceIdIsSet(true);
    this.spanId = spanId;
    setSpanIdIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
    this.annotations = annotations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Span(Span other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    this.agentIdentifier = other.agentIdentifier;
    this.mostTraceId = other.mostTraceId;
    this.leastTraceId = other.leastTraceId;
    this.spanId = other.spanId;
    this.parentSpanId = other.parentSpanId;
    this.startTime = other.startTime;
    this.elapsed = other.elapsed;
    if (other.isSetRpc()) {
      this.rpc = other.rpc;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    this.serviceType = other.serviceType;
    if (other.isSetEndPoint()) {
      this.endPoint = other.endPoint;
    }
    if (other.isSetRemoteAddr()) {
      this.remoteAddr = other.remoteAddr;
    }
    if (other.isSetAnnotations()) {
      List<Annotation> __this__annotations = new ArrayList<Annotation>();
      for (Annotation other_element : other.annotations) {
        __this__annotations.add(new Annotation(other_element));
      }
      this.annotations = __this__annotations;
    }
    this.flag = other.flag;
    this.err = other.err;
    if (other.isSetSubSpanList()) {
      List<SubSpan> __this__subSpanList = new ArrayList<SubSpan>();
      for (SubSpan other_element : other.subSpanList) {
        __this__subSpanList.add(new SubSpan(other_element));
      }
      this.subSpanList = __this__subSpanList;
    }
  }

  public Span deepCopy() {
    return new Span(this);
  }

  @Override
  public void clear() {
    this.agentId = null;
    setAgentIdentifierIsSet(false);
    this.agentIdentifier = 0;
    setMostTraceIdIsSet(false);
    this.mostTraceId = 0;
    setLeastTraceIdIsSet(false);
    this.leastTraceId = 0;
    setSpanIdIsSet(false);
    this.spanId = 0;
    this.parentSpanId = -1;

    setStartTimeIsSet(false);
    this.startTime = 0;
    setElapsedIsSet(false);
    this.elapsed = 0;
    this.rpc = null;
    this.serviceName = null;
    setServiceTypeIsSet(false);
    this.serviceType = 0;
    this.endPoint = null;
    this.remoteAddr = null;
    this.annotations = null;
    this.flag = (short)0;

    setErrIsSet(false);
    this.err = 0;
    this.subSpanList = null;
  }

  public String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  public short getAgentIdentifier() {
    return this.agentIdentifier;
  }

  public void setAgentIdentifier(short agentIdentifier) {
    this.agentIdentifier = agentIdentifier;
    setAgentIdentifierIsSet(true);
  }

  public void unsetAgentIdentifier() {
    __isset_bit_vector.clear(__AGENTIDENTIFIER_ISSET_ID);
  }

  /** Returns true if field agentIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentIdentifier() {
    return __isset_bit_vector.get(__AGENTIDENTIFIER_ISSET_ID);
  }

  public void setAgentIdentifierIsSet(boolean value) {
    __isset_bit_vector.set(__AGENTIDENTIFIER_ISSET_ID, value);
  }

  public long getMostTraceId() {
    return this.mostTraceId;
  }

  public void setMostTraceId(long mostTraceId) {
    this.mostTraceId = mostTraceId;
    setMostTraceIdIsSet(true);
  }

  public void unsetMostTraceId() {
    __isset_bit_vector.clear(__MOSTTRACEID_ISSET_ID);
  }

  /** Returns true if field mostTraceId is set (has been assigned a value) and false otherwise */
  public boolean isSetMostTraceId() {
    return __isset_bit_vector.get(__MOSTTRACEID_ISSET_ID);
  }

  public void setMostTraceIdIsSet(boolean value) {
    __isset_bit_vector.set(__MOSTTRACEID_ISSET_ID, value);
  }

  public long getLeastTraceId() {
    return this.leastTraceId;
  }

  public void setLeastTraceId(long leastTraceId) {
    this.leastTraceId = leastTraceId;
    setLeastTraceIdIsSet(true);
  }

  public void unsetLeastTraceId() {
    __isset_bit_vector.clear(__LEASTTRACEID_ISSET_ID);
  }

  /** Returns true if field leastTraceId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeastTraceId() {
    return __isset_bit_vector.get(__LEASTTRACEID_ISSET_ID);
  }

  public void setLeastTraceIdIsSet(boolean value) {
    __isset_bit_vector.set(__LEASTTRACEID_ISSET_ID, value);
  }

  public int getSpanId() {
    return this.spanId;
  }

  public void setSpanId(int spanId) {
    this.spanId = spanId;
    setSpanIdIsSet(true);
  }

  public void unsetSpanId() {
    __isset_bit_vector.clear(__SPANID_ISSET_ID);
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return __isset_bit_vector.get(__SPANID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bit_vector.set(__SPANID_ISSET_ID, value);
  }

  public int getParentSpanId() {
    return this.parentSpanId;
  }

  public void setParentSpanId(int parentSpanId) {
    this.parentSpanId = parentSpanId;
    setParentSpanIdIsSet(true);
  }

  public void unsetParentSpanId() {
    __isset_bit_vector.clear(__PARENTSPANID_ISSET_ID);
  }

  /** Returns true if field parentSpanId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSpanId() {
    return __isset_bit_vector.get(__PARENTSPANID_ISSET_ID);
  }

  public void setParentSpanIdIsSet(boolean value) {
    __isset_bit_vector.set(__PARENTSPANID_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public void setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
  }

  public void unsetStartTime() {
    __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
  }

  public int getElapsed() {
    return this.elapsed;
  }

  public void setElapsed(int elapsed) {
    this.elapsed = elapsed;
    setElapsedIsSet(true);
  }

  public void unsetElapsed() {
    __isset_bit_vector.clear(__ELAPSED_ISSET_ID);
  }

  /** Returns true if field elapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetElapsed() {
    return __isset_bit_vector.get(__ELAPSED_ISSET_ID);
  }

  public void setElapsedIsSet(boolean value) {
    __isset_bit_vector.set(__ELAPSED_ISSET_ID, value);
  }

  public String getRpc() {
    return this.rpc;
  }

  public void setRpc(String rpc) {
    this.rpc = rpc;
  }

  public void unsetRpc() {
    this.rpc = null;
  }

  /** Returns true if field rpc is set (has been assigned a value) and false otherwise */
  public boolean isSetRpc() {
    return this.rpc != null;
  }

  public void setRpcIsSet(boolean value) {
    if (!value) {
      this.rpc = null;
    }
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public short getServiceType() {
    return this.serviceType;
  }

  public void setServiceType(short serviceType) {
    this.serviceType = serviceType;
    setServiceTypeIsSet(true);
  }

  public void unsetServiceType() {
    __isset_bit_vector.clear(__SERVICETYPE_ISSET_ID);
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return __isset_bit_vector.get(__SERVICETYPE_ISSET_ID);
  }

  public void setServiceTypeIsSet(boolean value) {
    __isset_bit_vector.set(__SERVICETYPE_ISSET_ID, value);
  }

  public String getEndPoint() {
    return this.endPoint;
  }

  public void setEndPoint(String endPoint) {
    this.endPoint = endPoint;
  }

  public void unsetEndPoint() {
    this.endPoint = null;
  }

  /** Returns true if field endPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPoint() {
    return this.endPoint != null;
  }

  public void setEndPointIsSet(boolean value) {
    if (!value) {
      this.endPoint = null;
    }
  }

  public String getRemoteAddr() {
    return this.remoteAddr;
  }

  public void setRemoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
  }

  public void unsetRemoteAddr() {
    this.remoteAddr = null;
  }

  /** Returns true if field remoteAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAddr() {
    return this.remoteAddr != null;
  }

  public void setRemoteAddrIsSet(boolean value) {
    if (!value) {
      this.remoteAddr = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<Annotation> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(Annotation elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<Annotation>();
    }
    this.annotations.add(elem);
  }

  public List<Annotation> getAnnotations() {
    return this.annotations;
  }

  public void setAnnotations(List<Annotation> annotations) {
    this.annotations = annotations;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public short getFlag() {
    return this.flag;
  }

  public void setFlag(short flag) {
    this.flag = flag;
    setFlagIsSet(true);
  }

  public void unsetFlag() {
    __isset_bit_vector.clear(__FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return __isset_bit_vector.get(__FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bit_vector.set(__FLAG_ISSET_ID, value);
  }

  public int getErr() {
    return this.err;
  }

  public void setErr(int err) {
    this.err = err;
    setErrIsSet(true);
  }

  public void unsetErr() {
    __isset_bit_vector.clear(__ERR_ISSET_ID);
  }

  /** Returns true if field err is set (has been assigned a value) and false otherwise */
  public boolean isSetErr() {
    return __isset_bit_vector.get(__ERR_ISSET_ID);
  }

  public void setErrIsSet(boolean value) {
    __isset_bit_vector.set(__ERR_ISSET_ID, value);
  }

  public int getSubSpanListSize() {
    return (this.subSpanList == null) ? 0 : this.subSpanList.size();
  }

  public java.util.Iterator<SubSpan> getSubSpanListIterator() {
    return (this.subSpanList == null) ? null : this.subSpanList.iterator();
  }

  public void addToSubSpanList(SubSpan elem) {
    if (this.subSpanList == null) {
      this.subSpanList = new ArrayList<SubSpan>();
    }
    this.subSpanList.add(elem);
  }

  public List<SubSpan> getSubSpanList() {
    return this.subSpanList;
  }

  public void setSubSpanList(List<SubSpan> subSpanList) {
    this.subSpanList = subSpanList;
  }

  public void unsetSubSpanList() {
    this.subSpanList = null;
  }

  /** Returns true if field subSpanList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubSpanList() {
    return this.subSpanList != null;
  }

  public void setSubSpanListIsSet(boolean value) {
    if (!value) {
      this.subSpanList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((String)value);
      }
      break;

    case AGENT_IDENTIFIER:
      if (value == null) {
        unsetAgentIdentifier();
      } else {
        setAgentIdentifier((Short)value);
      }
      break;

    case MOST_TRACE_ID:
      if (value == null) {
        unsetMostTraceId();
      } else {
        setMostTraceId((Long)value);
      }
      break;

    case LEAST_TRACE_ID:
      if (value == null) {
        unsetLeastTraceId();
      } else {
        setLeastTraceId((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Integer)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParentSpanId();
      } else {
        setParentSpanId((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case ELAPSED:
      if (value == null) {
        unsetElapsed();
      } else {
        setElapsed((Integer)value);
      }
      break;

    case RPC:
      if (value == null) {
        unsetRpc();
      } else {
        setRpc((String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((Short)value);
      }
      break;

    case END_POINT:
      if (value == null) {
        unsetEndPoint();
      } else {
        setEndPoint((String)value);
      }
      break;

    case REMOTE_ADDR:
      if (value == null) {
        unsetRemoteAddr();
      } else {
        setRemoteAddr((String)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<Annotation>)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Short)value);
      }
      break;

    case ERR:
      if (value == null) {
        unsetErr();
      } else {
        setErr((Integer)value);
      }
      break;

    case SUB_SPAN_LIST:
      if (value == null) {
        unsetSubSpanList();
      } else {
        setSubSpanList((List<SubSpan>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_ID:
      return getAgentId();

    case AGENT_IDENTIFIER:
      return Short.valueOf(getAgentIdentifier());

    case MOST_TRACE_ID:
      return Long.valueOf(getMostTraceId());

    case LEAST_TRACE_ID:
      return Long.valueOf(getLeastTraceId());

    case SPAN_ID:
      return Integer.valueOf(getSpanId());

    case PARENT_SPAN_ID:
      return Integer.valueOf(getParentSpanId());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case ELAPSED:
      return Integer.valueOf(getElapsed());

    case RPC:
      return getRpc();

    case SERVICE_NAME:
      return getServiceName();

    case SERVICE_TYPE:
      return Short.valueOf(getServiceType());

    case END_POINT:
      return getEndPoint();

    case REMOTE_ADDR:
      return getRemoteAddr();

    case ANNOTATIONS:
      return getAnnotations();

    case FLAG:
      return Short.valueOf(getFlag());

    case ERR:
      return Integer.valueOf(getErr());

    case SUB_SPAN_LIST:
      return getSubSpanList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGENT_ID:
      return isSetAgentId();
    case AGENT_IDENTIFIER:
      return isSetAgentIdentifier();
    case MOST_TRACE_ID:
      return isSetMostTraceId();
    case LEAST_TRACE_ID:
      return isSetLeastTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case PARENT_SPAN_ID:
      return isSetParentSpanId();
    case START_TIME:
      return isSetStartTime();
    case ELAPSED:
      return isSetElapsed();
    case RPC:
      return isSetRpc();
    case SERVICE_NAME:
      return isSetServiceName();
    case SERVICE_TYPE:
      return isSetServiceType();
    case END_POINT:
      return isSetEndPoint();
    case REMOTE_ADDR:
      return isSetRemoteAddr();
    case ANNOTATIONS:
      return isSetAnnotations();
    case FLAG:
      return isSetFlag();
    case ERR:
      return isSetErr();
    case SUB_SPAN_LIST:
      return isSetSubSpanList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Span)
      return this.equals((Span)that);
    return false;
  }

  public boolean equals(Span that) {
    if (that == null)
      return false;

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_agentIdentifier = true;
    boolean that_present_agentIdentifier = true;
    if (this_present_agentIdentifier || that_present_agentIdentifier) {
      if (!(this_present_agentIdentifier && that_present_agentIdentifier))
        return false;
      if (this.agentIdentifier != that.agentIdentifier)
        return false;
    }

    boolean this_present_mostTraceId = true;
    boolean that_present_mostTraceId = true;
    if (this_present_mostTraceId || that_present_mostTraceId) {
      if (!(this_present_mostTraceId && that_present_mostTraceId))
        return false;
      if (this.mostTraceId != that.mostTraceId)
        return false;
    }

    boolean this_present_leastTraceId = true;
    boolean that_present_leastTraceId = true;
    if (this_present_leastTraceId || that_present_leastTraceId) {
      if (!(this_present_leastTraceId && that_present_leastTraceId))
        return false;
      if (this.leastTraceId != that.leastTraceId)
        return false;
    }

    boolean this_present_spanId = true;
    boolean that_present_spanId = true;
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (this.spanId != that.spanId)
        return false;
    }

    boolean this_present_parentSpanId = true && this.isSetParentSpanId();
    boolean that_present_parentSpanId = true && that.isSetParentSpanId();
    if (this_present_parentSpanId || that_present_parentSpanId) {
      if (!(this_present_parentSpanId && that_present_parentSpanId))
        return false;
      if (this.parentSpanId != that.parentSpanId)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_elapsed = true;
    boolean that_present_elapsed = true;
    if (this_present_elapsed || that_present_elapsed) {
      if (!(this_present_elapsed && that_present_elapsed))
        return false;
      if (this.elapsed != that.elapsed)
        return false;
    }

    boolean this_present_rpc = true && this.isSetRpc();
    boolean that_present_rpc = true && that.isSetRpc();
    if (this_present_rpc || that_present_rpc) {
      if (!(this_present_rpc && that_present_rpc))
        return false;
      if (!this.rpc.equals(that.rpc))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_serviceType = true;
    boolean that_present_serviceType = true;
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (this.serviceType != that.serviceType)
        return false;
    }

    boolean this_present_endPoint = true && this.isSetEndPoint();
    boolean that_present_endPoint = true && that.isSetEndPoint();
    if (this_present_endPoint || that_present_endPoint) {
      if (!(this_present_endPoint && that_present_endPoint))
        return false;
      if (!this.endPoint.equals(that.endPoint))
        return false;
    }

    boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
    boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
    if (this_present_remoteAddr || that_present_remoteAddr) {
      if (!(this_present_remoteAddr && that_present_remoteAddr))
        return false;
      if (!this.remoteAddr.equals(that.remoteAddr))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_err = true && this.isSetErr();
    boolean that_present_err = true && that.isSetErr();
    if (this_present_err || that_present_err) {
      if (!(this_present_err && that_present_err))
        return false;
      if (this.err != that.err)
        return false;
    }

    boolean this_present_subSpanList = true && this.isSetSubSpanList();
    boolean that_present_subSpanList = true && that.isSetSubSpanList();
    if (this_present_subSpanList || that_present_subSpanList) {
      if (!(this_present_subSpanList && that_present_subSpanList))
        return false;
      if (!this.subSpanList.equals(that.subSpanList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Span other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Span typedOther = (Span)other;

    lastComparison = Boolean.valueOf(isSetAgentId()).compareTo(typedOther.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, typedOther.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentIdentifier()).compareTo(typedOther.isSetAgentIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentIdentifier, typedOther.agentIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMostTraceId()).compareTo(typedOther.isSetMostTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMostTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mostTraceId, typedOther.mostTraceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeastTraceId()).compareTo(typedOther.isSetLeastTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeastTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leastTraceId, typedOther.leastTraceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, typedOther.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentSpanId()).compareTo(typedOther.isSetParentSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSpanId, typedOther.parentSpanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElapsed()).compareTo(typedOther.isSetElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elapsed, typedOther.elapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpc()).compareTo(typedOther.isSetRpc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpc, typedOther.rpc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(typedOther.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, typedOther.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPoint()).compareTo(typedOther.isSetEndPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPoint, typedOther.endPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAddr()).compareTo(typedOther.isSetRemoteAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddr, typedOther.remoteAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(typedOther.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, typedOther.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(typedOther.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, typedOther.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErr()).compareTo(typedOther.isSetErr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, typedOther.err);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubSpanList()).compareTo(typedOther.isSetSubSpanList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubSpanList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subSpanList, typedOther.subSpanList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Span(");
    boolean first = true;

    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentIdentifier:");
    sb.append(this.agentIdentifier);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mostTraceId:");
    sb.append(this.mostTraceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leastTraceId:");
    sb.append(this.leastTraceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    sb.append(this.spanId);
    first = false;
    if (isSetParentSpanId()) {
      if (!first) sb.append(", ");
      sb.append("parentSpanId:");
      sb.append(this.parentSpanId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elapsed:");
    sb.append(this.elapsed);
    first = false;
    if (isSetRpc()) {
      if (!first) sb.append(", ");
      sb.append("rpc:");
      if (this.rpc == null) {
        sb.append("null");
      } else {
        sb.append(this.rpc);
      }
      first = false;
    }
    if (isSetServiceName()) {
      if (!first) sb.append(", ");
      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("serviceType:");
    sb.append(this.serviceType);
    first = false;
    if (isSetEndPoint()) {
      if (!first) sb.append(", ");
      sb.append("endPoint:");
      if (this.endPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endPoint);
      }
      first = false;
    }
    if (isSetRemoteAddr()) {
      if (!first) sb.append(", ");
      sb.append("remoteAddr:");
      if (this.remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAddr);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
    }
    if (isSetErr()) {
      if (!first) sb.append(", ");
      sb.append("err:");
      sb.append(this.err);
      first = false;
    }
    if (isSetSubSpanList()) {
      if (!first) sb.append(", ");
      sb.append("subSpanList:");
      if (this.subSpanList == null) {
        sb.append("null");
      } else {
        sb.append(this.subSpanList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanStandardSchemeFactory implements SchemeFactory {
    public SpanStandardScheme getScheme() {
      return new SpanStandardScheme();
    }
  }

  private static class SpanStandardScheme extends StandardScheme<Span> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Span struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGENT_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.agentIdentifier = iprot.readI16();
              struct.setAgentIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOST_TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mostTraceId = iprot.readI64();
              struct.setMostTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEAST_TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leastTraceId = iprot.readI64();
              struct.setLeastTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spanId = iprot.readI32();
              struct.setSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentSpanId = iprot.readI32();
              struct.setParentSpanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ELAPSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elapsed = iprot.readI32();
              struct.setElapsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RPC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpc = iprot.readString();
              struct.setRpcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serviceType = iprot.readI16();
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endPoint = iprot.readString();
              struct.setEndPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REMOTE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteAddr = iprot.readString();
              struct.setRemoteAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.annotations = new ArrayList<Annotation>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  Annotation _elem26; // required
                  _elem26 = new Annotation();
                  _elem26.read(iprot);
                  struct.annotations.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.flag = iprot.readI16();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ERR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.err = iprot.readI32();
              struct.setErrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SUB_SPAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.subSpanList = new ArrayList<SubSpan>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  SubSpan _elem29; // required
                  _elem29 = new SubSpan();
                  _elem29.read(iprot);
                  struct.subSpanList.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setSubSpanListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Span struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGENT_IDENTIFIER_FIELD_DESC);
      oprot.writeI16(struct.agentIdentifier);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOST_TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.mostTraceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEAST_TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.leastTraceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI32(struct.spanId);
      oprot.writeFieldEnd();
      if (struct.isSetParentSpanId()) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeI32(struct.parentSpanId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ELAPSED_FIELD_DESC);
      oprot.writeI32(struct.elapsed);
      oprot.writeFieldEnd();
      if (struct.rpc != null) {
        if (struct.isSetRpc()) {
          oprot.writeFieldBegin(RPC_FIELD_DESC);
          oprot.writeString(struct.rpc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceName != null) {
        if (struct.isSetServiceName()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
      oprot.writeI16(struct.serviceType);
      oprot.writeFieldEnd();
      if (struct.endPoint != null) {
        if (struct.isSetEndPoint()) {
          oprot.writeFieldBegin(END_POINT_FIELD_DESC);
          oprot.writeString(struct.endPoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAddr != null) {
        if (struct.isSetRemoteAddr()) {
          oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.remoteAddr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.annotations != null) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.annotations.size()));
          for (Annotation _iter30 : struct.annotations)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetFlag()) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI16(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErr()) {
        oprot.writeFieldBegin(ERR_FIELD_DESC);
        oprot.writeI32(struct.err);
        oprot.writeFieldEnd();
      }
      if (struct.subSpanList != null) {
        if (struct.isSetSubSpanList()) {
          oprot.writeFieldBegin(SUB_SPAN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subSpanList.size()));
            for (SubSpan _iter31 : struct.subSpanList)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanTupleSchemeFactory implements SchemeFactory {
    public SpanTupleScheme getScheme() {
      return new SpanTupleScheme();
    }
  }

  private static class SpanTupleScheme extends TupleScheme<Span> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAgentId()) {
        optionals.set(0);
      }
      if (struct.isSetAgentIdentifier()) {
        optionals.set(1);
      }
      if (struct.isSetMostTraceId()) {
        optionals.set(2);
      }
      if (struct.isSetLeastTraceId()) {
        optionals.set(3);
      }
      if (struct.isSetSpanId()) {
        optionals.set(4);
      }
      if (struct.isSetParentSpanId()) {
        optionals.set(5);
      }
      if (struct.isSetStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetElapsed()) {
        optionals.set(7);
      }
      if (struct.isSetRpc()) {
        optionals.set(8);
      }
      if (struct.isSetServiceName()) {
        optionals.set(9);
      }
      if (struct.isSetServiceType()) {
        optionals.set(10);
      }
      if (struct.isSetEndPoint()) {
        optionals.set(11);
      }
      if (struct.isSetRemoteAddr()) {
        optionals.set(12);
      }
      if (struct.isSetAnnotations()) {
        optionals.set(13);
      }
      if (struct.isSetFlag()) {
        optionals.set(14);
      }
      if (struct.isSetErr()) {
        optionals.set(15);
      }
      if (struct.isSetSubSpanList()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetAgentIdentifier()) {
        oprot.writeI16(struct.agentIdentifier);
      }
      if (struct.isSetMostTraceId()) {
        oprot.writeI64(struct.mostTraceId);
      }
      if (struct.isSetLeastTraceId()) {
        oprot.writeI64(struct.leastTraceId);
      }
      if (struct.isSetSpanId()) {
        oprot.writeI32(struct.spanId);
      }
      if (struct.isSetParentSpanId()) {
        oprot.writeI32(struct.parentSpanId);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetElapsed()) {
        oprot.writeI32(struct.elapsed);
      }
      if (struct.isSetRpc()) {
        oprot.writeString(struct.rpc);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetServiceType()) {
        oprot.writeI16(struct.serviceType);
      }
      if (struct.isSetEndPoint()) {
        oprot.writeString(struct.endPoint);
      }
      if (struct.isSetRemoteAddr()) {
        oprot.writeString(struct.remoteAddr);
      }
      if (struct.isSetAnnotations()) {
        {
          oprot.writeI32(struct.annotations.size());
          for (Annotation _iter32 : struct.annotations)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetFlag()) {
        oprot.writeI16(struct.flag);
      }
      if (struct.isSetErr()) {
        oprot.writeI32(struct.err);
      }
      if (struct.isSetSubSpanList()) {
        {
          oprot.writeI32(struct.subSpanList.size());
          for (SubSpan _iter33 : struct.subSpanList)
          {
            _iter33.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Span struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agentIdentifier = iprot.readI16();
        struct.setAgentIdentifierIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mostTraceId = iprot.readI64();
        struct.setMostTraceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.leastTraceId = iprot.readI64();
        struct.setLeastTraceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spanId = iprot.readI32();
        struct.setSpanIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.parentSpanId = iprot.readI32();
        struct.setParentSpanIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.elapsed = iprot.readI32();
        struct.setElapsedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rpc = iprot.readString();
        struct.setRpcIsSet(true);
      }
      if (incoming.get(9)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.serviceType = iprot.readI16();
        struct.setServiceTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endPoint = iprot.readString();
        struct.setEndPointIsSet(true);
      }
      if (incoming.get(12)) {
        struct.remoteAddr = iprot.readString();
        struct.setRemoteAddrIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.annotations = new ArrayList<Annotation>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            Annotation _elem36; // required
            _elem36 = new Annotation();
            _elem36.read(iprot);
            struct.annotations.add(_elem36);
          }
        }
        struct.setAnnotationsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.flag = iprot.readI16();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(15)) {
        struct.err = iprot.readI32();
        struct.setErrIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subSpanList = new ArrayList<SubSpan>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            SubSpan _elem39; // required
            _elem39 = new SubSpan();
            _elem39.read(iprot);
            struct.subSpanList.add(_elem39);
          }
        }
        struct.setSubSpanListIsSet(true);
      }
    }
  }

}

